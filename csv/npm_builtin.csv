id,package,file,name,qualifiedname,comment,parameters_num,category,summary
1,assert,,assert,assert,"<p>An alias of <a href=""assert.html#assertokvalue-message""><code>assert.ok()</code></a>.</p>",2,Others,
2,assert,,deepEqual,assert.deepEqual,"<p><strong>Strict assertion mode</strong></p>
<p>An alias of <a href=""assert.html#assertdeepstrictequalactual-expected-message""><code>assert.deepStrictEqual()</code></a>.</p>
<p><strong>Legacy assertion mode</strong></p>
<blockquote>
<p>Stability: 3 - Legacy: Use <a href=""assert.html#assertdeepstrictequalactual-expected-message""><code>assert.deepStrictEqual()</code></a> instead.</p>
</blockquote>
<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters. Consider
using <a href=""assert.html#assertdeepstrictequalactual-expected-message""><code>assert.deepStrictEqual()</code></a> instead. <a href=""assert.html#assertdeepequalactual-expected-message""><code>assert.deepEqual()</code></a> can have
surprising results.</p>
<p><em>Deep equality</em> means that the enumerable ""own"" properties of child objects
are also recursively evaluated by the following rules.</p>",3,Others,
3,assert,,deepStrictEqual,assert.deepStrictEqual,"<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.
""Deep"" equality means that the enumerable ""own"" properties of child objects
are recursively evaluated also by the following rules.</p>",3,Others,
4,assert,,doesNotMatch,assert.doesNotMatch,"<p>Expects the <code>string</code> input not to match the regular expression.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.doesNotMatch('I will fail', /fail/);
// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...

assert.doesNotMatch(123, /pass/);
// AssertionError [ERR_ASSERTION]: The ""string"" argument must be of type string.

assert.doesNotMatch('I will pass', /different/);
// OK
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.doesNotMatch('I will fail', /fail/);
// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...

assert.doesNotMatch(123, /pass/);
// AssertionError [ERR_ASSERTION]: The ""string"" argument must be of type string.

assert.doesNotMatch('I will pass', /different/);
// OK
</code></pre>
<p>If the values do match, or if the <code>string</code> argument is of another type than
<code>string</code>, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a <code>message</code> property set equal
to the value of the <code>message</code> parameter. If the <code>message</code> parameter is
undefined, a default error message is assigned. If the <code>message</code> parameter is an
instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown instead of the
<a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>",3,Others,
5,assert,,doesNotReject,assert.doesNotReject,"<p>Awaits the <code>asyncFn</code> promise or, if <code>asyncFn</code> is a function, immediately
calls the function and awaits the returned promise to complete. It will then
check that the promise is not rejected.</p>
<p>If <code>asyncFn</code> is a function and it throws an error synchronously,
<code>assert.doesNotReject()</code> will return a rejected <code>Promise</code> with that error. If
the function does not return a promise, <code>assert.doesNotReject()</code> will return a
rejected <code>Promise</code> with an <a href=""errors.html#err_invalid_return_value""><code>ERR_INVALID_RETURN_VALUE</code></a> error. In both cases
the error handler is skipped.</p>
<p>Using <code>assert.doesNotReject()</code> is actually not useful because there is little
benefit in catching a rejection and then rejecting it again. Instead, consider
adding a comment next to the specific code path that should not reject and keep
error messages as expressive as possible.</p>
<p>If specified, <code>error</code> can be a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes""><code>Class</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions""><code>RegExp</code></a>, or a validation
function. See <a href=""assert.html#assertthrowsfn-error-message""><code>assert.throws()</code></a> for more details.</p>
<p>Besides the async nature to await the completion behaves identically to
<a href=""assert.html#assertdoesnotthrowfn-error-message""><code>assert.doesNotThrow()</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

await assert.doesNotReject(
  async () => {
    throw new TypeError('Wrong value');
  },
  SyntaxError,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

(async () => {
  await assert.doesNotReject(
    async () => {
      throw new TypeError('Wrong value');
    },
    SyntaxError,
  );
})();
</code></pre>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))
  .then(() => {
    // ...
  });
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))
  .then(() => {
    // ...
  });
</code></pre>",3,Others,
6,assert,,doesNotThrow,assert.doesNotThrow,"<p>Asserts that the function <code>fn</code> does not throw an error.</p>
<p>Using <code>assert.doesNotThrow()</code> is actually not useful because there
is no benefit in catching an error and then rethrowing it. Instead, consider
adding a comment next to the specific code path that should not throw and keep
error messages as expressive as possible.</p>
<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>fn</code>
function.</p>
<p>If an error is thrown and it is the same type as that specified by the <code>error</code>
parameter, then an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown. If the error is of a
different type, or if the <code>error</code> parameter is undefined, the error is
propagated back to the caller.</p>
<p>If specified, <code>error</code> can be a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes""><code>Class</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions""><code>RegExp</code></a>, or a validation
function. See <a href=""assert.html#assertthrowsfn-error-message""><code>assert.throws()</code></a> for more details.</p>
<p>The following, for instance, will throw the <a href=""errors.html#class-typeerror""><code>TypeError</code></a> because there is no
matching error type in the assertion:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  SyntaxError,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  SyntaxError,
);
</code></pre>
<p>However, the following will result in an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> with the message
'Got unwanted exception...':</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  TypeError,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  TypeError,
);
</code></pre>
<p>If an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown and a value is provided for the <code>message</code>
parameter, the value of <code>message</code> will be appended to the <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>
message:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  /Wrong value/,
  'Whoops',
);
// Throws: AssertionError: Got unwanted exception: Whoops
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  /Wrong value/,
  'Whoops',
);
// Throws: AssertionError: Got unwanted exception: Whoops
</code></pre>",3,Others,
7,assert,,equal,assert.equal,"<p><strong>Strict assertion mode</strong></p>
<p>An alias of <a href=""assert.html#assertstrictequalactual-expected-message""><code>assert.strictEqual()</code></a>.</p>
<p><strong>Legacy assertion mode</strong></p>
<blockquote>
<p>Stability: 3 - Legacy: Use <a href=""assert.html#assertstrictequalactual-expected-message""><code>assert.strictEqual()</code></a> instead.</p>
</blockquote>
<p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters
using the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality""><code>==</code> operator</a>. <code>NaN</code> is specially handled
and treated as being identical if both sides are <code>NaN</code>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

assert.equal(1, 1);
// OK, 1 == 1
assert.equal(1, '1');
// OK, 1 == '1'
assert.equal(NaN, NaN);
// OK

assert.equal(1, 2);
// AssertionError: 1 == 2
assert.equal({ a: { b: 1 } }, { a: { b: 1 } });
// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

assert.equal(1, 1);
// OK, 1 == 1
assert.equal(1, '1');
// OK, 1 == '1'
assert.equal(NaN, NaN);
// OK

assert.equal(1, 2);
// AssertionError: 1 == 2
assert.equal({ a: { b: 1 } }, { a: { b: 1 } });
// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }
</code></pre>
<p>If the values are not equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned. If the <code>message</code>
parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown instead of the
<code>AssertionError</code>.</p>",3,Others,
8,assert,,fail,assert.fail,"<p>Throws an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> with the provided error message or a default
error message. If the <code>message</code> parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then
it will be thrown instead of the <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.fail();
// AssertionError [ERR_ASSERTION]: Failed

assert.fail('boom');
// AssertionError [ERR_ASSERTION]: boom

assert.fail(new TypeError('need array'));
// TypeError: need array
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.fail();
// AssertionError [ERR_ASSERTION]: Failed

assert.fail('boom');
// AssertionError [ERR_ASSERTION]: boom

assert.fail(new TypeError('need array'));
// TypeError: need array
</code></pre>
<p>Using <code>assert.fail()</code> with more than two arguments is possible but deprecated.
See below for further details.</p>",1,Others,
9,assert,,fail,assert.fail,"<p>If <code>message</code> is falsy, the error message is set as the values of <code>actual</code> and
<code>expected</code> separated by the provided <code>operator</code>. If just the two <code>actual</code> and
<code>expected</code> arguments are provided, <code>operator</code> will default to <code>'!='</code>. If
<code>message</code> is provided as third argument it will be used as the error message and
the other arguments will be stored as properties on the thrown object. If
<code>stackStartFn</code> is provided, all stack frames above that function will be
removed from stacktrace (see <a href=""errors.html#errorcapturestacktracetargetobject-constructoropt""><code>Error.captureStackTrace</code></a>). If no arguments are
given, the default message <code>Failed</code> will be used.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.fail('a', 'b');
// AssertionError [ERR_ASSERTION]: 'a' != 'b'

assert.fail(1, 2, undefined, '>');
// AssertionError [ERR_ASSERTION]: 1 > 2

assert.fail(1, 2, 'fail');
// AssertionError [ERR_ASSERTION]: fail

assert.fail(1, 2, 'whoops', '>');
// AssertionError [ERR_ASSERTION]: whoops

assert.fail(1, 2, new TypeError('need array'));
// TypeError: need array
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.fail('a', 'b');
// AssertionError [ERR_ASSERTION]: 'a' != 'b'

assert.fail(1, 2, undefined, '>');
// AssertionError [ERR_ASSERTION]: 1 > 2

assert.fail(1, 2, 'fail');
// AssertionError [ERR_ASSERTION]: fail

assert.fail(1, 2, 'whoops', '>');
// AssertionError [ERR_ASSERTION]: whoops

assert.fail(1, 2, new TypeError('need array'));
// TypeError: need array
</code></pre>
<p>In the last three cases <code>actual</code>, <code>expected</code>, and <code>operator</code> have no
influence on the error message.</p>
<p>Example use of <code>stackStartFn</code> for truncating the exception's stacktrace:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

function suppressFrame() {
  assert.fail('a', 'b', undefined, '!==', suppressFrame);
}
suppressFrame();
// AssertionError [ERR_ASSERTION]: 'a' !== 'b'
//     at repl:1:1
//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)
//     ...
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

function suppressFrame() {
  assert.fail('a', 'b', undefined, '!==', suppressFrame);
}
suppressFrame();
// AssertionError [ERR_ASSERTION]: 'a' !== 'b'
//     at repl:1:1
//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)
//     ...
</code></pre>",5,Others,
10,assert,,ifError,assert.ifError,"<p>Throws <code>value</code> if <code>value</code> is not <code>undefined</code> or <code>null</code>. This is useful when
testing the <code>error</code> argument in callbacks. The stack trace contains all frames
from the error passed to <code>ifError()</code> including the potential new frames for
<code>ifError()</code> itself.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.ifError(null);
// OK
assert.ifError(0);
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0
assert.ifError('error');
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'
assert.ifError(new Error());
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error

// Create some random error frames.
let err;
(function errorFrame() {
  err = new Error('test error');
})();

(function ifErrorFrame() {
  assert.ifError(err);
})();
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error
//     at ifErrorFrame
//     at errorFrame
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.ifError(null);
// OK
assert.ifError(0);
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0
assert.ifError('error');
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'
assert.ifError(new Error());
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error

// Create some random error frames.
let err;
(function errorFrame() {
  err = new Error('test error');
})();

(function ifErrorFrame() {
  assert.ifError(err);
})();
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error
//     at ifErrorFrame
//     at errorFrame
</code></pre>",1,Others,
11,assert,,match,assert.match,"<p>Expects the <code>string</code> input to match the regular expression.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.match('I will fail', /pass/);
// AssertionError [ERR_ASSERTION]: The input did not match the regular ...

assert.match(123, /pass/);
// AssertionError [ERR_ASSERTION]: The ""string"" argument must be of type string.

assert.match('I will pass', /pass/);
// OK
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.match('I will fail', /pass/);
// AssertionError [ERR_ASSERTION]: The input did not match the regular ...

assert.match(123, /pass/);
// AssertionError [ERR_ASSERTION]: The ""string"" argument must be of type string.

assert.match('I will pass', /pass/);
// OK
</code></pre>
<p>If the values do not match, or if the <code>string</code> argument is of another type than
<code>string</code>, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a <code>message</code> property set equal
to the value of the <code>message</code> parameter. If the <code>message</code> parameter is
undefined, a default error message is assigned. If the <code>message</code> parameter is an
instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown instead of the
<a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>",3,Others,
12,assert,,notDeepEqual,assert.notDeepEqual,"<p><strong>Strict assertion mode</strong></p>
<p>An alias of <a href=""assert.html#assertnotdeepstrictequalactual-expected-message""><code>assert.notDeepStrictEqual()</code></a>.</p>
<p><strong>Legacy assertion mode</strong></p>
<blockquote>
<p>Stability: 3 - Legacy: Use <a href=""assert.html#assertnotdeepstrictequalactual-expected-message""><code>assert.notDeepStrictEqual()</code></a> instead.</p>
</blockquote>
<p>Tests for any deep inequality. Opposite of <a href=""assert.html#assertdeepequalactual-expected-message""><code>assert.deepEqual()</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.notDeepEqual(obj1, obj1);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj2);
// OK

assert.notDeepEqual(obj1, obj3);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj4);
// OK
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.notDeepEqual(obj1, obj1);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj2);
// OK

assert.notDeepEqual(obj1, obj3);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj4);
// OK
</code></pre>
<p>If the values are deeply equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a
<code>message</code> property set equal to the value of the <code>message</code> parameter. If the
<code>message</code> parameter is undefined, a default error message is assigned. If the
<code>message</code> parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown
instead of the <code>AssertionError</code>.</p>",3,Others,
13,assert,,notDeepStrictEqual,assert.notDeepStrictEqual,"<p>Tests for deep strict inequality. Opposite of <a href=""assert.html#assertdeepstrictequalactual-expected-message""><code>assert.deepStrictEqual()</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.notDeepStrictEqual({ a: 1 }, { a: '1' });
// OK
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.notDeepStrictEqual({ a: 1 }, { a: '1' });
// OK
</code></pre>
<p>If the values are deeply and strictly equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown
with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If
the <code>message</code> parameter is undefined, a default error message is assigned. If
the <code>message</code> parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown
instead of the <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>",3,Others,
14,assert,,notEqual,assert.notEqual,"<p><strong>Strict assertion mode</strong></p>
<p>An alias of <a href=""assert.html#assertnotstrictequalactual-expected-message""><code>assert.notStrictEqual()</code></a>.</p>
<p><strong>Legacy assertion mode</strong></p>
<blockquote>
<p>Stability: 3 - Legacy: Use <a href=""assert.html#assertnotstrictequalactual-expected-message""><code>assert.notStrictEqual()</code></a> instead.</p>
</blockquote>
<p>Tests shallow, coercive inequality with the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality""><code>!=</code> operator</a>. <code>NaN</code> is
specially handled and treated as being identical if both sides are <code>NaN</code>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

assert.notEqual(1, 2);
// OK

assert.notEqual(1, 1);
// AssertionError: 1 != 1

assert.notEqual(1, '1');
// AssertionError: 1 != '1'
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

assert.notEqual(1, 2);
// OK

assert.notEqual(1, 1);
// AssertionError: 1 != 1

assert.notEqual(1, '1');
// AssertionError: 1 != '1'
</code></pre>
<p>If the values are equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is undefined, a default error message is assigned. If the <code>message</code>
parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown instead of the
<code>AssertionError</code>.</p>",3,Others,
15,assert,,notStrictEqual,assert.notStrictEqual,"<p>Tests strict inequality between the <code>actual</code> and <code>expected</code> parameters as
determined by <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is""><code>Object.is()</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.notStrictEqual(1, 2);
// OK

assert.notStrictEqual(1, 1);
// AssertionError [ERR_ASSERTION]: Expected ""actual"" to be strictly unequal to:
//
// 1

assert.notStrictEqual(1, '1');
// OK
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.notStrictEqual(1, 2);
// OK

assert.notStrictEqual(1, 1);
// AssertionError [ERR_ASSERTION]: Expected ""actual"" to be strictly unequal to:
//
// 1

assert.notStrictEqual(1, '1');
// OK
</code></pre>
<p>If the values are strictly equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a
<code>message</code> property set equal to the value of the <code>message</code> parameter. If the
<code>message</code> parameter is undefined, a default error message is assigned. If the
<code>message</code> parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown
instead of the <code>AssertionError</code>.</p>",3,Others,
16,assert,,ok,assert.ok,"<p>Tests if <code>value</code> is truthy. It is equivalent to
<code>assert.equal(!!value, true, message)</code>.</p>
<p>If <code>value</code> is not truthy, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a <code>message</code>
property set equal to the value of the <code>message</code> parameter. If the <code>message</code>
parameter is <code>undefined</code>, a default error message is assigned. If the <code>message</code>
parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown instead of the
<code>AssertionError</code>.
If no arguments are passed in at all <code>message</code> will be set to the string:
<code>'No value argument passed to `assert.ok()`'</code>.</p>
<p>Be aware that in the <code>repl</code> the error message will be different to the one
thrown in a file! See below for further details.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.ok(true);
// OK
assert.ok(1);
// OK

assert.ok();
// AssertionError: No value argument passed to `assert.ok()`

assert.ok(false, 'it\'s false');
// AssertionError: it's false

// In the repl:
assert.ok(typeof 123 === 'string');
// AssertionError: false == true

// In a file (e.g. test.js):
assert.ok(typeof 123 === 'string');
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(typeof 123 === 'string')

assert.ok(false);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(false)

assert.ok(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(0)
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.ok(true);
// OK
assert.ok(1);
// OK

assert.ok();
// AssertionError: No value argument passed to `assert.ok()`

assert.ok(false, 'it\'s false');
// AssertionError: it's false

// In the repl:
assert.ok(typeof 123 === 'string');
// AssertionError: false == true

// In a file (e.g. test.js):
assert.ok(typeof 123 === 'string');
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(typeof 123 === 'string')

assert.ok(false);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(false)

assert.ok(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(0)
</code></pre>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

// Using `assert()` works the same:
assert(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert(0)
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

// Using `assert()` works the same:
assert(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert(0)
</code></pre>",2,Others,
17,assert,,rejects,assert.rejects,"<p>Awaits the <code>asyncFn</code> promise or, if <code>asyncFn</code> is a function, immediately
calls the function and awaits the returned promise to complete. It will then
check that the promise is rejected.</p>
<p>If <code>asyncFn</code> is a function and it throws an error synchronously,
<code>assert.rejects()</code> will return a rejected <code>Promise</code> with that error. If the
function does not return a promise, <code>assert.rejects()</code> will return a rejected
<code>Promise</code> with an <a href=""errors.html#err_invalid_return_value""><code>ERR_INVALID_RETURN_VALUE</code></a> error. In both cases the error
handler is skipped.</p>
<p>Besides the async nature to await the completion behaves identically to
<a href=""assert.html#assertthrowsfn-error-message""><code>assert.throws()</code></a>.</p>
<p>If specified, <code>error</code> can be a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes""><code>Class</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions""><code>RegExp</code></a>, a validation function,
an object where each property will be tested for, or an instance of error where
each property will be tested for including the non-enumerable <code>message</code> and
<code>name</code> properties.</p>
<p>If specified, <code>message</code> will be the message provided by the <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>
if the <code>asyncFn</code> fails to reject.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
  },
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

(async () => {
  await assert.rejects(
    async () => {
      throw new TypeError('Wrong value');
    },
    {
      name: 'TypeError',
      message: 'Wrong value',
    },
  );
})();
</code></pre>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  (err) => {
    assert.strictEqual(err.name, 'TypeError');
    assert.strictEqual(err.message, 'Wrong value');
    return true;
  },
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

(async () => {
  await assert.rejects(
    async () => {
      throw new TypeError('Wrong value');
    },
    (err) => {
      assert.strictEqual(err.name, 'TypeError');
      assert.strictEqual(err.message, 'Wrong value');
      return true;
    },
  );
})();
</code></pre>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.rejects(
  Promise.reject(new Error('Wrong value')),
  Error,
).then(() => {
  // ...
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.rejects(
  Promise.reject(new Error('Wrong value')),
  Error,
).then(() => {
  // ...
});
</code></pre>
<p><code>error</code> cannot be a string. If a string is provided as the second
argument, then <code>error</code> is assumed to be omitted and the string will be used for
<code>message</code> instead. This can lead to easy-to-miss mistakes. Please read the
example in <a href=""assert.html#assertthrowsfn-error-message""><code>assert.throws()</code></a> carefully if using a string as the second
argument gets considered.</p>",3,Others,
18,assert,,strictEqual,assert.strictEqual,"<p>Tests strict equality between the <code>actual</code> and <code>expected</code> parameters as
determined by <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is""><code>Object.is()</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.strictEqual(1, 2);
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
//
// 1 !== 2

assert.strictEqual(1, 1);
// OK

assert.strictEqual('Hello foobar', 'Hello World!');
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
// + actual - expected
//
// + 'Hello foobar'
// - 'Hello World!'
//          ^

const apples = 1;
const oranges = 2;
assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);
// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2

assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));
// TypeError: Inputs are not identical
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.strictEqual(1, 2);
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
//
// 1 !== 2

assert.strictEqual(1, 1);
// OK

assert.strictEqual('Hello foobar', 'Hello World!');
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
// + actual - expected
//
// + 'Hello foobar'
// - 'Hello World!'
//          ^

const apples = 1;
const oranges = 2;
assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);
// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2

assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));
// TypeError: Inputs are not identical
</code></pre>
<p>If the values are not strictly equal, an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a> is thrown with a
<code>message</code> property set equal to the value of the <code>message</code> parameter. If the
<code>message</code> parameter is undefined, a default error message is assigned. If the
<code>message</code> parameter is an instance of an <a href=""errors.html#class-error""><code>Error</code></a> then it will be thrown
instead of the <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>",3,Others,
19,assert,,throws,assert.throws,"<p>Expects the function <code>fn</code> to throw an error.</p>
<p>If specified, <code>error</code> can be a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes""><code>Class</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions""><code>RegExp</code></a>, a validation function,
a validation object where each property will be tested for strict deep equality,
or an instance of error where each property will be tested for strict deep
equality including the non-enumerable <code>message</code> and <code>name</code> properties. When
using an object, it is also possible to use a regular expression, when
validating against a string property. See below for examples.</p>
<p>If specified, <code>message</code> will be appended to the message provided by the
<code>AssertionError</code> if the <code>fn</code> call fails to throw or in case the error validation
fails.</p>
<p>Custom validation object/error instance:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

const err = new TypeError('Wrong value');
err.code = 404;
err.foo = 'bar';
err.info = {
  nested: true,
  baz: 'text',
};
err.reg = /abc/i;

assert.throws(
  () => {
    throw err;
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
    info: {
      nested: true,
      baz: 'text',
    },
    // Only properties on the validation object will be tested for.
    // Using nested objects requires all properties to be present. Otherwise
    // the validation is going to fail.
  },
);

// Using regular expressions to validate error properties:
assert.throws(
  () => {
    throw err;
  },
  {
    // The `name` and `message` properties are strings and using regular
    // expressions on those will match against the string. If they fail, an
    // error is thrown.
    name: /^TypeError$/,
    message: /Wrong/,
    foo: 'bar',
    info: {
      nested: true,
      // It is not possible to use regular expressions for nested properties!
      baz: 'text',
    },
    // The `reg` property contains a regular expression and only if the
    // validation object contains an identical regular expression, it is going
    // to pass.
    reg: /abc/i,
  },
);

// Fails due to the different `message` and `name` properties:
assert.throws(
  () => {
    const otherErr = new Error('Not found');
    // Copy all enumerable properties from `err` to `otherErr`.
    for (const [key, value] of Object.entries(err)) {
      otherErr[key] = value;
    }
    throw otherErr;
  },
  // The error's `message` and `name` properties will also be checked when using
  // an error as validation object.
  err,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

const err = new TypeError('Wrong value');
err.code = 404;
err.foo = 'bar';
err.info = {
  nested: true,
  baz: 'text',
};
err.reg = /abc/i;

assert.throws(
  () => {
    throw err;
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
    info: {
      nested: true,
      baz: 'text',
    },
    // Only properties on the validation object will be tested for.
    // Using nested objects requires all properties to be present. Otherwise
    // the validation is going to fail.
  },
);

// Using regular expressions to validate error properties:
assert.throws(
  () => {
    throw err;
  },
  {
    // The `name` and `message` properties are strings and using regular
    // expressions on those will match against the string. If they fail, an
    // error is thrown.
    name: /^TypeError$/,
    message: /Wrong/,
    foo: 'bar',
    info: {
      nested: true,
      // It is not possible to use regular expressions for nested properties!
      baz: 'text',
    },
    // The `reg` property contains a regular expression and only if the
    // validation object contains an identical regular expression, it is going
    // to pass.
    reg: /abc/i,
  },
);

// Fails due to the different `message` and `name` properties:
assert.throws(
  () => {
    const otherErr = new Error('Not found');
    // Copy all enumerable properties from `err` to `otherErr`.
    for (const [key, value] of Object.entries(err)) {
      otherErr[key] = value;
    }
    throw otherErr;
  },
  // The error's `message` and `name` properties will also be checked when using
  // an error as validation object.
  err,
);
</code></pre>
<p>Validate instanceof using constructor:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  Error,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  Error,
);
</code></pre>
<p>Validate error message using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions""><code>RegExp</code></a>:</p>
<p>Using a regular expression runs <code>.toString</code> on the error object, and will
therefore also include the error name.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  /^Error: Wrong value$/,
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  /^Error: Wrong value$/,
);
</code></pre>
<p>Custom error validation:</p>
<p>The function must return <code>true</code> to indicate all internal validations passed.
It will otherwise fail with an <a href=""assert.html#class-assertassertionerror""><code>AssertionError</code></a>.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  (err) => {
    assert(err instanceof Error);
    assert(/value/.test(err));
    // Avoid returning anything from validation functions besides `true`.
    // Otherwise, it's not clear what part of the validation failed. Instead,
    // throw an error about the specific validation that failed (as done in this
    // example) and add as much helpful debugging information to that error as
    // possible.
    return true;
  },
  'unexpected error',
);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  (err) => {
    assert(err instanceof Error);
    assert(/value/.test(err));
    // Avoid returning anything from validation functions besides `true`.
    // Otherwise, it's not clear what part of the validation failed. Instead,
    // throw an error about the specific validation that failed (as done in this
    // example) and add as much helpful debugging information to that error as
    // possible.
    return true;
  },
  'unexpected error',
);
</code></pre>
<p><code>error</code> cannot be a string. If a string is provided as the second
argument, then <code>error</code> is assumed to be omitted and the string will be used for
<code>message</code> instead. This can lead to easy-to-miss mistakes. Using the same
message as the thrown error message is going to result in an
<code>ERR_AMBIGUOUS_ARGUMENT</code> error. Please read the example below carefully if using
a string as the second argument gets considered:</p>
<pre><code class=""language-mjs"">import assert from 'node:assert/strict';

function throwingFirst() {
  throw new Error('First');
}

function throwingSecond() {
  throw new Error('Second');
}

function notThrowing() {}

// The second argument is a string and the input function threw an Error.
// The first case will not throw as it does not match for the error message
// thrown by the input function!
assert.throws(throwingFirst, 'Second');
// In the next example the message has no benefit over the message from the
// error and since it is not clear if the user intended to actually match
// against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.
assert.throws(throwingSecond, 'Second');
// TypeError [ERR_AMBIGUOUS_ARGUMENT]

// The string is only used (as message) in case the function does not throw:
assert.throws(notThrowing, 'Second');
// AssertionError [ERR_ASSERTION]: Missing expected exception: Second

// If it was intended to match for the error message do this instead:
// It does not throw because the error messages match.
assert.throws(throwingSecond, /Second$/);

// If the error message does not match, an AssertionError is thrown.
assert.throws(throwingFirst, /Second$/);
// AssertionError [ERR_ASSERTION]
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert/strict');

function throwingFirst() {
  throw new Error('First');
}

function throwingSecond() {
  throw new Error('Second');
}

function notThrowing() {}

// The second argument is a string and the input function threw an Error.
// The first case will not throw as it does not match for the error message
// thrown by the input function!
assert.throws(throwingFirst, 'Second');
// In the next example the message has no benefit over the message from the
// error and since it is not clear if the user intended to actually match
// against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.
assert.throws(throwingSecond, 'Second');
// TypeError [ERR_AMBIGUOUS_ARGUMENT]

// The string is only used (as message) in case the function does not throw:
assert.throws(notThrowing, 'Second');
// AssertionError [ERR_ASSERTION]: Missing expected exception: Second

// If it was intended to match for the error message do this instead:
// It does not throw because the error messages match.
assert.throws(throwingSecond, /Second$/);

// If the error message does not match, an AssertionError is thrown.
assert.throws(throwingFirst, /Second$/);
// AssertionError [ERR_ASSERTION]
</code></pre>
<p>Due to the confusing error-prone notation, avoid a string as the second
argument.</p>",3,Others,
20,tracker,,calls,tracker.calls,"<p>The wrapper function is expected to be called exactly <code>exact</code> times. If the
function has not been called exactly <code>exact</code> times when
<a href=""assert.html#trackerverify""><code>tracker.verify()</code></a> is called, then <a href=""assert.html#trackerverify""><code>tracker.verify()</code></a> will throw an
error.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func);
</code></pre>",2,Others,
21,tracker,,getCalls,tracker.getCalls,"<pre><code class=""language-mjs"">import assert from 'node:assert';

const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);
callsfunc(1, 2, 3);

assert.deepStrictEqual(tracker.getCalls(callsfunc),
                       [{ thisArg: undefined, arguments: [1, 2, 3] }]);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);
callsfunc(1, 2, 3);

assert.deepStrictEqual(tracker.getCalls(callsfunc),
                       [{ thisArg: undefined, arguments: [1, 2, 3] }]);
</code></pre>",2,Others,
22,tracker,,report,tracker.report,"<p>The arrays contains information about the expected and actual number of calls of
the functions that have not been called the expected number of times.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

// Returns an array containing information on callsfunc()
console.log(tracker.report());
// [
//  {
//    message: 'Expected the func function to be executed 2 time(s) but was
//    executed 0 time(s).',
//    actual: 0,
//    expected: 2,
//    operator: 'func',
//    stack: stack trace
//  }
// ]
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

// Returns an array containing information on callsfunc()
console.log(tracker.report());
// [
//  {
//    message: 'Expected the func function to be executed 2 time(s) but was
//    executed 0 time(s).',
//    actual: 0,
//    expected: 2,
//    operator: 'func',
//    stack: stack trace
//  }
// ]
</code></pre>",1,Others,
23,tracker,,reset,tracker.reset,"<p>Reset calls of the call tracker.
If a tracked function is passed as an argument, the calls will be reset for it.
If no arguments are passed, all tracked functions will be reset</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);

callsfunc();
// Tracker was called once
assert.strictEqual(tracker.getCalls(callsfunc).length, 1);

tracker.reset(callsfunc);
assert.strictEqual(tracker.getCalls(callsfunc).length, 0);
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);

callsfunc();
// Tracker was called once
assert.strictEqual(tracker.getCalls(callsfunc).length, 1);

tracker.reset(callsfunc);
assert.strictEqual(tracker.getCalls(callsfunc).length, 0);
</code></pre>",1,Others,
24,tracker,,verify,tracker.verify,"<p>Iterates through the list of functions passed to
<a href=""assert.html#trackercallsfn-exact""><code>tracker.calls()</code></a> and will throw an error for functions that
have not been called the expected number of times.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

callsfunc();

// Will throw an error since callsfunc() was only called once.
tracker.verify();
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

callsfunc();

// Will throw an error since callsfunc() was only called once.
tracker.verify();
</code></pre>",0,Others,
25,asyncLocalStorage,,disable,asyncLocalStorage.disable,"<p>Disables the instance of <code>AsyncLocalStorage</code>. All subsequent calls
to <code>asyncLocalStorage.getStore()</code> will return <code>undefined</code> until
<code>asyncLocalStorage.run()</code> or <code>asyncLocalStorage.enterWith()</code> is called again.</p>
<p>When calling <code>asyncLocalStorage.disable()</code>, all current contexts linked to the
instance will be exited.</p>
<p>Calling <code>asyncLocalStorage.disable()</code> is required before the
<code>asyncLocalStorage</code> can be garbage collected. This does not apply to stores
provided by the <code>asyncLocalStorage</code>, as those objects are garbage collected
along with the corresponding async resources.</p>
<p>Use this method when the <code>asyncLocalStorage</code> is not in use anymore
in the current process.</p>",0,Others,
26,asyncLocalStorage,,getStore,asyncLocalStorage.getStore,"<p>Returns the current store.
If called outside of an asynchronous context initialized by
calling <code>asyncLocalStorage.run()</code> or <code>asyncLocalStorage.enterWith()</code>, it
returns <code>undefined</code>.</p>",0,Others,
27,asyncLocalStorage,,enterWith,asyncLocalStorage.enterWith,"<p>Transitions into the context for the remainder of the current
synchronous execution and then persists the store through any following
asynchronous calls.</p>
<p>Example:</p>
<pre><code class=""language-js"">const store = { id: 1 };
// Replaces previous store with the given store object
asyncLocalStorage.enterWith(store);
asyncLocalStorage.getStore(); // Returns the store object
someAsyncOperation(() => {
  asyncLocalStorage.getStore(); // Returns the same object
});
</code></pre>
<p>This transition will continue for the <em>entire</em> synchronous execution.
This means that if, for example, the context is entered within an event
handler subsequent event handlers will also run within that context unless
specifically bound to another context with an <code>AsyncResource</code>. That is why
<code>run()</code> should be preferred over <code>enterWith()</code> unless there are strong reasons
to use the latter method.</p>
<pre><code class=""language-js"">const store = { id: 1 };

emitter.on('my-event', () => {
  asyncLocalStorage.enterWith(store);
});
emitter.on('my-event', () => {
  asyncLocalStorage.getStore(); // Returns the same object
});

asyncLocalStorage.getStore(); // Returns undefined
emitter.emit('my-event');
asyncLocalStorage.getStore(); // Returns the same object
</code></pre>",1,Others,
28,asyncLocalStorage,,run,asyncLocalStorage.run,"<p>Runs a function synchronously within a context and returns its
return value. The store is not accessible outside of the callback function.
The store is accessible to any asynchronous operations created within the
callback.</p>
<p>The optional <code>args</code> are passed to the callback function.</p>
<p>If the callback function throws an error, the error is thrown by <code>run()</code> too.
The stacktrace is not impacted by this call and the context is exited.</p>
<p>Example:</p>
<pre><code class=""language-js"">const store = { id: 2 };
try {
  asyncLocalStorage.run(store, () => {
    asyncLocalStorage.getStore(); // Returns the store object
    setTimeout(() => {
      asyncLocalStorage.getStore(); // Returns the store object
    }, 200);
    throw new Error();
  });
} catch (e) {
  asyncLocalStorage.getStore(); // Returns undefined
  // The error will be caught here
}
</code></pre>",3,Others,
29,asyncLocalStorage,,exit,asyncLocalStorage.exit,"<p>Runs a function synchronously outside of a context and returns its
return value. The store is not accessible within the callback function or
the asynchronous operations created within the callback. Any <code>getStore()</code>
call done within the callback function will always return <code>undefined</code>.</p>
<p>The optional <code>args</code> are passed to the callback function.</p>
<p>If the callback function throws an error, the error is thrown by <code>exit()</code> too.
The stacktrace is not impacted by this call and the context is re-entered.</p>
<p>Example:</p>
<pre><code class=""language-js"">// Within a call to run
try {
  asyncLocalStorage.getStore(); // Returns the store object or value
  asyncLocalStorage.exit(() => {
    asyncLocalStorage.getStore(); // Returns undefined
    throw new Error();
  });
} catch (e) {
  asyncLocalStorage.getStore(); // Returns the same object or value
  // The error will be caught here
}
</code></pre>",2,Others,
30,asyncResource,,bind,asyncResource.bind,"<p>Binds the given function to execute to this <code>AsyncResource</code>'s scope.</p>",2,Others,
31,asyncResource,,runInAsyncScope,asyncResource.runInAsyncScope,"<p>Call the provided function with the provided arguments in the execution context
of the async resource. This will establish the context, trigger the AsyncHooks
before callbacks, call the function, trigger the AsyncHooks after callbacks, and
then restore the original execution context.</p>",3,Others,
32,asyncResource,,emitDestroy,asyncResource.emitDestroy,"<p>Call all <code>destroy</code> hooks. This should only ever be called once. An error will
be thrown if it is called more than once. This <strong>must</strong> be manually called. If
the resource is left to be collected by the GC then the <code>destroy</code> hooks will
never be called.</p>",0,Others,
33,asyncResource,,asyncId,asyncResource.asyncId,,0,Others,
34,asyncResource,,triggerAsyncId,asyncResource.triggerAsyncId,"<p><a id=""async-resource-worker-pool""></a></p>",0,Others,
35,async_hooks,,createHook,async_hooks.createHook,"<p>Registers functions to be called for different lifetime events of each async
operation.</p>
<p>The callbacks <code>init()</code>/<code>before()</code>/<code>after()</code>/<code>destroy()</code> are called for the
respective asynchronous event during a resource's lifetime.</p>
<p>All callbacks are optional. For example, if only resource cleanup needs to
be tracked, then only the <code>destroy</code> callback needs to be passed. The
specifics of all functions that can be passed to <code>callbacks</code> is in the
<a href=""async_hooks.html#hook-callbacks"">Hook Callbacks</a> section.</p>
<pre><code class=""language-mjs"">import { createHook } from 'node:async_hooks';

const asyncHook = createHook({
  init(asyncId, type, triggerAsyncId, resource) { },
  destroy(asyncId) { },
});
</code></pre>
<pre><code class=""language-cjs"">const async_hooks = require('node:async_hooks');

const asyncHook = async_hooks.createHook({
  init(asyncId, type, triggerAsyncId, resource) { },
  destroy(asyncId) { },
});
</code></pre>
<p>The callbacks will be inherited via the prototype chain:</p>
<pre><code class=""language-js"">class MyAsyncCallbacks {
  init(asyncId, type, triggerAsyncId, resource) { }
  destroy(asyncId) {}
}

class MyAddedCallbacks extends MyAsyncCallbacks {
  before(asyncId) { }
  after(asyncId) { }
}

const asyncHook = async_hooks.createHook(new MyAddedCallbacks());
</code></pre>
<p>Because promises are asynchronous resources whose lifecycle is tracked
via the async hooks mechanism, the <code>init()</code>, <code>before()</code>, <code>after()</code>, and
<code>destroy()</code> callbacks <em>must not</em> be async functions that return promises.</p>",1,Others,
36,asyncHook,,enable,asyncHook.enable,"<p>Enable the callbacks for a given <code>AsyncHook</code> instance. If no callbacks are
provided, enabling is a no-op.</p>
<p>The <code>AsyncHook</code> instance is disabled by default. If the <code>AsyncHook</code> instance
should be enabled immediately after creation, the following pattern can be used.</p>
<pre><code class=""language-mjs"">import { createHook } from 'node:async_hooks';

const hook = createHook(callbacks).enable();
</code></pre>
<pre><code class=""language-cjs"">const async_hooks = require('node:async_hooks');

const hook = async_hooks.createHook(callbacks).enable();
</code></pre>",0,Others,
37,asyncHook,,disable,asyncHook.disable,"<p>Disable the callbacks for a given <code>AsyncHook</code> instance from the global pool of
<code>AsyncHook</code> callbacks to be executed. Once a hook has been disabled it will not
be called again until enabled.</p>
<p>For API consistency <code>disable()</code> also returns the <code>AsyncHook</code> instance.</p>",0,Others,
38,async_hooks,,executionAsyncResource,async_hooks.executionAsyncResource,"<p>Resource objects returned by <code>executionAsyncResource()</code> are most often internal
Node.js handle objects with undocumented APIs. Using any functions or properties
on the object is likely to crash your application and should be avoided.</p>
<p>Using <code>executionAsyncResource()</code> in the top-level execution context will
return an empty object as there is no handle or request object to use,
but having an object representing the top-level can be helpful.</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs';
import { executionAsyncId, executionAsyncResource } from 'node:async_hooks';

console.log(executionAsyncId(), executionAsyncResource());  // 1 {}
open(new URL(import.meta.url), 'r', (err, fd) => {
  console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap
});
</code></pre>
<pre><code class=""language-cjs"">const { open } = require('node:fs');
const { executionAsyncId, executionAsyncResource } = require('node:async_hooks');

console.log(executionAsyncId(), executionAsyncResource());  // 1 {}
open(__filename, 'r', (err, fd) => {
  console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap
});
</code></pre>
<p>This can be used to implement continuation local storage without the
use of a tracking <code>Map</code> to store the metadata:</p>
<pre><code class=""language-mjs"">import { createServer } from 'node:http';
import {
  executionAsyncId,
  executionAsyncResource,
  createHook,
} from 'async_hooks';
const sym = Symbol('state'); // Private symbol to avoid pollution

createHook({
  init(asyncId, type, triggerAsyncId, resource) {
    const cr = executionAsyncResource();
    if (cr) {
      resource[sym] = cr[sym];
    }
  },
}).enable();

const server = createServer((req, res) => {
  executionAsyncResource()[sym] = { state: req.url };
  setTimeout(function() {
    res.end(JSON.stringify(executionAsyncResource()[sym]));
  }, 100);
}).listen(3000);
</code></pre>
<pre><code class=""language-cjs"">const { createServer } = require('node:http');
const {
  executionAsyncId,
  executionAsyncResource,
  createHook,
} = require('node:async_hooks');
const sym = Symbol('state'); // Private symbol to avoid pollution

createHook({
  init(asyncId, type, triggerAsyncId, resource) {
    const cr = executionAsyncResource();
    if (cr) {
      resource[sym] = cr[sym];
    }
  },
}).enable();

const server = createServer((req, res) => {
  executionAsyncResource()[sym] = { state: req.url };
  setTimeout(function() {
    res.end(JSON.stringify(executionAsyncResource()[sym]));
  }, 100);
}).listen(3000);
</code></pre>",0,Others,
39,async_hooks,,executionAsyncId,async_hooks.executionAsyncId,"<pre><code class=""language-mjs"">import { executionAsyncId } from 'node:async_hooks';
import fs from 'node:fs';

console.log(executionAsyncId());  // 1 - bootstrap
const path = '.';
fs.open(path, 'r', (err, fd) => {
  console.log(executionAsyncId());  // 6 - open()
});
</code></pre>
<pre><code class=""language-cjs"">const async_hooks = require('node:async_hooks');
const fs = require('node:fs');

console.log(async_hooks.executionAsyncId());  // 1 - bootstrap
const path = '.';
fs.open(path, 'r', (err, fd) => {
  console.log(async_hooks.executionAsyncId());  // 6 - open()
});
</code></pre>
<p>The ID returned from <code>executionAsyncId()</code> is related to execution timing, not
causality (which is covered by <code>triggerAsyncId()</code>):</p>
<pre><code class=""language-js"">const server = net.createServer((conn) => {
  // Returns the ID of the server, not of the new connection, because the
  // callback runs in the execution scope of the server's MakeCallback().
  async_hooks.executionAsyncId();

}).listen(port, () => {
  // Returns the ID of a TickObject (process.nextTick()) because all
  // callbacks passed to .listen() are wrapped in a nextTick().
  async_hooks.executionAsyncId();
});
</code></pre>
<p>Promise contexts may not get precise <code>executionAsyncIds</code> by default.
See the section on <a href=""async_hooks.html#promise-execution-tracking"">promise execution tracking</a>.</p>",0,Others,
40,async_hooks,,triggerAsyncId,async_hooks.triggerAsyncId,"<pre><code class=""language-js"">const server = net.createServer((conn) => {
  // The resource that caused (or triggered) this callback to be called
  // was that of the new connection. Thus the return value of triggerAsyncId()
  // is the asyncId of ""conn"".
  async_hooks.triggerAsyncId();

}).listen(port, () => {
  // Even though all callbacks passed to .listen() are wrapped in a nextTick()
  // the callback itself exists because the call to the server's .listen()
  // was made. So the return value would be the ID of the server.
  async_hooks.triggerAsyncId();
});
</code></pre>
<p>Promise contexts may not get valid <code>triggerAsyncId</code>s by default. See
the section on <a href=""async_hooks.html#promise-execution-tracking"">promise execution tracking</a>.</p>",0,Others,
41,blob,,arrayBuffer,blob.arrayBuffer,"<p>Returns a promise that fulfills with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> containing a copy of
the <code>Blob</code> data.</p>",0,28,
42,blob,,slice,blob.slice,"<p>Creates and returns a new <code>Blob</code> containing a subset of this <code>Blob</code> objects
data. The original <code>Blob</code> is not altered.</p>",3,Others,
43,blob,,stream,blob.stream,<p>Returns a new <code>ReadableStream</code> that allows the content of the <code>Blob</code> to be read.</p>,0,18,
44,blob,,text,blob.text,"<p>Returns a promise that fulfills with the contents of the <code>Blob</code> decoded as a
UTF-8 string.</p>",0,11,
45,buf,,compare,buf.compare,"<p>Compares <code>buf</code> with <code>target</code> and returns a number indicating whether <code>buf</code>
comes before, after, or is the same as <code>target</code> in sort order.
Comparison is based on the actual sequence of bytes in each <code>Buffer</code>.</p>
<ul>
<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>
<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>
<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>
</ul>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('BCD');
const buf3 = Buffer.from('ABCD');

console.log(buf1.compare(buf1));
// Prints: 0
console.log(buf1.compare(buf2));
// Prints: -1
console.log(buf1.compare(buf3));
// Prints: -1
console.log(buf2.compare(buf1));
// Prints: 1
console.log(buf2.compare(buf3));
// Prints: 1
console.log([buf1, buf2, buf3].sort(Buffer.compare));
// Prints: [ &#x3C;Buffer 41 42 43>, &#x3C;Buffer 41 42 43 44>, &#x3C;Buffer 42 43 44> ]
// (This result is equal to: [buf1, buf3, buf2].)
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('BCD');
const buf3 = Buffer.from('ABCD');

console.log(buf1.compare(buf1));
// Prints: 0
console.log(buf1.compare(buf2));
// Prints: -1
console.log(buf1.compare(buf3));
// Prints: -1
console.log(buf2.compare(buf1));
// Prints: 1
console.log(buf2.compare(buf3));
// Prints: 1
console.log([buf1, buf2, buf3].sort(Buffer.compare));
// Prints: [ &#x3C;Buffer 41 42 43>, &#x3C;Buffer 41 42 43 44>, &#x3C;Buffer 42 43 44> ]
// (This result is equal to: [buf1, buf3, buf2].)
</code></pre>
<p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>
arguments can be used to limit the comparison to specific ranges within <code>target</code>
and <code>buf</code> respectively.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);
const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);

console.log(buf1.compare(buf2, 5, 9, 0, 4));
// Prints: 0
console.log(buf1.compare(buf2, 0, 6, 4));
// Prints: -1
console.log(buf1.compare(buf2, 5, 6, 5));
// Prints: 1
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);
const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);

console.log(buf1.compare(buf2, 5, 9, 0, 4));
// Prints: 0
console.log(buf1.compare(buf2, 0, 6, 4));
// Prints: -1
console.log(buf1.compare(buf2, 5, 6, 5));
// Prints: 1
</code></pre>
<p><a href=""errors.html#err_out_of_range""><code>ERR_OUT_OF_RANGE</code></a> is thrown if <code>targetStart &#x3C; 0</code>, <code>sourceStart &#x3C; 0</code>,
<code>targetEnd > target.byteLength</code>, or <code>sourceEnd > source.byteLength</code>.</p>",5,Others,
46,buf,,copy,buf.copy,"<p>Copies data from a region of <code>buf</code> to a region in <code>target</code>, even if the <code>target</code>
memory region overlaps with <code>buf</code>.</p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set""><code>TypedArray.prototype.set()</code></a> performs the same operation, and is available
for all TypedArrays, including Node.js <code>Buffer</code>s, although it takes
different function arguments.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Create two `Buffer` instances.
const buf1 = Buffer.allocUnsafe(26);
const buf2 = Buffer.allocUnsafe(26).fill('!');

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.
buf1.copy(buf2, 8, 16, 20);
// This is equivalent to:
// buf2.set(buf1.subarray(16, 20), 8);

console.log(buf2.toString('ascii', 0, 25));
// Prints: !!!!!!!!qrst!!!!!!!!!!!!!
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Create two `Buffer` instances.
const buf1 = Buffer.allocUnsafe(26);
const buf2 = Buffer.allocUnsafe(26).fill('!');

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.
buf1.copy(buf2, 8, 16, 20);
// This is equivalent to:
// buf2.set(buf1.subarray(16, 20), 8);

console.log(buf2.toString('ascii', 0, 25));
// Prints: !!!!!!!!qrst!!!!!!!!!!!!!
</code></pre>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Create a `Buffer` and copy data from one region to an overlapping region
// within the same `Buffer`.

const buf = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf[i] = i + 97;
}

buf.copy(buf, 0, 4, 10);

console.log(buf.toString());
// Prints: efghijghijklmnopqrstuvwxyz
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Create a `Buffer` and copy data from one region to an overlapping region
// within the same `Buffer`.

const buf = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf[i] = i + 97;
}

buf.copy(buf, 0, 4, 10);

console.log(buf.toString());
// Prints: efghijghijklmnopqrstuvwxyz
</code></pre>",4,Others,
47,buf,,entries,buf.entries,"<p>Creates and returns an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"">iterator</a> of <code>[index, byte]</code> pairs from the contents
of <code>buf</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Log the entire contents of a `Buffer`.

const buf = Buffer.from('buffer');

for (const pair of buf.entries()) {
  console.log(pair);
}
// Prints:
//   [0, 98]
//   [1, 117]
//   [2, 102]
//   [3, 102]
//   [4, 101]
//   [5, 114]
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Log the entire contents of a `Buffer`.

const buf = Buffer.from('buffer');

for (const pair of buf.entries()) {
  console.log(pair);
}
// Prints:
//   [0, 98]
//   [1, 117]
//   [2, 102]
//   [3, 102]
//   [4, 101]
//   [5, 114]
</code></pre>",0,Others,
48,buf,,equals,buf.equals,"<p>Returns <code>true</code> if both <code>buf</code> and <code>otherBuffer</code> have exactly the same bytes,
<code>false</code> otherwise. Equivalent to
<a href=""buffer.html#bufcomparetarget-targetstart-targetend-sourcestart-sourceend""><code>buf.compare(otherBuffer) === 0</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('414243', 'hex');
const buf3 = Buffer.from('ABCD');

console.log(buf1.equals(buf2));
// Prints: true
console.log(buf1.equals(buf3));
// Prints: false
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('414243', 'hex');
const buf3 = Buffer.from('ABCD');

console.log(buf1.equals(buf2));
// Prints: true
console.log(buf1.equals(buf3));
// Prints: false
</code></pre>",1,Others,
49,buf,,fill,buf.fill,"<p>Fills <code>buf</code> with the specified <code>value</code>. If the <code>offset</code> and <code>end</code> are not given,
the entire <code>buf</code> will be filled:</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Fill a `Buffer` with the ASCII character 'h'.

const b = Buffer.allocUnsafe(50).fill('h');

console.log(b.toString());
// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

// Fill a buffer with empty string
const c = Buffer.allocUnsafe(5).fill('');

console.log(c.fill(''));
// Prints: &#x3C;Buffer 00 00 00 00 00>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Fill a `Buffer` with the ASCII character 'h'.

const b = Buffer.allocUnsafe(50).fill('h');

console.log(b.toString());
// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

// Fill a buffer with empty string
const c = Buffer.allocUnsafe(5).fill('');

console.log(c.fill(''));
// Prints: &#x3C;Buffer 00 00 00 00 00>
</code></pre>
<p><code>value</code> is coerced to a <code>uint32</code> value if it is not a string, <code>Buffer</code>, or
integer. If the resulting integer is greater than <code>255</code> (decimal), <code>buf</code> will be
filled with <code>value &#x26; 255</code>.</p>
<p>If the final write of a <code>fill()</code> operation falls on a multi-byte character,
then only the bytes of that character that fit into <code>buf</code> are written:</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Fill a `Buffer` with character that takes up two bytes in UTF-8.

console.log(Buffer.allocUnsafe(5).fill('\u0222'));
// Prints: &#x3C;Buffer c8 a2 c8 a2 c8>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Fill a `Buffer` with character that takes up two bytes in UTF-8.

console.log(Buffer.allocUnsafe(5).fill('\u0222'));
// Prints: &#x3C;Buffer c8 a2 c8 a2 c8>
</code></pre>
<p>If <code>value</code> contains invalid characters, it is truncated; if no valid
fill data remains, an exception is thrown:</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(5);

console.log(buf.fill('a'));
// Prints: &#x3C;Buffer 61 61 61 61 61>
console.log(buf.fill('aazz', 'hex'));
// Prints: &#x3C;Buffer aa aa aa aa aa>
console.log(buf.fill('zz', 'hex'));
// Throws an exception.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(5);

console.log(buf.fill('a'));
// Prints: &#x3C;Buffer 61 61 61 61 61>
console.log(buf.fill('aazz', 'hex'));
// Prints: &#x3C;Buffer aa aa aa aa aa>
console.log(buf.fill('zz', 'hex'));
// Throws an exception.
</code></pre>",4,Others,
50,buf,,includes,buf.includes,"<p>Equivalent to <a href=""buffer.html#bufindexofvalue-byteoffset-encoding""><code>buf.indexOf() !== -1</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('this is a buffer');

console.log(buf.includes('this'));
// Prints: true
console.log(buf.includes('is'));
// Prints: true
console.log(buf.includes(Buffer.from('a buffer')));
// Prints: true
console.log(buf.includes(97));
// Prints: true (97 is the decimal ASCII value for 'a')
console.log(buf.includes(Buffer.from('a buffer example')));
// Prints: false
console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));
// Prints: true
console.log(buf.includes('this', 4));
// Prints: false
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('this is a buffer');

console.log(buf.includes('this'));
// Prints: true
console.log(buf.includes('is'));
// Prints: true
console.log(buf.includes(Buffer.from('a buffer')));
// Prints: true
console.log(buf.includes(97));
// Prints: true (97 is the decimal ASCII value for 'a')
console.log(buf.includes(Buffer.from('a buffer example')));
// Prints: false
console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));
// Prints: true
console.log(buf.includes('this', 4));
// Prints: false
</code></pre>",3,Others,
51,buf,,indexOf,buf.indexOf,"<p>If <code>value</code> is:</p>
<ul>
<li>a string, <code>value</code> is interpreted according to the character encoding in
<code>encoding</code>.</li>
<li>a <code>Buffer</code> or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array""><code>Uint8Array</code></a>, <code>value</code> will be used in its entirety.
To compare a partial <code>Buffer</code>, use <a href=""buffer.html#bufsubarraystart-end""><code>buf.subarray</code></a>.</li>
<li>a number, <code>value</code> will be interpreted as an unsigned 8-bit integer
value between <code>0</code> and <code>255</code>.</li>
</ul>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('this is a buffer');

console.log(buf.indexOf('this'));
// Prints: 0
console.log(buf.indexOf('is'));
// Prints: 2
console.log(buf.indexOf(Buffer.from('a buffer')));
// Prints: 8
console.log(buf.indexOf(97));
// Prints: 8 (97 is the decimal ASCII value for 'a')
console.log(buf.indexOf(Buffer.from('a buffer example')));
// Prints: -1
console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));
// Prints: 8

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.indexOf('\u03a3', 0, 'utf16le'));
// Prints: 4
console.log(utf16Buffer.indexOf('\u03a3', -4, 'utf16le'));
// Prints: 6
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('this is a buffer');

console.log(buf.indexOf('this'));
// Prints: 0
console.log(buf.indexOf('is'));
// Prints: 2
console.log(buf.indexOf(Buffer.from('a buffer')));
// Prints: 8
console.log(buf.indexOf(97));
// Prints: 8 (97 is the decimal ASCII value for 'a')
console.log(buf.indexOf(Buffer.from('a buffer example')));
// Prints: -1
console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));
// Prints: 8

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.indexOf('\u03a3', 0, 'utf16le'));
// Prints: 4
console.log(utf16Buffer.indexOf('\u03a3', -4, 'utf16le'));
// Prints: 6
</code></pre>
<p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a
<code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value,
an integer between 0 and 255.</p>
<p>If <code>byteOffset</code> is not a number, it will be coerced to a number. If the result
of coercion is <code>NaN</code> or <code>0</code>, then the entire buffer will be searched. This
behavior matches <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf""><code>String.prototype.indexOf()</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.indexOf(99.9));
console.log(b.indexOf(256 + 99));

// Passing a byteOffset that coerces to NaN or 0.
// Prints: 1, searching the whole buffer.
console.log(b.indexOf('b', undefined));
console.log(b.indexOf('b', {}));
console.log(b.indexOf('b', null));
console.log(b.indexOf('b', []));
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.indexOf(99.9));
console.log(b.indexOf(256 + 99));

// Passing a byteOffset that coerces to NaN or 0.
// Prints: 1, searching the whole buffer.
console.log(b.indexOf('b', undefined));
console.log(b.indexOf('b', {}));
console.log(b.indexOf('b', null));
console.log(b.indexOf('b', []));
</code></pre>
<p>If <code>value</code> is an empty string or empty <code>Buffer</code> and <code>byteOffset</code> is less
than <code>buf.length</code>, <code>byteOffset</code> will be returned. If <code>value</code> is empty and
<code>byteOffset</code> is at least <code>buf.length</code>, <code>buf.length</code> will be returned.</p>",3,Others,
52,buf,,keys,buf.keys,"<p>Creates and returns an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"">iterator</a> of <code>buf</code> keys (indices).</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

for (const key of buf.keys()) {
  console.log(key);
}
// Prints:
//   0
//   1
//   2
//   3
//   4
//   5
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

for (const key of buf.keys()) {
  console.log(key);
}
// Prints:
//   0
//   1
//   2
//   3
//   4
//   5
</code></pre>",0,Others,
53,buf,,lastIndexOf,buf.lastIndexOf,"<p>Identical to <a href=""buffer.html#bufindexofvalue-byteoffset-encoding""><code>buf.indexOf()</code></a>, except the last occurrence of <code>value</code> is found
rather than the first occurrence.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('this buffer is a buffer');

console.log(buf.lastIndexOf('this'));
// Prints: 0
console.log(buf.lastIndexOf('buffer'));
// Prints: 17
console.log(buf.lastIndexOf(Buffer.from('buffer')));
// Prints: 17
console.log(buf.lastIndexOf(97));
// Prints: 15 (97 is the decimal ASCII value for 'a')
console.log(buf.lastIndexOf(Buffer.from('yolo')));
// Prints: -1
console.log(buf.lastIndexOf('buffer', 5));
// Prints: 5
console.log(buf.lastIndexOf('buffer', 4));
// Prints: -1

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.lastIndexOf('\u03a3', undefined, 'utf16le'));
// Prints: 6
console.log(utf16Buffer.lastIndexOf('\u03a3', -5, 'utf16le'));
// Prints: 4
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('this buffer is a buffer');

console.log(buf.lastIndexOf('this'));
// Prints: 0
console.log(buf.lastIndexOf('buffer'));
// Prints: 17
console.log(buf.lastIndexOf(Buffer.from('buffer')));
// Prints: 17
console.log(buf.lastIndexOf(97));
// Prints: 15 (97 is the decimal ASCII value for 'a')
console.log(buf.lastIndexOf(Buffer.from('yolo')));
// Prints: -1
console.log(buf.lastIndexOf('buffer', 5));
// Prints: 5
console.log(buf.lastIndexOf('buffer', 4));
// Prints: -1

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.lastIndexOf('\u03a3', undefined, 'utf16le'));
// Prints: 6
console.log(utf16Buffer.lastIndexOf('\u03a3', -5, 'utf16le'));
// Prints: 4
</code></pre>
<p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a
<code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value,
an integer between 0 and 255.</p>
<p>If <code>byteOffset</code> is not a number, it will be coerced to a number. Any arguments
that coerce to <code>NaN</code>, like <code>{}</code> or <code>undefined</code>, will search the whole buffer.
This behavior matches <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf""><code>String.prototype.lastIndexOf()</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.lastIndexOf(99.9));
console.log(b.lastIndexOf(256 + 99));

// Passing a byteOffset that coerces to NaN.
// Prints: 1, searching the whole buffer.
console.log(b.lastIndexOf('b', undefined));
console.log(b.lastIndexOf('b', {}));

// Passing a byteOffset that coerces to 0.
// Prints: -1, equivalent to passing 0.
console.log(b.lastIndexOf('b', null));
console.log(b.lastIndexOf('b', []));
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.lastIndexOf(99.9));
console.log(b.lastIndexOf(256 + 99));

// Passing a byteOffset that coerces to NaN.
// Prints: 1, searching the whole buffer.
console.log(b.lastIndexOf('b', undefined));
console.log(b.lastIndexOf('b', {}));

// Passing a byteOffset that coerces to 0.
// Prints: -1, equivalent to passing 0.
console.log(b.lastIndexOf('b', null));
console.log(b.lastIndexOf('b', []));
</code></pre>
<p>If <code>value</code> is an empty string or empty <code>Buffer</code>, <code>byteOffset</code> will be returned.</p>",3,Others,
54,buf,,readBigInt64BE,buf.readBigInt64BE,"<p>Reads a signed, big-endian 64-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed
values.</p>",1,11,
55,buf,,readBigInt64LE,buf.readBigInt64LE,"<p>Reads a signed, little-endian 64-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed
values.</p>",1,11,
56,buf,,readBigUInt64BE,buf.readBigUInt64BE,"<p>Reads an unsigned, big-endian 64-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readBigUint64BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64BE(0));
// Prints: 4294967295n
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64BE(0));
// Prints: 4294967295n
</code></pre>",1,11,
57,buf,,readBigUInt64LE,buf.readBigUInt64LE,"<p>Reads an unsigned, little-endian 64-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readBigUint64LE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64LE(0));
// Prints: 18446744069414584320n
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64LE(0));
// Prints: 18446744069414584320n
</code></pre>",1,11,
58,buf,,readDoubleBE,buf.readDoubleBE,"<p>Reads a 64-bit, big-endian double from <code>buf</code> at the specified <code>offset</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleBE(0));
// Prints: 8.20788039913184e-304
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleBE(0));
// Prints: 8.20788039913184e-304
</code></pre>",1,11,
59,buf,,readDoubleLE,buf.readDoubleLE,"<p>Reads a 64-bit, little-endian double from <code>buf</code> at the specified <code>offset</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleLE(0));
// Prints: 5.447603722011605e-270
console.log(buf.readDoubleLE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleLE(0));
// Prints: 5.447603722011605e-270
console.log(buf.readDoubleLE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
60,buf,,readFloatBE,buf.readFloatBE,"<p>Reads a 32-bit, big-endian float from <code>buf</code> at the specified <code>offset</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4]);

console.log(buf.readFloatBE(0));
// Prints: 2.387939260590663e-38
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4]);

console.log(buf.readFloatBE(0));
// Prints: 2.387939260590663e-38
</code></pre>",1,11,
61,buf,,readFloatLE,buf.readFloatLE,"<p>Reads a 32-bit, little-endian float from <code>buf</code> at the specified <code>offset</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4]);

console.log(buf.readFloatLE(0));
// Prints: 1.539989614439558e-36
console.log(buf.readFloatLE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4]);

console.log(buf.readFloatLE(0));
// Prints: 1.539989614439558e-36
console.log(buf.readFloatLE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
62,buf,,readInt8,buf.readInt8,"<p>Reads a signed 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([-1, 5]);

console.log(buf.readInt8(0));
// Prints: -1
console.log(buf.readInt8(1));
// Prints: 5
console.log(buf.readInt8(2));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([-1, 5]);

console.log(buf.readInt8(0));
// Prints: -1
console.log(buf.readInt8(1));
// Prints: 5
console.log(buf.readInt8(2));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
63,buf,,readInt16BE,buf.readInt16BE,"<p>Reads a signed, big-endian 16-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0, 5]);

console.log(buf.readInt16BE(0));
// Prints: 5
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0, 5]);

console.log(buf.readInt16BE(0));
// Prints: 5
</code></pre>",1,11,
64,buf,,readInt16LE,buf.readInt16LE,"<p>Reads a signed, little-endian 16-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0, 5]);

console.log(buf.readInt16LE(0));
// Prints: 1280
console.log(buf.readInt16LE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0, 5]);

console.log(buf.readInt16LE(0));
// Prints: 1280
console.log(buf.readInt16LE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
65,buf,,readInt32BE,buf.readInt32BE,"<p>Reads a signed, big-endian 32-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0, 0, 0, 5]);

console.log(buf.readInt32BE(0));
// Prints: 5
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0, 0, 0, 5]);

console.log(buf.readInt32BE(0));
// Prints: 5
</code></pre>",1,11,
66,buf,,readInt32LE,buf.readInt32LE,"<p>Reads a signed, little-endian 32-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0, 0, 0, 5]);

console.log(buf.readInt32LE(0));
// Prints: 83886080
console.log(buf.readInt32LE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0, 0, 0, 5]);

console.log(buf.readInt32LE(0));
// Prints: 83886080
console.log(buf.readInt32LE(1));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
67,buf,,readIntBE,buf.readIntBE,"<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>
and interprets the result as a big-endian, two's complement signed value
supporting up to 48 bits of accuracy.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
console.log(buf.readIntBE(1, 0).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
console.log(buf.readIntBE(1, 0).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",2,Others,
68,buf,,readIntLE,buf.readIntLE,"<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>
and interprets the result as a little-endian, two's complement signed value
supporting up to 48 bits of accuracy.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readIntLE(0, 6).toString(16));
// Prints: -546f87a9cbee
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readIntLE(0, 6).toString(16));
// Prints: -546f87a9cbee
</code></pre>",2,Others,
69,buf,,readUInt8,buf.readUInt8,"<p>Reads an unsigned 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>
<p>This function is also available under the <code>readUint8</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, -2]);

console.log(buf.readUInt8(0));
// Prints: 1
console.log(buf.readUInt8(1));
// Prints: 254
console.log(buf.readUInt8(2));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, -2]);

console.log(buf.readUInt8(0));
// Prints: 1
console.log(buf.readUInt8(1));
// Prints: 254
console.log(buf.readUInt8(2));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
70,buf,,readUInt16BE,buf.readUInt16BE,"<p>Reads an unsigned, big-endian 16-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readUint16BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16BE(0).toString(16));
// Prints: 1234
console.log(buf.readUInt16BE(1).toString(16));
// Prints: 3456
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16BE(0).toString(16));
// Prints: 1234
console.log(buf.readUInt16BE(1).toString(16));
// Prints: 3456
</code></pre>",1,11,
71,buf,,readUInt16LE,buf.readUInt16LE,"<p>Reads an unsigned, little-endian 16-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readUint16LE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16LE(0).toString(16));
// Prints: 3412
console.log(buf.readUInt16LE(1).toString(16));
// Prints: 5634
console.log(buf.readUInt16LE(2).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16LE(0).toString(16));
// Prints: 3412
console.log(buf.readUInt16LE(1).toString(16));
// Prints: 5634
console.log(buf.readUInt16LE(2).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
72,buf,,readUInt32BE,buf.readUInt32BE,"<p>Reads an unsigned, big-endian 32-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readUint32BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32BE(0).toString(16));
// Prints: 12345678
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32BE(0).toString(16));
// Prints: 12345678
</code></pre>",1,11,
73,buf,,readUInt32LE,buf.readUInt32LE,"<p>Reads an unsigned, little-endian 32-bit integer from <code>buf</code> at the specified
<code>offset</code>.</p>
<p>This function is also available under the <code>readUint32LE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32LE(0).toString(16));
// Prints: 78563412
console.log(buf.readUInt32LE(1).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32LE(0).toString(16));
// Prints: 78563412
console.log(buf.readUInt32LE(1).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",1,11,
74,buf,,readUIntBE,buf.readUIntBE,"<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>
and interprets the result as an unsigned big-endian integer supporting
up to 48 bits of accuracy.</p>
<p>This function is also available under the <code>readUintBE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readUIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readUIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
</code></pre>",2,Others,
75,buf,,readUIntLE,buf.readUIntLE,"<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>
and interprets the result as an unsigned, little-endian integer supporting
up to 48 bits of accuracy.</p>
<p>This function is also available under the <code>readUintLE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntLE(0, 6).toString(16));
// Prints: ab9078563412
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntLE(0, 6).toString(16));
// Prints: ab9078563412
</code></pre>",2,Others,
76,buf,,subarray,buf.subarray,"<p>Returns a new <code>Buffer</code> that references the same memory as the original, but
offset and cropped by the <code>start</code> and <code>end</code> indices.</p>
<p>Specifying <code>end</code> greater than <a href=""buffer.html#buflength""><code>buf.length</code></a> will return the same result as
that of <code>end</code> equal to <a href=""buffer.html#buflength""><code>buf.length</code></a>.</p>
<p>This method is inherited from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray""><code>TypedArray.prototype.subarray()</code></a>.</p>
<p>Modifying the new <code>Buffer</code> slice will modify the memory in the original <code>Buffer</code>
because the allocated memory of the two objects overlap.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte
// from the original `Buffer`.

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

const buf2 = buf1.subarray(0, 3);

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: abc

buf1[0] = 33;

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: !bc
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte
// from the original `Buffer`.

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

const buf2 = buf1.subarray(0, 3);

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: abc

buf1[0] = 33;

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: !bc
</code></pre>
<p>Specifying negative indexes causes the slice to be generated relative to the
end of <code>buf</code> rather than the beginning.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

console.log(buf.subarray(-6, -1).toString());
// Prints: buffe
// (Equivalent to buf.subarray(0, 5).)

console.log(buf.subarray(-6, -2).toString());
// Prints: buff
// (Equivalent to buf.subarray(0, 4).)

console.log(buf.subarray(-5, -2).toString());
// Prints: uff
// (Equivalent to buf.subarray(1, 4).)
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

console.log(buf.subarray(-6, -1).toString());
// Prints: buffe
// (Equivalent to buf.subarray(0, 5).)

console.log(buf.subarray(-6, -2).toString());
// Prints: buff
// (Equivalent to buf.subarray(0, 4).)

console.log(buf.subarray(-5, -2).toString());
// Prints: uff
// (Equivalent to buf.subarray(1, 4).)
</code></pre>",2,Others,
77,buf,,slice,buf.slice,"<p>Returns a new <code>Buffer</code> that references the same memory as the original, but
offset and cropped by the <code>start</code> and <code>end</code> indices.</p>
<p>This method is not compatible with the <code>Uint8Array.prototype.slice()</code>,
which is a superclass of <code>Buffer</code>. To copy the slice, use
<code>Uint8Array.prototype.slice()</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

const copiedBuf = Uint8Array.prototype.slice.call(buf);
copiedBuf[0]++;
console.log(copiedBuf.toString());
// Prints: cuffer

console.log(buf.toString());
// Prints: buffer

// With buf.slice(), the original buffer is modified.
const notReallyCopiedBuf = buf.slice();
notReallyCopiedBuf[0]++;
console.log(notReallyCopiedBuf.toString());
// Prints: cuffer
console.log(buf.toString());
// Also prints: cuffer (!)
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

const copiedBuf = Uint8Array.prototype.slice.call(buf);
copiedBuf[0]++;
console.log(copiedBuf.toString());
// Prints: cuffer

console.log(buf.toString());
// Prints: buffer

// With buf.slice(), the original buffer is modified.
const notReallyCopiedBuf = buf.slice();
notReallyCopiedBuf[0]++;
console.log(notReallyCopiedBuf.toString());
// Prints: cuffer
console.log(buf.toString());
// Also prints: cuffer (!)
</code></pre>",2,Others,
78,buf,,swap16,buf.swap16,"<p>Interprets <code>buf</code> as an array of unsigned 16-bit integers and swaps the
byte order <em>in-place</em>. Throws <a href=""errors.html#err_invalid_buffer_size""><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=""buffer.html#buflength""><code>buf.length</code></a>
is not a multiple of 2.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap16();

console.log(buf1);
// Prints: &#x3C;Buffer 02 01 04 03 06 05 08 07>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap16();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap16();

console.log(buf1);
// Prints: &#x3C;Buffer 02 01 04 03 06 05 08 07>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap16();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>
<p>One convenient use of <code>buf.swap16()</code> is to perform a fast in-place conversion
between UTF-16 little-endian and UTF-16 big-endian:</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');
buf.swap16(); // Convert to big-endian UTF-16 text.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');
buf.swap16(); // Convert to big-endian UTF-16 text.
</code></pre>",0,Others,
79,buf,,swap32,buf.swap32,"<p>Interprets <code>buf</code> as an array of unsigned 32-bit integers and swaps the
byte order <em>in-place</em>. Throws <a href=""errors.html#err_invalid_buffer_size""><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=""buffer.html#buflength""><code>buf.length</code></a>
is not a multiple of 4.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap32();

console.log(buf1);
// Prints: &#x3C;Buffer 04 03 02 01 08 07 06 05>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap32();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap32();

console.log(buf1);
// Prints: &#x3C;Buffer 04 03 02 01 08 07 06 05>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap32();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>",0,Others,
80,buf,,swap64,buf.swap64,"<p>Interprets <code>buf</code> as an array of 64-bit numbers and swaps byte order <em>in-place</em>.
Throws <a href=""errors.html#err_invalid_buffer_size""><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=""buffer.html#buflength""><code>buf.length</code></a> is not a multiple of 8.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap64();

console.log(buf1);
// Prints: &#x3C;Buffer 08 07 06 05 04 03 02 01>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap64();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>

buf1.swap64();

console.log(buf1);
// Prints: &#x3C;Buffer 08 07 06 05 04 03 02 01>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap64();
// Throws ERR_INVALID_BUFFER_SIZE.
</code></pre>",0,Others,
81,buf,,toJSON,buf.toJSON,"<p>Returns a JSON representation of <code>buf</code>. <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify""><code>JSON.stringify()</code></a> implicitly calls
this function when stringifying a <code>Buffer</code> instance.</p>
<p><code>Buffer.from()</code> accepts objects in the format returned from this method.
In particular, <code>Buffer.from(buf.toJSON())</code> works like <code>Buffer.from(buf)</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {""type"":""Buffer"",""data"":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value &#x26;&#x26; value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: &#x3C;Buffer 01 02 03 04 05>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {""type"":""Buffer"",""data"":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value &#x26;&#x26; value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: &#x3C;Buffer 01 02 03 04 05>
</code></pre>",0,28,
82,buf,,toString,buf.toString,"<p>Decodes <code>buf</code> to a string according to the specified character encoding in
<code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.</p>
<p>If <code>encoding</code> is <code>'utf8'</code> and a byte sequence in the input is not valid UTF-8,
then each invalid byte is replaced with the replacement character <code>U+FFFD</code>.</p>
<p>The maximum length of a string instance (in UTF-16 code units) is available
as <a href=""buffer.html#bufferconstantsmax_string_length""><code>buffer.constants.MAX_STRING_LENGTH</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i &#x3C; 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
</code></pre>",3,30,
83,buf,,values,buf.values,"<p>Creates and returns an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"">iterator</a> for <code>buf</code> values (bytes). This function is
called automatically when a <code>Buffer</code> is used in a <code>for..of</code> statement.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

for (const value of buf.values()) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114

for (const value of buf) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

for (const value of buf.values()) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114

for (const value of buf) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114
</code></pre>",0,Others,
84,buf,,write,buf.write,"<p>Writes <code>string</code> to <code>buf</code> at <code>offset</code> according to the character encoding in
<code>encoding</code>. The <code>length</code> parameter is the number of bytes to write. If <code>buf</code> did
not contain enough space to fit the entire string, only part of <code>string</code> will be
written. However, partially encoded characters will not be written.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(256);

const len = buf.write('\u00bd + \u00bc = \u00be', 0);

console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);
// Prints: 12 bytes: ½ + ¼ = ¾

const buffer = Buffer.alloc(10);

const length = buffer.write('abcd', 8);

console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);
// Prints: 2 bytes : ab
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(256);

const len = buf.write('\u00bd + \u00bc = \u00be', 0);

console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);
// Prints: 12 bytes: ½ + ¼ = ¾

const buffer = Buffer.alloc(10);

const length = buffer.write('abcd', 8);

console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);
// Prints: 2 bytes : ab
</code></pre>",4,13,
85,buf,,writeBigInt64BE,buf.writeBigInt64BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian.</p>
<p><code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02 03 04 05 06 07 08>
</code></pre>",2,13,
86,buf,,writeBigInt64LE,buf.writeBigInt64LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian.</p>
<p><code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64LE(0x0102030405060708n, 0);

console.log(buf);
// Prints: &#x3C;Buffer 08 07 06 05 04 03 02 01>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64LE(0x0102030405060708n, 0);

console.log(buf);
// Prints: &#x3C;Buffer 08 07 06 05 04 03 02 01>
</code></pre>",2,13,
87,buf,,writeBigUInt64BE,buf.writeBigUInt64BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian.</p>
<p>This function is also available under the <code>writeBigUint64BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64BE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: &#x3C;Buffer de ca fa fe ca ce fa de>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64BE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: &#x3C;Buffer de ca fa fe ca ce fa de>
</code></pre>",2,13,
88,buf,,writeBigUInt64LE,buf.writeBigUInt64LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64LE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: &#x3C;Buffer de fa ce ca fe fa ca de>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64LE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: &#x3C;Buffer de fa ce ca fe fa ca de>
</code></pre>
<p>This function is also available under the <code>writeBigUint64LE</code> alias.</p>",2,13,
89,buf,,writeDoubleBE,buf.writeDoubleBE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian. The <code>value</code>
must be a JavaScript number. Behavior is undefined when <code>value</code> is anything
other than a JavaScript number.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleBE(123.456, 0);

console.log(buf);
// Prints: &#x3C;Buffer 40 5e dd 2f 1a 9f be 77>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleBE(123.456, 0);

console.log(buf);
// Prints: &#x3C;Buffer 40 5e dd 2f 1a 9f be 77>
</code></pre>",2,13,
90,buf,,writeDoubleLE,buf.writeDoubleLE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian. The <code>value</code>
must be a JavaScript number. Behavior is undefined when <code>value</code> is anything
other than a JavaScript number.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleLE(123.456, 0);

console.log(buf);
// Prints: &#x3C;Buffer 77 be 9f 1a 2f dd 5e 40>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleLE(123.456, 0);

console.log(buf);
// Prints: &#x3C;Buffer 77 be 9f 1a 2f dd 5e 40>
</code></pre>",2,13,
91,buf,,writeFloatBE,buf.writeFloatBE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian. Behavior is
undefined when <code>value</code> is anything other than a JavaScript number.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeFloatBE(0xcafebabe, 0);

console.log(buf);
// Prints: &#x3C;Buffer 4f 4a fe bb>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeFloatBE(0xcafebabe, 0);

console.log(buf);
// Prints: &#x3C;Buffer 4f 4a fe bb>
</code></pre>",2,13,
92,buf,,writeFloatLE,buf.writeFloatLE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian. Behavior is
undefined when <code>value</code> is anything other than a JavaScript number.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeFloatLE(0xcafebabe, 0);

console.log(buf);
// Prints: &#x3C;Buffer bb fe 4a 4f>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeFloatLE(0xcafebabe, 0);

console.log(buf);
// Prints: &#x3C;Buffer bb fe 4a 4f>
</code></pre>",2,13,
93,buf,,writeInt8,buf.writeInt8,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> must be a valid
signed 8-bit integer. Behavior is undefined when <code>value</code> is anything other than
a signed 8-bit integer.</p>
<p><code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt8(2, 0);
buf.writeInt8(-2, 1);

console.log(buf);
// Prints: &#x3C;Buffer 02 fe>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt8(2, 0);
buf.writeInt8(-2, 1);

console.log(buf);
// Prints: &#x3C;Buffer 02 fe>
</code></pre>",2,13,
94,buf,,writeInt16BE,buf.writeInt16BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian.  The <code>value</code>
must be a valid signed 16-bit integer. Behavior is undefined when <code>value</code> is
anything other than a signed 16-bit integer.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt16BE(0x0102, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt16BE(0x0102, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02>
</code></pre>",2,13,
95,buf,,writeInt16LE,buf.writeInt16LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian.  The <code>value</code>
must be a valid signed 16-bit integer. Behavior is undefined when <code>value</code> is
anything other than a signed 16-bit integer.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: &#x3C;Buffer 04 03>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: &#x3C;Buffer 04 03>
</code></pre>",2,13,
96,buf,,writeInt32BE,buf.writeInt32BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian. The <code>value</code>
must be a valid signed 32-bit integer. Behavior is undefined when <code>value</code> is
anything other than a signed 32-bit integer.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeInt32BE(0x01020304, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02 03 04>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeInt32BE(0x01020304, 0);

console.log(buf);
// Prints: &#x3C;Buffer 01 02 03 04>
</code></pre>",2,13,
97,buf,,writeInt32LE,buf.writeInt32LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian. The <code>value</code>
must be a valid signed 32-bit integer. Behavior is undefined when <code>value</code> is
anything other than a signed 32-bit integer.</p>
<p>The <code>value</code> is interpreted and written as a two's complement signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeInt32LE(0x05060708, 0);

console.log(buf);
// Prints: &#x3C;Buffer 08 07 06 05>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeInt32LE(0x05060708, 0);

console.log(buf);
// Prints: &#x3C;Buffer 08 07 06 05>
</code></pre>",2,13,
98,buf,,writeIntBE,buf.writeIntBE,"<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>
as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when
<code>value</code> is anything other than a signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer 12 34 56 78 90 ab>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer 12 34 56 78 90 ab>
</code></pre>",3,Others,
99,buf,,writeIntLE,buf.writeIntLE,"<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>
as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined
when <code>value</code> is anything other than a signed integer.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer ab 90 78 56 34 12>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer ab 90 78 56 34 12>
</code></pre>",3,13,
100,buf,,writeUInt8,buf.writeUInt8,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> must be a
valid unsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything
other than an unsigned 8-bit integer.</p>
<p>This function is also available under the <code>writeUint8</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt8(0x3, 0);
buf.writeUInt8(0x4, 1);
buf.writeUInt8(0x23, 2);
buf.writeUInt8(0x42, 3);

console.log(buf);
// Prints: &#x3C;Buffer 03 04 23 42>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt8(0x3, 0);
buf.writeUInt8(0x4, 1);
buf.writeUInt8(0x23, 2);
buf.writeUInt8(0x42, 3);

console.log(buf);
// Prints: &#x3C;Buffer 03 04 23 42>
</code></pre>",2,13,
101,buf,,writeUInt16BE,buf.writeUInt16BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian. The <code>value</code>
must be a valid unsigned 16-bit integer. Behavior is undefined when <code>value</code>
is anything other than an unsigned 16-bit integer.</p>
<p>This function is also available under the <code>writeUint16BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16BE(0xdead, 0);
buf.writeUInt16BE(0xbeef, 2);

console.log(buf);
// Prints: &#x3C;Buffer de ad be ef>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16BE(0xdead, 0);
buf.writeUInt16BE(0xbeef, 2);

console.log(buf);
// Prints: &#x3C;Buffer de ad be ef>
</code></pre>",2,13,
102,buf,,writeUInt16LE,buf.writeUInt16LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian. The <code>value</code>
must be a valid unsigned 16-bit integer. Behavior is undefined when <code>value</code> is
anything other than an unsigned 16-bit integer.</p>
<p>This function is also available under the <code>writeUint16LE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16LE(0xdead, 0);
buf.writeUInt16LE(0xbeef, 2);

console.log(buf);
// Prints: &#x3C;Buffer ad de ef be>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16LE(0xdead, 0);
buf.writeUInt16LE(0xbeef, 2);

console.log(buf);
// Prints: &#x3C;Buffer ad de ef be>
</code></pre>",2,13,
103,buf,,writeUInt32BE,buf.writeUInt32BE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as big-endian. The <code>value</code>
must be a valid unsigned 32-bit integer. Behavior is undefined when <code>value</code>
is anything other than an unsigned 32-bit integer.</p>
<p>This function is also available under the <code>writeUint32BE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32BE(0xfeedface, 0);

console.log(buf);
// Prints: &#x3C;Buffer fe ed fa ce>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32BE(0xfeedface, 0);

console.log(buf);
// Prints: &#x3C;Buffer fe ed fa ce>
</code></pre>",2,13,
104,buf,,writeUInt32LE,buf.writeUInt32LE,"<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> as little-endian. The <code>value</code>
must be a valid unsigned 32-bit integer. Behavior is undefined when <code>value</code> is
anything other than an unsigned 32-bit integer.</p>
<p>This function is also available under the <code>writeUint32LE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32LE(0xfeedface, 0);

console.log(buf);
// Prints: &#x3C;Buffer ce fa ed fe>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32LE(0xfeedface, 0);

console.log(buf);
// Prints: &#x3C;Buffer ce fa ed fe>
</code></pre>",2,13,
105,buf,,writeUIntBE,buf.writeUIntBE,"<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>
as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined
when <code>value</code> is anything other than an unsigned integer.</p>
<p>This function is also available under the <code>writeUintBE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeUIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer 12 34 56 78 90 ab>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeUIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer 12 34 56 78 90 ab>
</code></pre>",3,13,
106,buf,,writeUIntLE,buf.writeUIntLE,"<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>
as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined
when <code>value</code> is anything other than an unsigned integer.</p>
<p>This function is also available under the <code>writeUintLE</code> alias.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeUIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer ab 90 78 56 34 12>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeUIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: &#x3C;Buffer ab 90 78 56 34 12>
</code></pre>",3,13,
107,buffer,,atob,buffer.atob,"<p>Decodes a string of Base64-encoded data into bytes, and encodes those bytes
into a string using Latin-1 (ISO-8859-1).</p>
<p>The <code>data</code> may be any JavaScript-value that can be coerced into a string.</p>
<p><strong>This function is only provided for compatibility with legacy web platform APIs
and should never be used in new code, because they use strings to represent
binary data and predate the introduction of typed arrays in JavaScript.
For code running using Node.js APIs, converting between base64-encoded strings
and binary data should be performed using <code>Buffer.from(str, 'base64')</code> and
<code>buf.toString('base64')</code>.</strong></p>",1,30,
108,buffer,,btoa,buffer.btoa,"<p>Decodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes
into a string using Base64.</p>
<p>The <code>data</code> may be any JavaScript-value that can be coerced into a string.</p>
<p><strong>This function is only provided for compatibility with legacy web platform APIs
and should never be used in new code, because they use strings to represent
binary data and predate the introduction of typed arrays in JavaScript.
For code running using Node.js APIs, converting between base64-encoded strings
and binary data should be performed using <code>Buffer.from(str, 'base64')</code> and
<code>buf.toString('base64')</code>.</strong></p>",1,30,
109,buffer,,isAscii,buffer.isAscii,"<p>This function returns <code>true</code> if <code>input</code> contains only valid ASCII-encoded data,
including the case in which <code>input</code> is empty.</p>
<p>Throws if the <code>input</code> is a detached array buffer.</p>",1,Others,
110,buffer,,isUtf8,buffer.isUtf8,"<p>This function returns <code>true</code> if <code>input</code> contains only valid UTF-8-encoded data,
including the case in which <code>input</code> is empty.</p>
<p>Throws if the <code>input</code> is a detached array buffer.</p>",1,Others,
111,buffer,,resolveObjectURL,buffer.resolveObjectURL,"<p>Resolves a <code>'blob:nodedata:...'</code> an associated <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> object registered using
a prior call to <code>URL.createObjectURL()</code>.</p>",1,Others,
112,buffer,,transcode,buffer.transcode,"<p>Re-encodes the given <code>Buffer</code> or <code>Uint8Array</code> instance from one character
encoding to another. Returns a new <code>Buffer</code> instance.</p>
<p>Throws if the <code>fromEnc</code> or <code>toEnc</code> specify invalid character encodings or if
conversion from <code>fromEnc</code> to <code>toEnc</code> is not permitted.</p>
<p>Encodings supported by <code>buffer.transcode()</code> are: <code>'ascii'</code>, <code>'utf8'</code>,
<code>'utf16le'</code>, <code>'ucs2'</code>, <code>'latin1'</code>, and <code>'binary'</code>.</p>
<p>The transcoding process will use substitution characters if a given byte
sequence cannot be adequately represented in the target encoding. For instance:</p>
<pre><code class=""language-mjs"">import { Buffer, transcode } from 'node:buffer';

const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');
console.log(newBuf.toString('ascii'));
// Prints: '?'
</code></pre>
<pre><code class=""language-cjs"">const { Buffer, transcode } = require('node:buffer');

const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');
console.log(newBuf.toString('ascii'));
// Prints: '?'
</code></pre>
<p>Because the Euro (<code>€</code>) sign is not representable in US-ASCII, it is replaced
with <code>?</code> in the transcoded <code>Buffer</code>.</p>",3,29,
113,subprocess,,disconnect,subprocess.disconnect,"<p>Closes the IPC channel between parent and child, allowing the child to exit
gracefully once there are no other connections keeping it alive. After calling
this method the <code>subprocess.connected</code> and <code>process.connected</code> properties in
both the parent and child (respectively) will be set to <code>false</code>, and it will be
no longer possible to pass messages between the processes.</p>
<p>The <code>'disconnect'</code> event will be emitted when there are no messages in the
process of being received. This will most often be triggered immediately after
calling <code>subprocess.disconnect()</code>.</p>
<p>When the child process is a Node.js instance (e.g. spawned using
<a href=""child_process.html#child_processforkmodulepath-args-options""><code>child_process.fork()</code></a>), the <code>process.disconnect()</code> method can be invoked
within the child process to close the IPC channel as well.</p>",0,Others,
114,subprocess,,kill,subprocess.kill,"<p>The <code>subprocess.kill()</code> method sends a signal to the child process. If no
argument is given, the process will be sent the <code>'SIGTERM'</code> signal. See
<a href=""http://man7.org/linux/man-pages/man7/signal.7.html""><code>signal(7)</code></a> for a list of available signals. This function returns <code>true</code> if
<a href=""http://man7.org/linux/man-pages/man2/kill.2.html""><code>kill(2)</code></a> succeeds, and <code>false</code> otherwise.</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');
const grep = spawn('grep', ['ssh']);

grep.on('close', (code, signal) => {
  console.log(
    `child process terminated due to receipt of signal ${signal}`);
});

// Send SIGHUP to process.
grep.kill('SIGHUP');
</code></pre>
<p>The <a href=""child_process.html#class-childprocess""><code>ChildProcess</code></a> object may emit an <a href=""child_process.html#event-error""><code>'error'</code></a> event if the signal
cannot be delivered. Sending a signal to a child process that has already exited
is not an error but may have unforeseen consequences. Specifically, if the
process identifier (PID) has been reassigned to another process, the signal will
be delivered to that process instead which can have unexpected results.</p>
<p>While the function is called <code>kill</code>, the signal delivered to the child process
may not actually terminate the process.</p>
<p>See <a href=""http://man7.org/linux/man-pages/man2/kill.2.html""><code>kill(2)</code></a> for reference.</p>
<p>On Windows, where POSIX signals do not exist, the <code>signal</code> argument will be
ignored, and the process will be killed forcefully and abruptly (similar to
<code>'SIGKILL'</code>).
See <a href=""process.html#signal-events"">Signal Events</a> for more details.</p>
<p>On Linux, child processes of child processes will not be terminated
when attempting to kill their parent. This is likely to happen when running a
new process in a shell or with the use of the <code>shell</code> option of <code>ChildProcess</code>:</p>
<pre><code class=""language-js"">'use strict';
const { spawn } = require('node:child_process');

const subprocess = spawn(
  'sh',
  [
    '-c',
    `node -e ""setInterval(() => {
      console.log(process.pid, 'is alive')
    }, 500);""`,
  ], {
    stdio: ['inherit', 'inherit', 'inherit'],
  },
);

setTimeout(() => {
  subprocess.kill(); // Does not terminate the Node.js process in the shell.
}, 2000);
</code></pre>",1,Others,
116,subprocess,,ref,subprocess.ref,"<p>Calling <code>subprocess.ref()</code> after making a call to <code>subprocess.unref()</code> will
restore the removed reference count for the child process, forcing the parent
to wait for the child to exit before exiting itself.</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
subprocess.ref();
</code></pre>",0,Others,
117,subprocess,,send,subprocess.send,"<p>When an IPC channel has been established between the parent and child (
i.e. when using <a href=""child_process.html#child_processforkmodulepath-args-options""><code>child_process.fork()</code></a>), the <code>subprocess.send()</code> method can
be used to send messages to the child process. When the child process is a
Node.js instance, these messages can be received via the <a href=""process.html#event-message""><code>'message'</code></a> event.</p>
<p>The message goes through serialization and parsing. The resulting
message might not be the same as what is originally sent.</p>
<p>For example, in the parent script:</p>
<pre><code class=""language-js"">const cp = require('node:child_process');
const n = cp.fork(`${__dirname}/sub.js`);

n.on('message', (m) => {
  console.log('PARENT got message:', m);
});

// Causes the child to print: CHILD got message: { hello: 'world' }
n.send({ hello: 'world' });
</code></pre>
<p>And then the child script, <code>'sub.js'</code> might look like this:</p>
<pre><code class=""language-js"">process.on('message', (m) => {
  console.log('CHILD got message:', m);
});

// Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }
process.send({ foo: 'bar', baz: NaN });
</code></pre>
<p>Child Node.js processes will have a <a href=""process.html#processsendmessage-sendhandle-options-callback""><code>process.send()</code></a> method of their own
that allows the child to send messages back to the parent.</p>
<p>There is a special case when sending a <code>{cmd: 'NODE_foo'}</code> message. Messages
containing a <code>NODE_</code> prefix in the <code>cmd</code> property are reserved for use within
Node.js core and will not be emitted in the child's <a href=""process.html#event-message""><code>'message'</code></a>
event. Rather, such messages are emitted using the
<code>'internalMessage'</code> event and are consumed internally by Node.js.
Applications should avoid using such messages or listening for
<code>'internalMessage'</code> events as it is subject to change without notice.</p>
<p>The optional <code>sendHandle</code> argument that may be passed to <code>subprocess.send()</code> is
for passing a TCP server or socket object to the child process. The child will
receive the object as the second argument passed to the callback function
registered on the <a href=""process.html#event-message""><code>'message'</code></a> event. Any data that is received
and buffered in the socket will not be sent to the child.</p>
<p>The optional <code>callback</code> is a function that is invoked after the message is
sent but before the child may have received it. The function is called with a
single argument: <code>null</code> on success, or an <a href=""errors.html#class-error""><code>Error</code></a> object on failure.</p>
<p>If no <code>callback</code> function is provided and the message cannot be sent, an
<code>'error'</code> event will be emitted by the <a href=""child_process.html#class-childprocess""><code>ChildProcess</code></a> object. This can
happen, for instance, when the child process has already exited.</p>
<p><code>subprocess.send()</code> will return <code>false</code> if the channel has closed or when the
backlog of unsent messages exceeds a threshold that makes it unwise to send
more. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be
used to implement flow control.</p>
<h4>Example: sending a server object</h4>
<p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of
a TCP server object to the child process as illustrated in the example below:</p>
<pre><code class=""language-js"">const subprocess = require('node:child_process').fork('subprocess.js');

// Open up the server object and send the handle.
const server = require('node:net').createServer();
server.on('connection', (socket) => {
  socket.end('handled by parent');
});
server.listen(1337, () => {
  subprocess.send('server', server);
});
</code></pre>
<p>The child would then receive the server object as:</p>
<pre><code class=""language-js"">process.on('message', (m, server) => {
  if (m === 'server') {
    server.on('connection', (socket) => {
      socket.end('handled by child');
    });
  }
});
</code></pre>
<p>Once the server is now shared between the parent and child, some connections
can be handled by the parent and some by the child.</p>
<p>While the example above uses a server created using the <code>node:net</code> module,
<code>node:dgram</code> module servers use exactly the same workflow with the exceptions of
listening on a <code>'message'</code> event instead of <code>'connection'</code> and using
<code>server.bind()</code> instead of <code>server.listen()</code>. This is, however, only
supported on Unix platforms.</p>
<h4>Example: sending a socket object</h4>
<p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a
socket to the child process. The example below spawns two children that each
handle connections with ""normal"" or ""special"" priority:</p>
<pre><code class=""language-js"">const { fork } = require('node:child_process');
const normal = fork('subprocess.js', ['normal']);
const special = fork('subprocess.js', ['special']);

// Open up the server and send sockets to child. Use pauseOnConnect to prevent
// the sockets from being read before they are sent to the child process.
const server = require('node:net').createServer({ pauseOnConnect: true });
server.on('connection', (socket) => {

  // If this is special priority...
  if (socket.remoteAddress === '74.125.127.100') {
    special.send('socket', socket);
    return;
  }
  // This is normal priority.
  normal.send('socket', socket);
});
server.listen(1337);
</code></pre>
<p>The <code>subprocess.js</code> would receive the socket handle as the second argument
passed to the event callback function:</p>
<pre><code class=""language-js"">process.on('message', (m, socket) => {
  if (m === 'socket') {
    if (socket) {
      // Check that the client socket exists.
      // It is possible for the socket to be closed between the time it is
      // sent and the time it is received in the child process.
      socket.end(`Request handled with ${process.argv[2]} priority`);
    }
  }
});
</code></pre>
<p>Do not use <code>.maxConnections</code> on a socket that has been passed to a subprocess.
The parent cannot track when the socket is destroyed.</p>
<p>Any <code>'message'</code> handlers in the subprocess should verify that <code>socket</code> exists,
as the connection may have been closed during the time it takes to send the
connection to the child.</p>",4,Others,
118,subprocess,,unref,subprocess.unref,"<p>By default, the parent will wait for the detached child to exit. To prevent the
parent from waiting for a given <code>subprocess</code> to exit, use the
<code>subprocess.unref()</code> method. Doing so will cause the parent's event loop to not
include the child in its reference count, allowing the parent to exit
independently of the child, unless there is an established IPC channel between
the child and the parent.</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
</code></pre>",0,Others,
119,child_process,,exec,child_process.exec,"<p>Spawns a shell then executes the <code>command</code> within that shell, buffering any
generated output. The <code>command</code> string passed to the exec function is processed
directly by the shell and special characters (vary based on
<a href=""https://en.wikipedia.org/wiki/List_of_command-line_interpreters"">shell</a>)
need to be dealt with accordingly:</p>
<pre><code class=""language-js"">const { exec } = require('node:child_process');

exec('""/path/to/test file/test.sh"" arg1 arg2');
// Double quotes are used so that the space in the path is not interpreted as
// a delimiter of multiple arguments.

exec('echo ""The \\$HOME variable is $HOME""');
// The $HOME variable is escaped in the first instance, but not in the second.
</code></pre>
<p><strong>Never pass unsanitized user input to this function. Any input containing shell
metacharacters may be used to trigger arbitrary command execution.</strong></p>
<p>If a <code>callback</code> function is provided, it is called with the arguments
<code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>. On error,
<code>error</code> will be an instance of <a href=""errors.html#class-error""><code>Error</code></a>. The <code>error.code</code> property will be
the exit code of the process. By convention, any exit code other than <code>0</code>
indicates an error. <code>error.signal</code> will be the signal that terminated the
process.</p>
<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the
stdout and stderr output of the child process. By default, Node.js will decode
the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option
can be used to specify the character encoding used to decode the stdout and
stderr output. If <code>encoding</code> is <code>'buffer'</code>, or an unrecognized character
encoding, <code>Buffer</code> objects will be passed to the callback instead.</p>
<pre><code class=""language-js"">const { exec } = require('node:child_process');
exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {
  if (error) {
    console.error(`exec error: ${error}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);
});
</code></pre>
<p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the signal
identified by the <code>killSignal</code> property (the default is <code>'SIGTERM'</code>) if the
child runs longer than <code>timeout</code> milliseconds.</p>
<p>Unlike the <a href=""http://man7.org/linux/man-pages/man3/exec.3.html""><code>exec(3)</code></a> POSIX system call, <code>child_process.exec()</code> does not replace
the existing process and uses a shell to execute the command.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a <code>Promise</code> for an <code>Object</code> with <code>stdout</code> and <code>stderr</code> properties. The returned
<code>ChildProcess</code> instance is attached to the <code>Promise</code> as a <code>child</code> property. In
case of an error (including any error resulting in an exit code other than 0), a
rejected promise is returned, with the same <code>error</code> object given in the
callback, but with two additional properties <code>stdout</code> and <code>stderr</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');
const exec = util.promisify(require('node:child_process').exec);

async function lsExample() {
  const { stdout, stderr } = await exec('ls');
  console.log('stdout:', stdout);
  console.error('stderr:', stderr);
}
lsExample();
</code></pre>
<p>If the <code>signal</code> option is enabled, calling <code>.abort()</code> on the corresponding
<code>AbortController</code> is similar to calling <code>.kill()</code> on the child process except
the error passed to the callback will be an <code>AbortError</code>:</p>
<pre><code class=""language-js"">const { exec } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = exec('grep ssh', { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
</code></pre>",3,37,
120,child_process,,execFile,child_process.execFile,"<p>The <code>child_process.execFile()</code> function is similar to <a href=""child_process.html#child_processexeccommand-options-callback""><code>child_process.exec()</code></a>
except that it does not spawn a shell by default. Rather, the specified
executable <code>file</code> is spawned directly as a new process making it slightly more
efficient than <a href=""child_process.html#child_processexeccommand-options-callback""><code>child_process.exec()</code></a>.</p>
<p>The same options as <a href=""child_process.html#child_processexeccommand-options-callback""><code>child_process.exec()</code></a> are supported. Since a shell is
not spawned, behaviors such as I/O redirection and file globbing are not
supported.</p>
<pre><code class=""language-js"">const { execFile } = require('node:child_process');
const child = execFile('node', ['--version'], (error, stdout, stderr) => {
  if (error) {
    throw error;
  }
  console.log(stdout);
});
</code></pre>
<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the
stdout and stderr output of the child process. By default, Node.js will decode
the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option
can be used to specify the character encoding used to decode the stdout and
stderr output. If <code>encoding</code> is <code>'buffer'</code>, or an unrecognized character
encoding, <code>Buffer</code> objects will be passed to the callback instead.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a <code>Promise</code> for an <code>Object</code> with <code>stdout</code> and <code>stderr</code> properties. The returned
<code>ChildProcess</code> instance is attached to the <code>Promise</code> as a <code>child</code> property. In
case of an error (including any error resulting in an exit code other than 0), a
rejected promise is returned, with the same <code>error</code> object given in the
callback, but with two additional properties <code>stdout</code> and <code>stderr</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');
const execFile = util.promisify(require('node:child_process').execFile);
async function getVersion() {
  const { stdout } = await execFile('node', ['--version']);
  console.log(stdout);
}
getVersion();
</code></pre>
<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this
function. Any input containing shell metacharacters may be used to trigger
arbitrary command execution.</strong></p>
<p>If the <code>signal</code> option is enabled, calling <code>.abort()</code> on the corresponding
<code>AbortController</code> is similar to calling <code>.kill()</code> on the child process except
the error passed to the callback will be an <code>AbortError</code>:</p>
<pre><code class=""language-js"">const { execFile } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = execFile('node', ['--version'], { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
</code></pre>",4,36,
121,child_process,,fork,child_process.fork,"<p>The <code>child_process.fork()</code> method is a special case of
<a href=""child_process.html#child_processspawncommand-args-options""><code>child_process.spawn()</code></a> used specifically to spawn new Node.js processes.
Like <a href=""child_process.html#child_processspawncommand-args-options""><code>child_process.spawn()</code></a>, a <a href=""child_process.html#class-childprocess""><code>ChildProcess</code></a> object is returned. The
returned <a href=""child_process.html#class-childprocess""><code>ChildProcess</code></a> will have an additional communication channel
built-in that allows messages to be passed back and forth between the parent and
child. See <a href=""child_process.html#subprocesssendmessage-sendhandle-options-callback""><code>subprocess.send()</code></a> for details.</p>
<p>Keep in mind that spawned Node.js child processes are
independent of the parent with exception of the IPC communication channel
that is established between the two. Each process has its own memory, with
their own V8 instances. Because of the additional resource allocations
required, spawning a large number of child Node.js processes is not
recommended.</p>
<p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the
<a href=""process.html#processexecpath""><code>process.execPath</code></a> of the parent process. The <code>execPath</code> property in the
<code>options</code> object allows for an alternative execution path to be used.</p>
<p>Node.js processes launched with a custom <code>execPath</code> will communicate with the
parent process using the file descriptor (fd) identified using the
environment variable <code>NODE_CHANNEL_FD</code> on the child process.</p>
<p>Unlike the <a href=""http://man7.org/linux/man-pages/man2/fork.2.html""><code>fork(2)</code></a> POSIX system call, <code>child_process.fork()</code> does not clone the
current process.</p>
<p>The <code>shell</code> option available in <a href=""child_process.html#child_processspawncommand-args-options""><code>child_process.spawn()</code></a> is not supported by
<code>child_process.fork()</code> and will be ignored if set.</p>
<p>If the <code>signal</code> option is enabled, calling <code>.abort()</code> on the corresponding
<code>AbortController</code> is similar to calling <code>.kill()</code> on the child process except
the error passed to the callback will be an <code>AbortError</code>:</p>
<pre><code class=""language-js"">if (process.argv[2] === 'child') {
  setTimeout(() => {
    console.log(`Hello from ${process.argv[2]}!`);
  }, 1_000);
} else {
  const { fork } = require('node:child_process');
  const controller = new AbortController();
  const { signal } = controller;
  const child = fork(__filename, ['child'], { signal });
  child.on('error', (err) => {
    // This will be called with err being an AbortError if the controller aborts
  });
  controller.abort(); // Stops the child process
}
</code></pre>",3,35,
122,child_process,,spawn,child_process.spawn,"<p>The <code>child_process.spawn()</code> method spawns a new process using the given
<code>command</code>, with command-line arguments in <code>args</code>. If omitted, <code>args</code> defaults
to an empty array.</p>
<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this
function. Any input containing shell metacharacters may be used to trigger
arbitrary command execution.</strong></p>
<p>A third argument may be used to specify additional options, with these defaults:</p>
<pre><code class=""language-js"">const defaults = {
  cwd: undefined,
  env: process.env,
};
</code></pre>
<p>Use <code>cwd</code> to specify the working directory from which the process is spawned.
If not given, the default is to inherit the current working directory. If given,
but the path does not exist, the child process emits an <code>ENOENT</code> error
and exits immediately. <code>ENOENT</code> is also emitted when the command
does not exist.</p>
<p>Use <code>env</code> to specify environment variables that will be visible to the new
process, the default is <a href=""process.html#processenv""><code>process.env</code></a>.</p>
<p><code>undefined</code> values in <code>env</code> will be ignored.</p>
<p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the
exit code:</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
</code></pre>
<p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');
const ps = spawn('ps', ['ax']);
const grep = spawn('grep', ['ssh']);

ps.stdout.on('data', (data) => {
  grep.stdin.write(data);
});

ps.stderr.on('data', (data) => {
  console.error(`ps stderr: ${data}`);
});

ps.on('close', (code) => {
  if (code !== 0) {
    console.log(`ps process exited with code ${code}`);
  }
  grep.stdin.end();
});

grep.stdout.on('data', (data) => {
  console.log(data.toString());
});

grep.stderr.on('data', (data) => {
  console.error(`grep stderr: ${data}`);
});

grep.on('close', (code) => {
  if (code !== 0) {
    console.log(`grep process exited with code ${code}`);
  }
});
</code></pre>
<p>Example of checking for failed <code>spawn</code>:</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');
const subprocess = spawn('bad_command');

subprocess.on('error', (err) => {
  console.error('Failed to start subprocess.');
});
</code></pre>
<p>Certain platforms (macOS, Linux) will use the value of <code>argv[0]</code> for the process
title while others (Windows, SunOS) will use <code>command</code>.</p>
<p>Node.js overwrites <code>argv[0]</code> with <code>process.execPath</code> on startup, so
<code>process.argv[0]</code> in a Node.js child process will not match the <code>argv0</code>
parameter passed to <code>spawn</code> from the parent. Retrieve it with the
<code>process.argv0</code> property instead.</p>
<p>If the <code>signal</code> option is enabled, calling <code>.abort()</code> on the corresponding
<code>AbortController</code> is similar to calling <code>.kill()</code> on the child process except
the error passed to the callback will be an <code>AbortError</code>:</p>
<pre><code class=""language-js"">const { spawn } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const grep = spawn('grep', ['ssh'], { signal });
grep.on('error', (err) => {
  // This will be called with err being an AbortError if the controller aborts
});
controller.abort(); // Stops the child process
</code></pre>",3,35,
123,child_process,,execFileSync,child_process.execFileSync,"<p>The <code>child_process.execFileSync()</code> method is generally identical to
<a href=""child_process.html#child_processexecfilefile-args-options-callback""><code>child_process.execFile()</code></a> with the exception that the method will not
return until the child process has fully closed. When a timeout has been
encountered and <code>killSignal</code> is sent, the method won't return until the process
has completely exited.</p>
<p>If the child process intercepts and handles the <code>SIGTERM</code> signal and
does not exit, the parent process will still wait until the child process has
exited.</p>
<p>If the process times out or has a non-zero exit code, this method will throw an
<a href=""errors.html#class-error""><code>Error</code></a> that will include the full result of the underlying
<a href=""child_process.html#child_processspawnsynccommand-args-options""><code>child_process.spawnSync()</code></a>.</p>
<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this
function. Any input containing shell metacharacters may be used to trigger
arbitrary command execution.</strong></p>",3,36,
124,child_process,,execSync,child_process.execSync,"<p>The <code>child_process.execSync()</code> method is generally identical to
<a href=""child_process.html#child_processexeccommand-options-callback""><code>child_process.exec()</code></a> with the exception that the method will not return
until the child process has fully closed. When a timeout has been encountered
and <code>killSignal</code> is sent, the method won't return until the process has
completely exited. If the child process intercepts and handles the <code>SIGTERM</code>
signal and doesn't exit, the parent process will wait until the child process
has exited.</p>
<p>If the process times out or has a non-zero exit code, this method will throw.
The <a href=""errors.html#class-error""><code>Error</code></a> object will contain the entire result from
<a href=""child_process.html#child_processspawnsynccommand-args-options""><code>child_process.spawnSync()</code></a>.</p>
<p><strong>Never pass unsanitized user input to this function. Any input containing shell
metacharacters may be used to trigger arbitrary command execution.</strong></p>",2,37,
125,child_process,,spawnSync,child_process.spawnSync,"<p>The <code>child_process.spawnSync()</code> method is generally identical to
<a href=""child_process.html#child_processspawncommand-args-options""><code>child_process.spawn()</code></a> with the exception that the function will not return
until the child process has fully closed. When a timeout has been encountered
and <code>killSignal</code> is sent, the method won't return until the process has
completely exited. If the process intercepts and handles the <code>SIGTERM</code> signal
and doesn't exit, the parent process will wait until the child process has
exited.</p>
<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this
function. Any input containing shell metacharacters may be used to trigger
arbitrary command execution.</strong></p>",3,35,
126,cluster,,disconnect,cluster.disconnect,"<p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p>
<p>When they are disconnected all internal handles will be closed, allowing the
primary process to die gracefully if no other event is waiting.</p>
<p>The method takes an optional callback argument which will be called when
finished.</p>
<p>This can only be called from the primary process.</p>",1,Others,
127,cluster,,fork,cluster.fork,"<p>Spawn a new worker process.</p>
<p>This can only be called from the primary process.</p>",1,35,
128,cluster,,setupMaster,cluster.setupMaster,"<p>Deprecated alias for <a href=""cluster.html#clustersetupprimarysettings""><code>.setupPrimary()</code></a>.</p>",0,Others,
129,cluster,,setupPrimary,cluster.setupPrimary,"<p><code>setupPrimary</code> is used to change the default 'fork' behavior. Once called,
the settings will be present in <code>cluster.settings</code>.</p>
<p>Any settings changes only affect future calls to <a href=""cluster.html#clusterforkenv""><code>.fork()</code></a> and have no
effect on workers that are already running.</p>
<p>The only attribute of a worker that cannot be set via <code>.setupPrimary()</code> is
the <code>env</code> passed to <a href=""cluster.html#clusterforkenv""><code>.fork()</code></a>.</p>
<p>The defaults above apply to the first call only; the defaults for later
calls are the current values at the time of <code>cluster.setupPrimary()</code> is called.</p>
<pre><code class=""language-mjs"">import cluster from 'node:cluster';

cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true,
});
cluster.fork(); // https worker
cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'http'],
});
cluster.fork(); // http worker
</code></pre>
<pre><code class=""language-cjs"">const cluster = require('node:cluster');

cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true,
});
cluster.fork(); // https worker
cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'http'],
});
cluster.fork(); // http worker
</code></pre>
<p>This can only be called from the primary process.</p>",1,Others,
130,worker,,disconnect,worker.disconnect,"<p>In a worker, this function will close all servers, wait for the <code>'close'</code> event
on those servers, and then disconnect the IPC channel.</p>
<p>In the primary, an internal message is sent to the worker causing it to call
<code>.disconnect()</code> on itself.</p>
<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>
<p>After a server is closed, it will no longer accept new connections,
but connections may be accepted by any other listening worker. Existing
connections will be allowed to close as usual. When no more connections exist,
see <a href=""net.html#event-close""><code>server.close()</code></a>, the IPC channel to the worker will close allowing it
to die gracefully.</p>
<p>The above applies <em>only</em> to server connections, client connections are not
automatically closed by workers, and disconnect does not wait for them to close
before exiting.</p>
<p>In a worker, <code>process.disconnect</code> exists, but it is not this function;
it is <a href=""child_process.html#subprocessdisconnect""><code>disconnect()</code></a>.</p>
<p>Because long living server connections may block workers from disconnecting, it
may be useful to send a message, so application specific actions may be taken to
close them. It also may be useful to implement a timeout, killing a worker if
the <code>'disconnect'</code> event has not been emitted after some time.</p>
<pre><code class=""language-js"">if (cluster.isPrimary) {
  const worker = cluster.fork();
  let timeout;

  worker.on('listening', (address) => {
    worker.send('shutdown');
    worker.disconnect();
    timeout = setTimeout(() => {
      worker.kill();
    }, 2000);
  });

  worker.on('disconnect', () => {
    clearTimeout(timeout);
  });

} else if (cluster.isWorker) {
  const net = require('node:net');
  const server = net.createServer((socket) => {
    // Connections never end
  });

  server.listen(8000);

  process.on('message', (msg) => {
    if (msg === 'shutdown') {
      // Initiate graceful close of any connections to server
    }
  });
}
</code></pre>",0,Others,
131,worker,,isConnected,worker.isConnected,"<p>This function returns <code>true</code> if the worker is connected to its primary via its
IPC channel, <code>false</code> otherwise. A worker is connected to its primary after it
has been created. It is disconnected after the <code>'disconnect'</code> event is emitted.</p>",0,Others,
132,worker,,isDead,worker.isDead,"<p>This function returns <code>true</code> if the worker's process has terminated (either
because of exiting or being signaled). Otherwise, it returns <code>false</code>.</p>
<pre><code class=""language-mjs"">import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

const numCPUs = availableParallelism();

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &#x3C; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('fork', (worker) => {
    console.log('worker is dead:', worker.isDead());
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log('worker is dead:', worker.isDead());
  });
} else {
  // Workers can share any TCP connection. In this case, it is an HTTP server.
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end(`Current process\n ${process.pid}`);
    process.kill(process.pid);
  }).listen(8000);
}
</code></pre>
<pre><code class=""language-cjs"">const cluster = require('node:cluster');
const http = require('node:http');
const numCPUs = require('node:os').availableParallelism();
const process = require('node:process');

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &#x3C; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('fork', (worker) => {
    console.log('worker is dead:', worker.isDead());
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log('worker is dead:', worker.isDead());
  });
} else {
  // Workers can share any TCP connection. In this case, it is an HTTP server.
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end(`Current process\n ${process.pid}`);
    process.kill(process.pid);
  }).listen(8000);
}
</code></pre>",0,Others,
133,worker,,kill,worker.kill,"<p>This function will kill the worker. In the primary worker, it does this by
disconnecting the <code>worker.process</code>, and once disconnected, killing with
<code>signal</code>. In the worker, it does it by killing the process with <code>signal</code>.</p>
<p>The <code>kill()</code> function kills the worker process without waiting for a graceful
disconnect, it has the same behavior as <code>worker.process.kill()</code>.</p>
<p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p>
<p>In a worker, <code>process.kill()</code> exists, but it is not this function;
it is <a href=""process.html#processkillpid-signal""><code>kill()</code></a>.</p>",1,Others,
134,worker,,send,worker.send,"<p>Send a message to a worker or primary, optionally with a handle.</p>
<p>In the primary, this sends a message to a specific worker. It is identical to
<a href=""child_process.html#subprocesssendmessage-sendhandle-options-callback""><code>ChildProcess.send()</code></a>.</p>
<p>In a worker, this sends a message to the primary. It is identical to
<code>process.send()</code>.</p>
<p>This example will echo back all messages from the primary:</p>
<pre><code class=""language-js"">if (cluster.isPrimary) {
  const worker = cluster.fork();
  worker.send('hi there');

} else if (cluster.isWorker) {
  process.on('message', (msg) => {
    process.send(msg);
  });
}
</code></pre>",4,Others,
135,console,,assert,console.assert,"<p><code>console.assert()</code> writes a message if <code>value</code> is <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Falsy"">falsy</a> or omitted. It only
writes a message and does not otherwise affect execution. The output always
starts with <code>""Assertion failed""</code>. If provided, <code>message</code> is formatted using
<a href=""util.html#utilformatformat-args""><code>util.format()</code></a>.</p>
<p>If <code>value</code> is <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Truthy"">truthy</a>, nothing happens.</p>
<pre><code class=""language-js"">console.assert(true, 'does nothing');

console.assert(false, 'Whoops %s work', 'didn\'t');
// Assertion failed: Whoops didn't work

console.assert();
// Assertion failed
</code></pre>",2,Others,
136,console,,clear,console.clear,"<p>When <code>stdout</code> is a TTY, calling <code>console.clear()</code> will attempt to clear the
TTY. When <code>stdout</code> is not a TTY, this method does nothing.</p>
<p>The specific operation of <code>console.clear()</code> can vary across operating systems
and terminal types. For most Linux operating systems, <code>console.clear()</code>
operates similarly to the <code>clear</code> shell command. On Windows, <code>console.clear()</code>
will clear only the output in the current terminal viewport for the Node.js
binary.</p>",0,Others,
137,console,,count,console.count,"<p>Maintains an internal counter specific to <code>label</code> and outputs to <code>stdout</code> the
number of times <code>console.count()</code> has been called with the given <code>label</code>.</p>
<!-- eslint-skip -->
<pre><code class=""language-js"">> console.count()
default: 1
undefined
> console.count('default')
default: 2
undefined
> console.count('abc')
abc: 1
undefined
> console.count('xyz')
xyz: 1
undefined
> console.count('abc')
abc: 2
undefined
> console.count()
default: 3
undefined
>
</code></pre>",1,Others,
138,console,,countReset,console.countReset,"<p>Resets the internal counter specific to <code>label</code>.</p>
<!-- eslint-skip -->
<pre><code class=""language-js"">> console.count('abc');
abc: 1
undefined
> console.countReset('abc');
undefined
> console.count('abc');
abc: 1
undefined
>
</code></pre>",1,Others,
139,console,,debug,console.debug,"<p>The <code>console.debug()</code> function is an alias for <a href=""console.html#consolelogdata-args""><code>console.log()</code></a>.</p>",2,Others,
140,console,,dir,console.dir,"<p>Uses <a href=""util.html#utilinspectobject-options""><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>.
This function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>.</p>",2,Others,
141,console,,dirxml,console.dirxml,"<p>This method calls <code>console.log()</code> passing it the arguments received.
This method does not produce any XML formatting.</p>",1,Others,
142,console,,error,console.error,"<p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <a href=""http://man7.org/linux/man-pages/man3/printf.3.html""><code>printf(3)</code></a> (the arguments are all passed to
<a href=""util.html#utilformatformat-args""><code>util.format()</code></a>).</p>
<pre><code class=""language-js"">const code = 5;
console.error('error #%d', code);
// Prints: error #5, to stderr
console.error('error', code);
// Prints: error 5, to stderr
</code></pre>
<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then
<a href=""util.html#utilinspectobject-options""><code>util.inspect()</code></a> is called on each argument and the resulting string
values are concatenated. See <a href=""util.html#utilformatformat-args""><code>util.format()</code></a> for more information.</p>",2,Others,
143,console,,group,console.group,"<p>Increases indentation of subsequent lines by spaces for <code>groupIndentation</code>
length.</p>
<p>If one or more <code>label</code>s are provided, those are printed first without the
additional indentation.</p>",1,Others,
144,console,,groupCollapsed,console.groupCollapsed,"<p>An alias for <a href=""console.html#consolegrouplabel""><code>console.group()</code></a>.</p>",0,Others,
145,console,,groupEnd,console.groupEnd,"<p>Decreases indentation of subsequent lines by spaces for <code>groupIndentation</code>
length.</p>",0,Others,
146,console,,info,console.info,"<p>The <code>console.info()</code> function is an alias for <a href=""console.html#consolelogdata-args""><code>console.log()</code></a>.</p>",2,Others,
147,console,,log,console.log,"<p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <a href=""http://man7.org/linux/man-pages/man3/printf.3.html""><code>printf(3)</code></a> (the arguments are all passed to
<a href=""util.html#utilformatformat-args""><code>util.format()</code></a>).</p>
<pre><code class=""language-js"">const count = 5;
console.log('count: %d', count);
// Prints: count: 5, to stdout
console.log('count:', count);
// Prints: count: 5, to stdout
</code></pre>
<p>See <a href=""util.html#utilformatformat-args""><code>util.format()</code></a> for more information.</p>",2,Others,
148,console,,table,console.table,"<p>Try to construct a table with the columns of the properties of <code>tabularData</code>
(or use <code>properties</code>) and rows of <code>tabularData</code> and log it. Falls back to just
logging the argument if it can't be parsed as tabular.</p>
<pre><code class=""language-js"">// These can't be parsed as tabular data
console.table(Symbol());
// Symbol()

console.table(undefined);
// undefined

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);
// ┌─────────┬─────┬─────┐
// │ (index) │ a   │ b   │
// ├─────────┼─────┼─────┤
// │ 0       │ 1   │ 'Y' │
// │ 1       │ 'Z' │ 2   │
// └─────────┴─────┴─────┘

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);
// ┌─────────┬─────┐
// │ (index) │ a   │
// ├─────────┼─────┤
// │ 0       │ 1   │
// │ 1       │ 'Z' │
// └─────────┴─────┘
</code></pre>",2,Others,
149,console,,time,console.time,"<p>Starts a timer that can be used to compute the duration of an operation. Timers
are identified by a unique <code>label</code>. Use the same <code>label</code> when calling
<a href=""console.html#consoletimeendlabel""><code>console.timeEnd()</code></a> to stop the timer and output the elapsed time in
suitable time units to <code>stdout</code>. For example, if the elapsed
time is 3869ms, <code>console.timeEnd()</code> displays ""3.869s"".</p>",1,Others,
150,console,,timeEnd,console.timeEnd,"<p>Stops a timer that was previously started by calling <a href=""console.html#consoletimelabel""><code>console.time()</code></a> and
prints the result to <code>stdout</code>:</p>
<pre><code class=""language-js"">console.time('bunch-of-stuff');
// Do a bunch of stuff.
console.timeEnd('bunch-of-stuff');
// Prints: bunch-of-stuff: 225.438ms
</code></pre>",1,Others,
151,console,,timeLog,console.timeLog,"<p>For a timer that was previously started by calling <a href=""console.html#consoletimelabel""><code>console.time()</code></a>, prints
the elapsed time and other <code>data</code> arguments to <code>stdout</code>:</p>
<pre><code class=""language-js"">console.time('process');
const value = expensiveProcess1(); // Returns 42
console.timeLog('process', value);
// Prints ""process: 365.227ms 42"".
doExpensiveProcess2(value);
console.timeEnd('process');
</code></pre>",2,Others,
152,console,,trace,console.trace,"<p>Prints to <code>stderr</code> the string <code>'Trace: '</code>, followed by the <a href=""util.html#utilformatformat-args""><code>util.format()</code></a>
formatted message and stack trace to the current position in the code.</p>
<pre><code class=""language-js"">console.trace('Show me');
// Prints: (stack trace will vary based on where trace is called)
//  Trace: Show me
//    at repl:2:9
//    at REPLServer.defaultEval (repl.js:248:27)
//    at bound (domain.js:287:14)
//    at REPLServer.runBound [as eval] (domain.js:300:12)
//    at REPLServer.&#x3C;anonymous> (repl.js:412:12)
//    at emitOne (events.js:82:20)
//    at REPLServer.emit (events.js:169:7)
//    at REPLServer.Interface._onLine (readline.js:210:10)
//    at REPLServer.Interface._line (readline.js:549:8)
//    at REPLServer.Interface._ttyWrite (readline.js:826:14)
</code></pre>",2,Others,
153,console,,warn,console.warn,"<p>The <code>console.warn()</code> function is an alias for <a href=""console.html#consoleerrordata-args""><code>console.error()</code></a>.</p>",2,Others,
154,console,,profile,console.profile,"<p>This method does not display anything unless used in the inspector. The
<code>console.profile()</code> method starts a JavaScript CPU profile with an optional
label until <a href=""console.html#consoleprofileendlabel""><code>console.profileEnd()</code></a> is called. The profile is then added to
the <strong>Profile</strong> panel of the inspector.</p>
<pre><code class=""language-js"">console.profile('MyLabel');
// Some code
console.profileEnd('MyLabel');
// Adds the profile 'MyLabel' to the Profiles panel of the inspector.
</code></pre>",1,Others,
155,console,,profileEnd,console.profileEnd,"<p>This method does not display anything unless used in the inspector. Stops the
current JavaScript CPU profiling session if one has been started and prints
the report to the <strong>Profiles</strong> panel of the inspector. See
<a href=""console.html#consoleprofilelabel""><code>console.profile()</code></a> for an example.</p>
<p>If this method is called without a label, the most recently started profile is
stopped.</p>",1,Others,
156,console,,timeStamp,console.timeStamp,"<p>This method does not display anything unless used in the inspector. The
<code>console.timeStamp()</code> method adds an event with the label <code>'label'</code> to the
<strong>Timeline</strong> panel of the inspector.</p>",1,Others,
157,cipher,,final,cipher.final,"<p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no
longer be used to encrypt data. Attempts to call <code>cipher.final()</code> more than
once will result in an error being thrown.</p>",1,Others,
158,cipher,,getAuthTag,cipher.getAuthTag,"<p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has
been completed using the <a href=""crypto.html#cipherfinaloutputencoding""><code>cipher.final()</code></a> method.</p>
<p>If the <code>authTagLength</code> option was set during the <code>cipher</code> instance's creation,
this function will return exactly <code>authTagLength</code> bytes.</p>",0,Others,
159,cipher,,setAAD,cipher.setAAD,"<p>When using an authenticated encryption mode (<code>GCM</code>, <code>CCM</code>, <code>OCB</code>, and
<code>chacha20-poly1305</code> are
currently supported), the <code>cipher.setAAD()</code> method sets the value used for the
<em>additional authenticated data</em> (AAD) input parameter.</p>
<p>The <code>plaintextLength</code> option is optional for <code>GCM</code> and <code>OCB</code>. When using <code>CCM</code>,
the <code>plaintextLength</code> option must be specified and its value must match the
length of the plaintext in bytes. See <a href=""crypto.html#ccm-mode"">CCM mode</a>.</p>
<p>The <code>cipher.setAAD()</code> method must be called before <a href=""crypto.html#cipherupdatedata-inputencoding-outputencoding""><code>cipher.update()</code></a>.</p>",2,Others,
160,cipher,,setAutoPadding,cipher.setAutoPadding,"<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically
add padding to the input data to the appropriate block size. To disable the
default padding call <code>cipher.setAutoPadding(false)</code>.</p>
<p>When <code>autoPadding</code> is <code>false</code>, the length of the entire input data must be a
multiple of the cipher's block size or <a href=""crypto.html#cipherfinaloutputencoding""><code>cipher.final()</code></a> will throw an error.
Disabling automatic padding is useful for non-standard padding, for instance
using <code>0x0</code> instead of PKCS padding.</p>
<p>The <code>cipher.setAutoPadding()</code> method must be called before
<a href=""crypto.html#cipherfinaloutputencoding""><code>cipher.final()</code></a>.</p>",1,Others,
161,cipher,,update,cipher.update,"<p>Updates the cipher with <code>data</code>. If the <code>inputEncoding</code> argument is given,
the <code>data</code>
argument is a string using the specified encoding. If the <code>inputEncoding</code>
argument is not given, <code>data</code> must be a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>. If <code>data</code> is a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>, then
<code>inputEncoding</code> is ignored.</p>
<p>The <code>outputEncoding</code> specifies the output format of the enciphered
data. If the <code>outputEncoding</code>
is specified, a string using the specified encoding is returned. If no
<code>outputEncoding</code> is provided, a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>
<p>The <code>cipher.update()</code> method can be called multiple times with new data until
<a href=""crypto.html#cipherfinaloutputencoding""><code>cipher.final()</code></a> is called. Calling <code>cipher.update()</code> after
<a href=""crypto.html#cipherfinaloutputencoding""><code>cipher.final()</code></a> will result in an error being thrown.</p>",3,33,
162,decipher,,final,decipher.final,"<p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can
no longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more
than once will result in an error being thrown.</p>",1,Others,
163,decipher,,setAAD,decipher.setAAD,"<p>When using an authenticated encryption mode (<code>GCM</code>, <code>CCM</code>, <code>OCB</code>, and
<code>chacha20-poly1305</code> are
currently supported), the <code>decipher.setAAD()</code> method sets the value used for the
<em>additional authenticated data</em> (AAD) input parameter.</p>
<p>The <code>options</code> argument is optional for <code>GCM</code>. When using <code>CCM</code>, the
<code>plaintextLength</code> option must be specified and its value must match the length
of the ciphertext in bytes. See <a href=""crypto.html#ccm-mode"">CCM mode</a>.</p>
<p>The <code>decipher.setAAD()</code> method must be called before <a href=""crypto.html#decipherupdatedata-inputencoding-outputencoding""><code>decipher.update()</code></a>.</p>
<p>When passing a string as the <code>buffer</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>",2,Others,
164,decipher,,setAuthTag,decipher.setAuthTag,"<p>When using an authenticated encryption mode (<code>GCM</code>, <code>CCM</code>, <code>OCB</code>, and
<code>chacha20-poly1305</code> are
currently supported), the <code>decipher.setAuthTag()</code> method is used to pass in the
received <em>authentication tag</em>. If no tag is provided, or if the cipher text
has been tampered with, <a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a> will throw, indicating that the
cipher text should be discarded due to failed authentication. If the tag length
is invalid according to <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf"">NIST SP 800-38D</a> or does not match the value of the
<code>authTagLength</code> option, <code>decipher.setAuthTag()</code> will throw an error.</p>
<p>The <code>decipher.setAuthTag()</code> method must be called before <a href=""crypto.html#decipherupdatedata-inputencoding-outputencoding""><code>decipher.update()</code></a>
for <code>CCM</code> mode or before <a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a> for <code>GCM</code> and <code>OCB</code> modes and
<code>chacha20-poly1305</code>.
<code>decipher.setAuthTag()</code> can only be called once.</p>
<p>When passing a string as the authentication tag, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>",2,Others,
165,decipher,,setAutoPadding,decipher.setAutoPadding,"<p>When data has been encrypted without standard block padding, calling
<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent
<a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a> from checking for and removing padding.</p>
<p>Turning auto padding off will only work if the input data's length is a
multiple of the ciphers block size.</p>
<p>The <code>decipher.setAutoPadding()</code> method must be called before
<a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a>.</p>",1,Others,
166,decipher,,update,decipher.update,"<p>Updates the decipher with <code>data</code>. If the <code>inputEncoding</code> argument is given,
the <code>data</code>
argument is a string using the specified encoding. If the <code>inputEncoding</code>
argument is not given, <code>data</code> must be a <a href=""buffer.html""><code>Buffer</code></a>. If <code>data</code> is a
<a href=""buffer.html""><code>Buffer</code></a> then <code>inputEncoding</code> is ignored.</p>
<p>The <code>outputEncoding</code> specifies the output format of the enciphered
data. If the <code>outputEncoding</code>
is specified, a string using the specified encoding is returned. If no
<code>outputEncoding</code> is provided, a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>
<p>The <code>decipher.update()</code> method can be called multiple times with new data until
<a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a> is called. Calling <code>decipher.update()</code> after
<a href=""crypto.html#decipherfinaloutputencoding""><code>decipher.final()</code></a> will result in an error being thrown.</p>",3,34,
167,diffieHellman,,computeSecret,diffieHellman.computeSecret,"<p>Computes the shared secret using <code>otherPublicKey</code> as the other
party's public key and returns the computed shared secret. The supplied
key is interpreted using the specified <code>inputEncoding</code>, and secret is
encoded using specified <code>outputEncoding</code>.
If the <code>inputEncoding</code> is not
provided, <code>otherPublicKey</code> is expected to be a <a href=""buffer.html""><code>Buffer</code></a>,
<code>TypedArray</code>, or <code>DataView</code>.</p>
<p>If <code>outputEncoding</code> is given a string is returned; otherwise, a
<a href=""buffer.html""><code>Buffer</code></a> is returned.</p>",3,Others,
168,diffieHellman,,generateKeys,diffieHellman.generateKeys,"<p>Generates private and public Diffie-Hellman key values unless they have been
generated or computed already, and returns
the public key in the specified <code>encoding</code>. This key should be
transferred to the other party.
If <code>encoding</code> is provided a string is returned; otherwise a
<a href=""buffer.html""><code>Buffer</code></a> is returned.</p>
<p>This function is a thin wrapper around <a href=""https://www.openssl.org/docs/man3.0/man3/DH_generate_key.html""><code>DH_generate_key()</code></a>. In particular,
once a private key has been generated or set, calling this function only updates
the public key but does not generate a new private key.</p>",1,Others,
169,diffieHellman,,getGenerator,diffieHellman.getGenerator,"<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>.
If <code>encoding</code> is provided a string is
returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>",1,Others,
170,diffieHellman,,getPrime,diffieHellman.getPrime,"<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>.
If <code>encoding</code> is provided a string is
returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>",1,Others,
171,diffieHellman,,getPrivateKey,diffieHellman.getPrivateKey,"<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>.
If <code>encoding</code> is provided a
string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>",1,Others,
172,diffieHellman,,getPublicKey,diffieHellman.getPublicKey,"<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>.
If <code>encoding</code> is provided a
string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>",1,Others,
173,diffieHellman,,setPrivateKey,diffieHellman.setPrivateKey,"<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided,
<code>privateKey</code> is expected
to be a string. If no <code>encoding</code> is provided, <code>privateKey</code> is expected
to be a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>.</p>
<p>This function does not automatically compute the associated public key. Either
<a href=""crypto.html#diffiehellmansetpublickeypublickey-encoding""><code>diffieHellman.setPublicKey()</code></a> or <a href=""crypto.html#diffiehellmangeneratekeysencoding""><code>diffieHellman.generateKeys()</code></a> can be
used to manually provide the public key or to automatically derive it.</p>",2,Others,
174,diffieHellman,,setPublicKey,diffieHellman.setPublicKey,"<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided,
<code>publicKey</code> is expected
to be a string. If no <code>encoding</code> is provided, <code>publicKey</code> is expected
to be a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>.</p>",2,Others,
175,ecdh,,computeSecret,ecdh.computeSecret,"<p>Computes the shared secret using <code>otherPublicKey</code> as the other
party's public key and returns the computed shared secret. The supplied
key is interpreted using specified <code>inputEncoding</code>, and the returned secret
is encoded using the specified <code>outputEncoding</code>.
If the <code>inputEncoding</code> is not
provided, <code>otherPublicKey</code> is expected to be a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>.</p>
<p>If <code>outputEncoding</code> is given a string will be returned; otherwise a
<a href=""buffer.html""><code>Buffer</code></a> is returned.</p>
<p><code>ecdh.computeSecret</code> will throw an
<code>ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY</code> error when <code>otherPublicKey</code>
lies outside of the elliptic curve. Since <code>otherPublicKey</code> is
usually supplied from a remote user over an insecure network,
be sure to handle this exception accordingly.</p>",3,,
176,ecdh,,generateKeys,ecdh.generateKeys,"<p>Generates private and public EC Diffie-Hellman key values, and returns
the public key in the specified <code>format</code> and <code>encoding</code>. This key should be
transferred to the other party.</p>
<p>The <code>format</code> argument specifies point encoding and can be <code>'compressed'</code> or
<code>'uncompressed'</code>. If <code>format</code> is not specified, the point will be returned in
<code>'uncompressed'</code> format.</p>
<p>If <code>encoding</code> is provided a string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a>
is returned.</p>",2,,
177,ecdh,,getPrivateKey,ecdh.getPrivateKey,"<p>If <code>encoding</code> is specified, a string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is
returned.</p>",1,,
178,ecdh,,getPublicKey,ecdh.getPublicKey,"<p>The <code>format</code> argument specifies point encoding and can be <code>'compressed'</code> or
<code>'uncompressed'</code>. If <code>format</code> is not specified the point will be returned in
<code>'uncompressed'</code> format.</p>
<p>If <code>encoding</code> is specified, a string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is
returned.</p>",2,,
179,ecdh,,setPrivateKey,ecdh.setPrivateKey,"<p>Sets the EC Diffie-Hellman private key.
If <code>encoding</code> is provided, <code>privateKey</code> is expected
to be a string; otherwise <code>privateKey</code> is expected to be a <a href=""buffer.html""><code>Buffer</code></a>,
<code>TypedArray</code>, or <code>DataView</code>.</p>
<p>If <code>privateKey</code> is not valid for the curve specified when the <code>ECDH</code> object was
created, an error is thrown. Upon setting the private key, the associated
public point (key) is also generated and set in the <code>ECDH</code> object.</p>",2,,
180,ecdh,,setPublicKey,ecdh.setPublicKey,"<p>Sets the EC Diffie-Hellman public key.
If <code>encoding</code> is provided <code>publicKey</code> is expected to
be a string; otherwise a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>
<p>There is not normally a reason to call this method because <code>ECDH</code>
only requires a private key and the other party's public key to compute the
shared secret. Typically either <a href=""crypto.html#ecdhgeneratekeysencoding-format""><code>ecdh.generateKeys()</code></a> or
<a href=""crypto.html#ecdhsetprivatekeyprivatekey-encoding""><code>ecdh.setPrivateKey()</code></a> will be called. The <a href=""crypto.html#ecdhsetprivatekeyprivatekey-encoding""><code>ecdh.setPrivateKey()</code></a> method
attempts to generate the public point/key associated with the private key being
set.</p>
<p>Example (obtaining a shared secret):</p>
<pre><code class=""language-mjs"">const {
  createECDH,
  createHash,
} = await import('node:crypto');

const alice = createECDH('secp256k1');
const bob = createECDH('secp256k1');

// This is a shortcut way of specifying one of Alice's previous private
// keys. It would be unwise to use such a predictable private key in a real
// application.
alice.setPrivateKey(
  createHash('sha256').update('alice', 'utf8').digest(),
);

// Bob uses a newly generated cryptographically strong
// pseudorandom key pair
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

// aliceSecret and bobSecret should be the same shared secret value
console.log(aliceSecret === bobSecret);
</code></pre>
<pre><code class=""language-cjs"">const {
  createECDH,
  createHash,
} = require('node:crypto');

const alice = createECDH('secp256k1');
const bob = createECDH('secp256k1');

// This is a shortcut way of specifying one of Alice's previous private
// keys. It would be unwise to use such a predictable private key in a real
// application.
alice.setPrivateKey(
  createHash('sha256').update('alice', 'utf8').digest(),
);

// Bob uses a newly generated cryptographically strong
// pseudorandom key pair
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

// aliceSecret and bobSecret should be the same shared secret value
console.log(aliceSecret === bobSecret);
</code></pre>",2,,
181,hash,,copy,hash.copy,"<p>Creates a new <code>Hash</code> object that contains a deep copy of the internal state
of the current <code>Hash</code> object.</p>
<p>The optional <code>options</code> argument controls stream behavior. For XOF hash
functions such as <code>'shake256'</code>, the <code>outputLength</code> option can be used to
specify the desired output length in bytes.</p>
<p>An error is thrown when an attempt is made to copy the <code>Hash</code> object after
its <a href=""crypto.html#hashdigestencoding""><code>hash.digest()</code></a> method has been called.</p>
<pre><code class=""language-mjs"">// Calculate a rolling hash.
const {
  createHash,
} = await import('node:crypto');

const hash = createHash('sha256');

hash.update('one');
console.log(hash.copy().digest('hex'));

hash.update('two');
console.log(hash.copy().digest('hex'));

hash.update('three');
console.log(hash.copy().digest('hex'));

// Etc.
</code></pre>
<pre><code class=""language-cjs"">// Calculate a rolling hash.
const {
  createHash,
} = require('node:crypto');

const hash = createHash('sha256');

hash.update('one');
console.log(hash.copy().digest('hex'));

hash.update('two');
console.log(hash.copy().digest('hex'));

hash.update('three');
console.log(hash.copy().digest('hex'));

// Etc.
</code></pre>",1,28,
182,hash,,digest,hash.digest,"<p>Calculates the digest of all of the data passed to be hashed (using the
<a href=""crypto.html#hashupdatedata-inputencoding""><code>hash.update()</code></a> method).
If <code>encoding</code> is provided a string will be returned; otherwise
a <a href=""buffer.html""><code>Buffer</code></a> is returned.</p>
<p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been
called. Multiple calls will cause an error to be thrown.</p>",1,Others,
183,hash,,update,hash.update,"<p>Updates the hash content with the given <code>data</code>, the encoding of which
is given in <code>inputEncoding</code>.
If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>",2,33,
184,hmac,,digest,hmac.digest,"<p>Calculates the HMAC digest of all of the data passed using <a href=""crypto.html#hmacupdatedata-inputencoding""><code>hmac.update()</code></a>.
If <code>encoding</code> is
provided a string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a> is returned;</p>
<p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been
called. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p>",1,Others,
185,hmac,,update,hmac.update,"<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which
is given in <code>inputEncoding</code>.
If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>",2,33,
186,keyObject,,export,keyObject.export,"<p>For symmetric keys, the following encoding options can be used:</p>
<ul>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'buffer'</code> (default) or <code>'jwk'</code>.</li>
</ul>
<p>For public keys, the following encoding options can be used:</p>
<ul>
<li><code>type</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be one of <code>'pkcs1'</code> (RSA only) or <code>'spki'</code>.</li>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pem'</code>, <code>'der'</code>, or <code>'jwk'</code>.</li>
</ul>
<p>For private keys, the following encoding options can be used:</p>
<ul>
<li><code>type</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be one of <code>'pkcs1'</code> (RSA only), <code>'pkcs8'</code> or
<code>'sec1'</code> (EC only).</li>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pem'</code>, <code>'der'</code>, or <code>'jwk'</code>.</li>
<li><code>cipher</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> If specified, the private key will be encrypted with
the given <code>cipher</code> and <code>passphrase</code> using PKCS#5 v2.0 password based
encryption.</li>
<li><code>passphrase</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> The passphrase to use for encryption, see
<code>cipher</code>.</li>
</ul>
<p>The result type depends on the selected encoding format, when PEM the
result is a string, when DER it will be a buffer containing the data
encoded as DER, when <a href=""https://tools.ietf.org/html/rfc7517"">JWK</a> it will be an object.</p>
<p>When <a href=""https://tools.ietf.org/html/rfc7517"">JWK</a> encoding format was selected, all other encoding options are
ignored.</p>
<p>PKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of
the <code>cipher</code> and <code>format</code> options. The PKCS#8 <code>type</code> can be used with any
<code>format</code> to encrypt any key algorithm (RSA, EC, or DH) by specifying a
<code>cipher</code>. PKCS#1 and SEC1 can only be encrypted by specifying a <code>cipher</code>
when the PEM <code>format</code> is used. For maximum compatibility, use PKCS#8 for
encrypted private keys. Since PKCS#8 defines its own
encryption mechanism, PEM-level encryption is not supported when encrypting
a PKCS#8 key. See <a href=""https://www.rfc-editor.org/rfc/rfc5208.txt"">RFC 5208</a> for PKCS#8 encryption and <a href=""https://www.rfc-editor.org/rfc/rfc1421.txt"">RFC 1421</a> for
PKCS#1 and SEC1 encryption.</p>",1,Others,
187,keyObject,,equals,keyObject.equals,"<p>Returns <code>true</code> or <code>false</code> depending on whether the keys have exactly the same
type, value, and parameters. This method is not
<a href=""https://en.wikipedia.org/wiki/Timing_attack"">constant time</a>.</p>",1,Others,
188,sign,,sign,sign.sign,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>privateKey</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a></li>
<li><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a></li>
</ul>
</li>
<li><code>outputEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The <a href=""buffer.html#buffers-and-character-encodings"">encoding</a> of the return value.</li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Calculates the signature on all the data passed through using either
<a href=""crypto.html#signupdatedata-inputencoding""><code>sign.update()</code></a> or <a href=""stream.html#writablewritechunk-encoding-callback""><code>sign.write()</code></a>.</p>
<p>If <code>privateKey</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>privateKey</code> had been passed to <a href=""crypto.html#cryptocreateprivatekeykey""><code>crypto.createPrivateKey()</code></a>. If it is an
object, the following additional properties can be passed:</p>
<ul>
<li>
<p><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> For DSA and ECDSA, this option specifies the
format of the generated signature. It can be one of the following:</p>
<ul>
<li><code>'der'</code> (default): DER-encoded ASN.1 signature structure encoding <code>(r, s)</code>.</li>
<li><code>'ieee-p1363'</code>: Signature format <code>r || s</code> as proposed in IEEE-P1363.</li>
</ul>
</li>
<li>
<p><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Optional padding value for RSA, one of the following:</p>
<ul>
<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>
<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>
</ul>
<p><code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function
used to sign the message as specified in section 3.1 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>, unless
an MGF1 hash function has been specified as part of the key in compliance with
section 3.3 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>.</p>
</li>
<li>
<p><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Salt length for when padding is
<code>RSA_PKCS1_PSS_PADDING</code>. The special value
<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest
size, <code>crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN</code> (default) sets it to the
maximum permissible value.</p>
</li>
</ul>
<p>If <code>outputEncoding</code> is provided a string is returned; otherwise a <a href=""buffer.html""><code>Buffer</code></a>
is returned.</p>
<p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been
called. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p>",0,Others,
189,sign,,update,sign.update,"<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which
is given in <code>inputEncoding</code>.
If <code>encoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>",2,Others,
190,verify,,update,verify.update,"<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which
is given in <code>inputEncoding</code>.
If <code>inputEncoding</code> is not provided, and the <code>data</code> is a string, an
encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or
<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>
<p>This can be called many times with new data as it is streamed.</p>",2,,
191,verify,,verify,verify.verify,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>object</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a></li>
<li><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a></li>
</ul>
</li>
<li><code>signature</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li><code>signatureEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The <a href=""buffer.html#buffers-and-character-encodings"">encoding</a> of the <code>signature</code> string.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> <code>true</code> or <code>false</code> depending on the validity of the
signature for the data and public key.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>.</p>
<p>If <code>object</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>object</code> had been passed to <a href=""crypto.html#cryptocreatepublickeykey""><code>crypto.createPublicKey()</code></a>. If it is an
object, the following additional properties can be passed:</p>
<ul>
<li>
<p><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> For DSA and ECDSA, this option specifies the
format of the signature. It can be one of the following:</p>
<ul>
<li><code>'der'</code> (default): DER-encoded ASN.1 signature structure encoding <code>(r, s)</code>.</li>
<li><code>'ieee-p1363'</code>: Signature format <code>r || s</code> as proposed in IEEE-P1363.</li>
</ul>
</li>
<li>
<p><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Optional padding value for RSA, one of the following:</p>
<ul>
<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>
<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>
</ul>
<p><code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function
used to verify the message as specified in section 3.1 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>, unless
an MGF1 hash function has been specified as part of the key in compliance with
section 3.3 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>.</p>
</li>
<li>
<p><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Salt length for when padding is
<code>RSA_PKCS1_PSS_PADDING</code>. The special value
<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest
size, <code>crypto.constants.RSA_PSS_SALTLEN_AUTO</code> (default) causes it to be
determined automatically.</p>
</li>
</ul>
<p>The <code>signature</code> argument is the previously calculated signature for the data, in
the <code>signatureEncoding</code>.
If a <code>signatureEncoding</code> is specified, the <code>signature</code> is expected to be a
string; otherwise <code>signature</code> is expected to be a <a href=""buffer.html""><code>Buffer</code></a>,
<code>TypedArray</code>, or <code>DataView</code>.</p>
<p>The <code>verify</code> object can not be used again after <code>verify.verify()</code> has been
called. Multiple calls to <code>verify.verify()</code> will result in an error being
thrown.</p>
<p>Because public keys can be derived from private keys, a private key may
be passed instead of a public key.</p>",0,,
192,x509,,checkEmail,x509.checkEmail,"<p>Checks whether the certificate matches the given email address.</p>
<p>If the <code>'subject'</code> option is undefined or set to <code>'default'</code>, the certificate
subject is only considered if the subject alternative name extension either does
not exist or does not contain any email addresses.</p>
<p>If the <code>'subject'</code> option is set to <code>'always'</code> and if the subject alternative
name extension either does not exist or does not contain a matching email
address, the certificate subject is considered.</p>
<p>If the <code>'subject'</code> option is set to <code>'never'</code>, the certificate subject is never
considered, even if the certificate contains no subject alternative names.</p>",2,Others,
193,x509,,checkHost,x509.checkHost,"<p>Checks whether the certificate matches the given host name.</p>
<p>If the certificate matches the given host name, the matching subject name is
returned. The returned name might be an exact match (e.g., <code>foo.example.com</code>)
or it might contain wildcards (e.g., <code>*.example.com</code>). Because host name
comparisons are case-insensitive, the returned subject name might also differ
from the given <code>name</code> in capitalization.</p>
<p>If the <code>'subject'</code> option is undefined or set to <code>'default'</code>, the certificate
subject is only considered if the subject alternative name extension either does
not exist or does not contain any DNS names. This behavior is consistent with
<a href=""https://www.rfc-editor.org/rfc/rfc2818.txt"">RFC 2818</a> (""HTTP Over TLS"").</p>
<p>If the <code>'subject'</code> option is set to <code>'always'</code> and if the subject alternative
name extension either does not exist or does not contain a matching DNS name,
the certificate subject is considered.</p>
<p>If the <code>'subject'</code> option is set to <code>'never'</code>, the certificate subject is never
considered, even if the certificate contains no subject alternative names.</p>",2,Others,
194,x509,,checkIP,x509.checkIP,"<p>Checks whether the certificate matches the given IP address (IPv4 or IPv6).</p>
<p>Only <a href=""https://www.rfc-editor.org/rfc/rfc5280.txt"">RFC 5280</a> <code>iPAddress</code> subject alternative names are considered, and they
must match the given <code>ip</code> address exactly. Other subject alternative names as
well as the subject field of the certificate are ignored.</p>",1,Others,
195,x509,,checkIssued,x509.checkIssued,<p>Checks whether this certificate was issued by the given <code>otherCert</code>.</p>,1,Others,
196,x509,,checkPrivateKey,x509.checkPrivateKey,"<p>Checks whether the public key for this certificate is consistent with
the given private key.</p>",1,Others,
197,x509,,toJSON,x509.toJSON,"<p>There is no standard JSON encoding for X509 certificates. The
<code>toJSON()</code> method returns a string containing the PEM encoded
certificate.</p>",1,Others,
198,x509,,toLegacyObject,x509.toLegacyObject,"<p>Returns information about this certificate using the legacy
<a href=""tls.html#certificate-object"">certificate object</a> encoding.</p>",1,Others,
199,x509,,toString,x509.toString,<p>Returns the PEM-encoded certificate.</p>,1,Others,
200,x509,,verify,x509.verify,"<p>Verifies that this certificate was signed by the given public key.
Does not perform any other validation checks on the certificate.</p>",1,Others,
201,crypto,,checkPrime,crypto.checkPrime,<p>Checks the primality of the <code>candidate</code>.</p>,3,Others,
202,crypto,,checkPrimeSync,crypto.checkPrimeSync,<p>Checks the primality of the <code>candidate</code>.</p>,2,Others,
203,crypto,,createCipher,crypto.createCipher,"<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and
<code>password</code>.</p>
<p>The <code>options</code> argument controls stream behavior and is optional except when a
cipher in CCM or OCB mode (e.g. <code>'aes-128-ccm'</code>) is used. In that case, the
<code>authTagLength</code> option is required and specifies the length of the
authentication tag in bytes, see <a href=""crypto.html#ccm-mode"">CCM mode</a>. In GCM mode, the <code>authTagLength</code>
option is not required but can be used to set the length of the authentication
tag that will be returned by <code>getAuthTag()</code> and defaults to 16 bytes.
For <code>chacha20-poly1305</code>, the <code>authTagLength</code> option defaults to 16 bytes.</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list -cipher-algorithms</code> will
display the available cipher algorithms.</p>
<p>The <code>password</code> is used to derive the cipher key and initialization vector (IV).
The value must be either a <code>'latin1'</code> encoded string, a <a href=""buffer.html""><code>Buffer</code></a>, a
<code>TypedArray</code>, or a <code>DataView</code>.</p>
<p><strong class=""critical"">This function is semantically insecure for all
supported ciphers and fatally flawed for ciphers in counter mode (such as CTR,
GCM, or CCM).</strong></p>
<p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL
function <a href=""https://www.openssl.org/docs/man3.0/man3/EVP_BytesToKey.html""><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one
iteration, and no salt. The lack of salt allows dictionary attacks as the same
password always creates the same key. The low iteration count and
non-cryptographically secure hash algorithm allow passwords to be tested very
rapidly.</p>
<p>In line with OpenSSL's recommendation to use a more modern algorithm instead of
<a href=""https://www.openssl.org/docs/man3.0/man3/EVP_BytesToKey.html""><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on
their own using <a href=""crypto.html#cryptoscryptpassword-salt-keylen-options-callback""><code>crypto.scrypt()</code></a> and to use <a href=""crypto.html#cryptocreatecipherivalgorithm-key-iv-options""><code>crypto.createCipheriv()</code></a>
to create the <code>Cipher</code> object. Users should not use ciphers with counter mode
(e.g. CTR, GCM, or CCM) in <code>crypto.createCipher()</code>. A warning is emitted when
they are used in order to avoid the risk of IV reuse that causes
vulnerabilities. For the case when IV is reused in GCM, see <a href=""https://github.com/nonce-disrespect/nonce-disrespect"">Nonce-Disrespecting
Adversaries</a> for details.</p>",3,31,
204,crypto,,createCipheriv,crypto.createCipheriv,"<p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and
initialization vector (<code>iv</code>).</p>
<p>The <code>options</code> argument controls stream behavior and is optional except when a
cipher in CCM or OCB mode (e.g. <code>'aes-128-ccm'</code>) is used. In that case, the
<code>authTagLength</code> option is required and specifies the length of the
authentication tag in bytes, see <a href=""crypto.html#ccm-mode"">CCM mode</a>. In GCM mode, the <code>authTagLength</code>
option is not required but can be used to set the length of the authentication
tag that will be returned by <code>getAuthTag()</code> and defaults to 16 bytes.
For <code>chacha20-poly1305</code>, the <code>authTagLength</code> option defaults to 16 bytes.</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list -cipher-algorithms</code> will
display the available cipher algorithms.</p>
<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an
<a href=""https://en.wikipedia.org/wiki/Initialization_vector"">initialization vector</a>. Both arguments must be <code>'utf8'</code> encoded strings,
<a href=""buffer.html"">Buffers</a>, <code>TypedArray</code>, or <code>DataView</code>s. The <code>key</code> may optionally be
a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a> of type <code>secret</code>. If the cipher does not need
an initialization vector, <code>iv</code> may be <code>null</code>.</p>
<p>When passing strings for <code>key</code> or <code>iv</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<p>Initialization vectors should be unpredictable and unique; ideally, they will be
cryptographically random. They do not have to be secret: IVs are typically just
added to ciphertext messages unencrypted. It may sound contradictory that
something has to be unpredictable and unique, but does not have to be secret;
remember that an attacker must not be able to predict ahead of time what a
given IV will be.</p>",4,31,
205,crypto,,createDecipher,crypto.createDecipher,"<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and
<code>password</code> (key).</p>
<p>The <code>options</code> argument controls stream behavior and is optional except when a
cipher in CCM or OCB mode (e.g. <code>'aes-128-ccm'</code>) is used. In that case, the
<code>authTagLength</code> option is required and specifies the length of the
authentication tag in bytes, see <a href=""crypto.html#ccm-mode"">CCM mode</a>.
For <code>chacha20-poly1305</code>, the <code>authTagLength</code> option defaults to 16 bytes.</p>
<p><strong class=""critical"">This function is semantically insecure for all
supported ciphers and fatally flawed for ciphers in counter mode (such as CTR,
GCM, or CCM).</strong></p>
<p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL
function <a href=""https://www.openssl.org/docs/man3.0/man3/EVP_BytesToKey.html""><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one
iteration, and no salt. The lack of salt allows dictionary attacks as the same
password always creates the same key. The low iteration count and
non-cryptographically secure hash algorithm allow passwords to be tested very
rapidly.</p>
<p>In line with OpenSSL's recommendation to use a more modern algorithm instead of
<a href=""https://www.openssl.org/docs/man3.0/man3/EVP_BytesToKey.html""><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on
their own using <a href=""crypto.html#cryptoscryptpassword-salt-keylen-options-callback""><code>crypto.scrypt()</code></a> and to use <a href=""crypto.html#cryptocreatedecipherivalgorithm-key-iv-options""><code>crypto.createDecipheriv()</code></a>
to create the <code>Decipher</code> object.</p>",3,32,
206,crypto,,createDecipheriv,crypto.createDecipheriv,"<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code>
and initialization vector (<code>iv</code>).</p>
<p>The <code>options</code> argument controls stream behavior and is optional except when a
cipher in CCM or OCB mode (e.g. <code>'aes-128-ccm'</code>) is used. In that case, the
<code>authTagLength</code> option is required and specifies the length of the
authentication tag in bytes, see <a href=""crypto.html#ccm-mode"">CCM mode</a>. In GCM mode, the <code>authTagLength</code>
option is not required but can be used to restrict accepted authentication tags
to those with the specified length.
For <code>chacha20-poly1305</code>, the <code>authTagLength</code> option defaults to 16 bytes.</p>
<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On
recent OpenSSL releases, <code>openssl list -cipher-algorithms</code> will
display the available cipher algorithms.</p>
<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an
<a href=""https://en.wikipedia.org/wiki/Initialization_vector"">initialization vector</a>. Both arguments must be <code>'utf8'</code> encoded strings,
<a href=""buffer.html"">Buffers</a>, <code>TypedArray</code>, or <code>DataView</code>s. The <code>key</code> may optionally be
a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a> of type <code>secret</code>. If the cipher does not need
an initialization vector, <code>iv</code> may be <code>null</code>.</p>
<p>When passing strings for <code>key</code> or <code>iv</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<p>Initialization vectors should be unpredictable and unique; ideally, they will be
cryptographically random. They do not have to be secret: IVs are typically just
added to ciphertext messages unencrypted. It may sound contradictory that
something has to be unpredictable and unique, but does not have to be secret;
remember that an attacker must not be able to predict ahead of time what a given
IV will be.</p>",4,32,
207,crypto,,createDiffieHellman,crypto.createDiffieHellman,"<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an
optional specific <code>generator</code>.</p>
<p>The <code>generator</code> argument can be a number, string, or <a href=""buffer.html""><code>Buffer</code></a>. If
<code>generator</code> is not specified, the value <code>2</code> is used.</p>
<p>If <code>primeEncoding</code> is specified, <code>prime</code> is expected to be a string; otherwise
a <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>
<p>If <code>generatorEncoding</code> is specified, <code>generator</code> is expected to be a string;
otherwise a number, <a href=""buffer.html""><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>",4,Others,
208,crypto,,createDiffieHellman,crypto.createDiffieHellman,"<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of
<code>primeLength</code> bits using an optional specific numeric <code>generator</code>.
If <code>generator</code> is not specified, the value <code>2</code> is used.</p>",2,Others,
209,crypto,,createDiffieHellmanGroup,crypto.createDiffieHellmanGroup,"<p>An alias for <a href=""crypto.html#cryptogetdiffiehellmangroupname""><code>crypto.getDiffieHellman()</code></a></p>",1,Others,
210,crypto,,createECDH,crypto.createECDH,"<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a
predefined curve specified by the <code>curveName</code> string. Use
<a href=""crypto.html#cryptogetcurves""><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent
OpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name
and description of each available elliptic curve.</p>",1,Others,
211,crypto,,createHash,crypto.createHash,"<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests
using the given <code>algorithm</code>. Optional <code>options</code> argument controls stream
behavior. For XOF hash functions such as <code>'shake256'</code>, the <code>outputLength</code> option
can be used to specify the desired output length in bytes.</p>
<p>The <code>algorithm</code> is dependent on the available algorithms supported by the
version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc.
On recent releases of OpenSSL, <code>openssl list -digest-algorithms</code> will
display the available digest algorithms.</p>
<p>Example: generating the sha256 sum of a file</p>
<pre><code class=""language-mjs"">import {
  createReadStream,
} from 'node:fs';
import { argv } from 'node:process';
const {
  createHash,
} = await import('node:crypto');

const filename = argv[2];

const hash = createHash('sha256');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});
</code></pre>
<pre><code class=""language-cjs"">const {
  createReadStream,
} = require('node:fs');
const {
  createHash,
} = require('node:crypto');
const { argv } = require('node:process');

const filename = argv[2];

const hash = createHash('sha256');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});
</code></pre>",2,31,
212,crypto,,createHmac,crypto.createHmac,"<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.
Optional <code>options</code> argument controls stream behavior.</p>
<p>The <code>algorithm</code> is dependent on the available algorithms supported by the
version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc.
On recent releases of OpenSSL, <code>openssl list -digest-algorithms</code> will
display the available digest algorithms.</p>
<p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash. If it is
a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, its type must be <code>secret</code>. If it is a string, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>. If it was
obtained from a cryptographically secure source of entropy, such as
<a href=""crypto.html#cryptorandombytessize-callback""><code>crypto.randomBytes()</code></a> or <a href=""crypto.html#cryptogeneratekeytype-options-callback""><code>crypto.generateKey()</code></a>, its length should not
exceed the block size of <code>algorithm</code> (e.g., 512 bits for SHA-256).</p>
<p>Example: generating the sha256 HMAC of a file</p>
<pre><code class=""language-mjs"">import {
  createReadStream,
} from 'node:fs';
import { argv } from 'node:process';
const {
  createHmac,
} = await import('node:crypto');

const filename = argv[2];

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hmac.update(data);
  else {
    console.log(`${hmac.digest('hex')} ${filename}`);
  }
});
</code></pre>
<pre><code class=""language-cjs"">const {
  createReadStream,
} = require('node:fs');
const {
  createHmac,
} = require('node:crypto');
const { argv } = require('node:process');

const filename = argv[2];

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hmac.update(data);
  else {
    console.log(`${hmac.digest('hex')} ${filename}`);
  }
});
</code></pre>",3,31,
213,crypto,,createPrivateKey,crypto.createPrivateKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a>
<ul>
<li><code>key</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> The key
material, either in PEM, DER, or JWK format.</li>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pem'</code>, <code>'der'</code>, or '<code>'jwk'</code>.
<strong>Default:</strong> <code>'pem'</code>.</li>
<li><code>type</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pkcs1'</code>, <code>'pkcs8'</code> or <code>'sec1'</code>. This option is
required only if the <code>format</code> is <code>'der'</code> and ignored otherwise.</li>
<li><code>passphrase</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> The passphrase to use for decryption.</li>
<li><code>encoding</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The string encoding to use when <code>key</code> is a string.</li>
</ul>
</li>
<li>Returns: <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Creates and returns a new key object containing a private key. If <code>key</code> is a
string or <code>Buffer</code>, <code>format</code> is assumed to be <code>'pem'</code>; otherwise, <code>key</code>
must be an object with the properties described above.</p>
<p>If the private key is encrypted, a <code>passphrase</code> must be specified. The length
of the passphrase is limited to 1024 bytes.</p>",0,Others,
214,crypto,,createPublicKey,crypto.createPublicKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a>
<ul>
<li><code>key</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> The key
material, either in PEM, DER, or JWK format.</li>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pem'</code>, <code>'der'</code>, or <code>'jwk'</code>.
<strong>Default:</strong> <code>'pem'</code>.</li>
<li><code>type</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be <code>'pkcs1'</code> or <code>'spki'</code>. This option is
required only if the <code>format</code> is <code>'der'</code> and ignored otherwise.</li>
<li><code>encoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The string encoding to use when <code>key</code> is a string.</li>
</ul>
</li>
<li>Returns: <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Creates and returns a new key object containing a public key. If <code>key</code> is a
string or <code>Buffer</code>, <code>format</code> is assumed to be <code>'pem'</code>; if <code>key</code> is a <code>KeyObject</code>
with type <code>'private'</code>, the public key is derived from the given private key;
otherwise, <code>key</code> must be an object with the properties described above.</p>
<p>If the format is <code>'pem'</code>, the <code>'key'</code> may also be an X.509 certificate.</p>
<p>Because public keys can be derived from private keys, a private key may be
passed instead of a public key. In that case, this function behaves as if
<a href=""crypto.html#cryptocreateprivatekeykey""><code>crypto.createPrivateKey()</code></a> had been called, except that the type of the
returned <code>KeyObject</code> will be <code>'public'</code> and that the private key cannot be
extracted from the returned <code>KeyObject</code>. Similarly, if a <code>KeyObject</code> with type
<code>'private'</code> is given, a new <code>KeyObject</code> with type <code>'public'</code> will be returned
and it will be impossible to extract the private key from the returned object.</p>",0,Others,
215,crypto,,createSecretKey,crypto.createSecretKey,"<p>Creates and returns a new key object containing a secret key for symmetric
encryption or <code>Hmac</code>.</p>",2,Others,
216,crypto,,createSign,crypto.createSign,"<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>. Use
<a href=""crypto.html#cryptogethashes""><code>crypto.getHashes()</code></a> to obtain the names of the available digest algorithms.
Optional <code>options</code> argument controls the <code>stream.Writable</code> behavior.</p>
<p>In some cases, a <code>Sign</code> instance can be created using the name of a signature
algorithm, such as <code>'RSA-SHA256'</code>, instead of a digest algorithm. This will use
the corresponding digest algorithm. This does not work for all signature
algorithms, such as <code>'ecdsa-with-SHA256'</code>, so it is best to always use digest
algorithm names.</p>",2,Others,
217,crypto,,createVerify,crypto.createVerify,"<p>Creates and returns a <code>Verify</code> object that uses the given algorithm.
Use <a href=""crypto.html#cryptogethashes""><code>crypto.getHashes()</code></a> to obtain an array of names of the available
signing algorithms. Optional <code>options</code> argument controls the
<code>stream.Writable</code> behavior.</p>
<p>In some cases, a <code>Verify</code> instance can be created using the name of a signature
algorithm, such as <code>'RSA-SHA256'</code>, instead of a digest algorithm. This will use
the corresponding digest algorithm. This does not work for all signature
algorithms, such as <code>'ecdsa-with-SHA256'</code>, so it is best to always use digest
algorithm names.</p>",2,Others,
218,crypto,,diffieHellman,crypto.diffieHellman,"<p>Computes the Diffie-Hellman secret based on a <code>privateKey</code> and a <code>publicKey</code>.
Both keys must have the same <code>asymmetricKeyType</code>, which must be one of <code>'dh'</code>
(for Diffie-Hellman), <code>'ec'</code> (for ECDH), <code>'x448'</code>, or <code>'x25519'</code> (for ECDH-ES).</p>",1,Others,
219,crypto,,generateKey,crypto.generateKey,"<p>Asynchronously generates a new random secret key of the given <code>length</code>. The
<code>type</code> will determine which validations will be performed on the <code>length</code>.</p>
<pre><code class=""language-mjs"">const {
  generateKey,
} = await import('node:crypto');

generateKey('hmac', { length: 512 }, (err, key) => {
  if (err) throw err;
  console.log(key.export().toString('hex'));  // 46e..........620
});
</code></pre>
<pre><code class=""language-cjs"">const {
  generateKey,
} = require('node:crypto');

generateKey('hmac', { length: 512 }, (err, key) => {
  if (err) throw err;
  console.log(key.export().toString('hex'));  // 46e..........620
});
</code></pre>
<p>The size of a generated HMAC key should not exceed the block size of the
underlying hash function. See <a href=""crypto.html#cryptocreatehmacalgorithm-key-options""><code>crypto.createHmac()</code></a> for more information.</p>",3,Others,
220,crypto,,generateKeyPair,crypto.generateKeyPair,"<p>Generates a new asymmetric key pair of the given <code>type</code>. RSA, RSA-PSS, DSA, EC,
Ed25519, Ed448, X25519, X448, and DH are currently supported.</p>
<p>If a <code>publicKeyEncoding</code> or <code>privateKeyEncoding</code> was specified, this function
behaves as if <a href=""crypto.html#keyobjectexportoptions""><code>keyObject.export()</code></a> had been called on its result. Otherwise,
the respective part of the key is returned as a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>.</p>
<p>It is recommended to encode public keys as <code>'spki'</code> and private keys as
<code>'pkcs8'</code> with encryption for long-term storage:</p>
<pre><code class=""language-mjs"">const {
  generateKeyPair,
} = await import('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
</code></pre>
<pre><code class=""language-cjs"">const {
  generateKeyPair,
} = require('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
</code></pre>
<p>On completion, <code>callback</code> will be called with <code>err</code> set to <code>undefined</code> and
<code>publicKey</code> / <code>privateKey</code> representing the generated key pair.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a <code>Promise</code> for an <code>Object</code> with <code>publicKey</code> and <code>privateKey</code> properties.</p>",3,Others,
221,crypto,,generateKeyPairSync,crypto.generateKeyPairSync,"<p>Generates a new asymmetric key pair of the given <code>type</code>. RSA, RSA-PSS, DSA, EC,
Ed25519, Ed448, X25519, X448, and DH are currently supported.</p>
<p>If a <code>publicKeyEncoding</code> or <code>privateKeyEncoding</code> was specified, this function
behaves as if <a href=""crypto.html#keyobjectexportoptions""><code>keyObject.export()</code></a> had been called on its result. Otherwise,
the respective part of the key is returned as a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>.</p>
<p>When encoding public keys, it is recommended to use <code>'spki'</code>. When encoding
private keys, it is recommended to use <code>'pkcs8'</code> with a strong passphrase,
and to keep the passphrase confidential.</p>
<pre><code class=""language-mjs"">const {
  generateKeyPairSync,
} = await import('node:crypto');

const {
  publicKey,
  privateKey,
} = generateKeyPairSync('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
});
</code></pre>
<pre><code class=""language-cjs"">const {
  generateKeyPairSync,
} = require('node:crypto');

const {
  publicKey,
  privateKey,
} = generateKeyPairSync('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
});
</code></pre>
<p>The return value <code>{ publicKey, privateKey }</code> represents the generated key pair.
When PEM encoding was selected, the respective key will be a string, otherwise
it will be a buffer containing the data encoded as DER.</p>",2,Others,
222,crypto,,generateKeySync,crypto.generateKeySync,"<p>Synchronously generates a new random secret key of the given <code>length</code>. The
<code>type</code> will determine which validations will be performed on the <code>length</code>.</p>
<pre><code class=""language-mjs"">const {
  generateKeySync,
} = await import('node:crypto');

const key = generateKeySync('hmac', { length: 512 });
console.log(key.export().toString('hex'));  // e89..........41e
</code></pre>
<pre><code class=""language-cjs"">const {
  generateKeySync,
} = require('node:crypto');

const key = generateKeySync('hmac', { length: 512 });
console.log(key.export().toString('hex'));  // e89..........41e
</code></pre>
<p>The size of a generated HMAC key should not exceed the block size of the
underlying hash function. See <a href=""crypto.html#cryptocreatehmacalgorithm-key-options""><code>crypto.createHmac()</code></a> for more information.</p>",2,Others,
223,crypto,,generatePrime,crypto.generatePrime,"<p>Generates a pseudorandom prime of <code>size</code> bits.</p>
<p>If <code>options.safe</code> is <code>true</code>, the prime will be a safe prime -- that is,
<code>(prime - 1) / 2</code> will also be a prime.</p>
<p>The <code>options.add</code> and <code>options.rem</code> parameters can be used to enforce additional
requirements, e.g., for Diffie-Hellman:</p>
<ul>
<li>If <code>options.add</code> and <code>options.rem</code> are both set, the prime will satisfy the
condition that <code>prime % add = rem</code>.</li>
<li>If only <code>options.add</code> is set and <code>options.safe</code> is not <code>true</code>, the prime will
satisfy the condition that <code>prime % add = 1</code>.</li>
<li>If only <code>options.add</code> is set and <code>options.safe</code> is set to <code>true</code>, the prime
will instead satisfy the condition that <code>prime % add = 3</code>. This is necessary
because <code>prime % add = 1</code> for <code>options.add > 2</code> would contradict the condition
enforced by <code>options.safe</code>.</li>
<li><code>options.rem</code> is ignored if <code>options.add</code> is not given.</li>
</ul>
<p>Both <code>options.add</code> and <code>options.rem</code> must be encoded as big-endian sequences
if given as an <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, <code>TypedArray</code>, <code>Buffer</code>, or
<code>DataView</code>.</p>
<p>By default, the prime is encoded as a big-endian sequence of octets
in an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>. If the <code>bigint</code> option is <code>true</code>, then a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"" class=""type"">&lt;bigint&gt;</a>
is provided.</p>",3,Others,
224,crypto,,generatePrimeSync,crypto.generatePrimeSync,"<p>Generates a pseudorandom prime of <code>size</code> bits.</p>
<p>If <code>options.safe</code> is <code>true</code>, the prime will be a safe prime -- that is,
<code>(prime - 1) / 2</code> will also be a prime.</p>
<p>The <code>options.add</code> and <code>options.rem</code> parameters can be used to enforce additional
requirements, e.g., for Diffie-Hellman:</p>
<ul>
<li>If <code>options.add</code> and <code>options.rem</code> are both set, the prime will satisfy the
condition that <code>prime % add = rem</code>.</li>
<li>If only <code>options.add</code> is set and <code>options.safe</code> is not <code>true</code>, the prime will
satisfy the condition that <code>prime % add = 1</code>.</li>
<li>If only <code>options.add</code> is set and <code>options.safe</code> is set to <code>true</code>, the prime
will instead satisfy the condition that <code>prime % add = 3</code>. This is necessary
because <code>prime % add = 1</code> for <code>options.add > 2</code> would contradict the condition
enforced by <code>options.safe</code>.</li>
<li><code>options.rem</code> is ignored if <code>options.add</code> is not given.</li>
</ul>
<p>Both <code>options.add</code> and <code>options.rem</code> must be encoded as big-endian sequences
if given as an <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, <code>TypedArray</code>, <code>Buffer</code>, or
<code>DataView</code>.</p>
<p>By default, the prime is encoded as a big-endian sequence of octets
in an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>. If the <code>bigint</code> option is <code>true</code>, then a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"" class=""type"">&lt;bigint&gt;</a>
is provided.</p>",2,Others,
225,crypto,,getCipherInfo,crypto.getCipherInfo,"<p>Returns information about a given cipher.</p>
<p>Some ciphers accept variable length keys and initialization vectors. By default,
the <code>crypto.getCipherInfo()</code> method will return the default values for these
ciphers. To test if a given key length or iv length is acceptable for given
cipher, use the <code>keyLength</code> and <code>ivLength</code> options. If the given values are
unacceptable, <code>undefined</code> will be returned.</p>",2,Others,
226,crypto,,getCiphers,crypto.getCiphers,"<pre><code class=""language-mjs"">const {
  getCiphers,
} = await import('node:crypto');

console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]
</code></pre>
<pre><code class=""language-cjs"">const {
  getCiphers,
} = require('node:crypto');

console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]
</code></pre>",0,Others,
227,crypto,,getCurves,crypto.getCurves,"<pre><code class=""language-mjs"">const {
  getCurves,
} = await import('node:crypto');

console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]
</code></pre>
<pre><code class=""language-cjs"">const {
  getCurves,
} = require('node:crypto');

console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]
</code></pre>",0,Others,
228,crypto,,getDiffieHellman,crypto.getDiffieHellman,"<p>Creates a predefined <code>DiffieHellmanGroup</code> key exchange object. The
supported groups are listed in the documentation for <a href=""crypto.html#class-diffiehellmangroup""><code>DiffieHellmanGroup</code></a>.</p>
<p>The returned object mimics the interface of objects created by
<a href=""crypto.html#cryptocreatediffiehellmanprime-primeencoding-generator-generatorencoding""><code>crypto.createDiffieHellman()</code></a>, but will not allow changing
the keys (with <a href=""crypto.html#diffiehellmansetpublickeypublickey-encoding""><code>diffieHellman.setPublicKey()</code></a>, for example). The
advantage of using this method is that the parties do not have to
generate nor exchange a group modulus beforehand, saving both processor
and communication time.</p>
<p>Example (obtaining a shared secret):</p>
<pre><code class=""language-mjs"">const {
  getDiffieHellman,
} = await import('node:crypto');
const alice = getDiffieHellman('modp14');
const bob = getDiffieHellman('modp14');

alice.generateKeys();
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

/* aliceSecret and bobSecret should be the same */
console.log(aliceSecret === bobSecret);
</code></pre>
<pre><code class=""language-cjs"">const {
  getDiffieHellman,
} = require('node:crypto');

const alice = getDiffieHellman('modp14');
const bob = getDiffieHellman('modp14');

alice.generateKeys();
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

/* aliceSecret and bobSecret should be the same */
console.log(aliceSecret === bobSecret);
</code></pre>",1,Others,
229,crypto,,getFips,crypto.getFips,,0,Others,
230,crypto,,getHashes,crypto.getHashes,"<pre><code class=""language-mjs"">const {
  getHashes,
} = await import('node:crypto');

console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]
</code></pre>
<pre><code class=""language-cjs"">const {
  getHashes,
} = require('node:crypto');

console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]
</code></pre>",0,Others,
231,crypto,,getRandomValues,crypto.getRandomValues,"<p>A convenient alias for <a href=""webcrypto.html#cryptogetrandomvaluestypedarray""><code>crypto.webcrypto.getRandomValues()</code></a>. This
implementation is not compliant with the Web Crypto spec, to write
web-compatible code use <a href=""webcrypto.html#cryptogetrandomvaluestypedarray""><code>crypto.webcrypto.getRandomValues()</code></a> instead.</p>",1,Others,
232,crypto,,hkdf,crypto.hkdf,"<p>HKDF is a simple key derivation function defined in RFC 5869. The given <code>ikm</code>,
<code>salt</code> and <code>info</code> are used with the <code>digest</code> to derive a key of <code>keylen</code> bytes.</p>
<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and
<code>derivedKey</code>. If an errors occurs while deriving the key, <code>err</code> will be set;
otherwise <code>err</code> will be <code>null</code>. The successfully generated <code>derivedKey</code> will
be passed to the callback as an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>. An error will be thrown if any
of the input arguments specify invalid values or types.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const {
  hkdf,
} = await import('node:crypto');

hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
});
</code></pre>
<pre><code class=""language-cjs"">const {
  hkdf,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
});
</code></pre>",6,Others,
233,crypto,,hkdfSync,crypto.hkdfSync,"<p>Provides a synchronous HKDF key derivation function as defined in RFC 5869. The
given <code>ikm</code>, <code>salt</code> and <code>info</code> are used with the <code>digest</code> to derive a key of
<code>keylen</code> bytes.</p>
<p>The successfully generated <code>derivedKey</code> will be returned as an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>.</p>
<p>An error will be thrown if any of the input arguments specify invalid values or
types, or if the derived key cannot be generated.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const {
  hkdfSync,
} = await import('node:crypto');

const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);
console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
</code></pre>
<pre><code class=""language-cjs"">const {
  hkdfSync,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);
console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
</code></pre>",5,Others,
234,crypto,,pbkdf2,crypto.pbkdf2,"<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)
implementation. A selected HMAC digest algorithm specified by <code>digest</code> is
applied to derive a key of the requested byte length (<code>keylen</code>) from the
<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>
<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and
<code>derivedKey</code>. If an error occurs while deriving the key, <code>err</code> will be set;
otherwise <code>err</code> will be <code>null</code>. By default, the successfully generated
<code>derivedKey</code> will be passed to the callback as a <a href=""buffer.html""><code>Buffer</code></a>. An error will be
thrown if any of the input arguments specify invalid values or types.</p>
<p>The <code>iterations</code> argument must be a number set as high as possible. The
higher the number of iterations, the more secure the derived key will be,
but will take a longer amount of time to complete.</p>
<p>The <code>salt</code> should be as unique as possible. It is recommended that a salt is
random and at least 16 bytes long. See <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"">NIST SP 800-132</a> for details.</p>
<p>When passing strings for <code>password</code> or <code>salt</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<pre><code class=""language-mjs"">const {
  pbkdf2,
} = await import('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
</code></pre>
<pre><code class=""language-cjs"">const {
  pbkdf2,
} = require('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
</code></pre>
<p>An array of supported digest functions can be retrieved using
<a href=""crypto.html#cryptogethashes""><code>crypto.getHashes()</code></a>.</p>
<p>This API uses libuv's threadpool, which can have surprising and
negative performance implications for some applications; see the
<a href=""cli.html#uv_threadpool_sizesize""><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>",6,Others,
235,crypto,,pbkdf2Sync,crypto.pbkdf2Sync,"<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)
implementation. A selected HMAC digest algorithm specified by <code>digest</code> is
applied to derive a key of the requested byte length (<code>keylen</code>) from the
<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>
<p>If an error occurs an <code>Error</code> will be thrown, otherwise the derived key will be
returned as a <a href=""buffer.html""><code>Buffer</code></a>.</p>
<p>The <code>iterations</code> argument must be a number set as high as possible. The
higher the number of iterations, the more secure the derived key will be,
but will take a longer amount of time to complete.</p>
<p>The <code>salt</code> should be as unique as possible. It is recommended that a salt is
random and at least 16 bytes long. See <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"">NIST SP 800-132</a> for details.</p>
<p>When passing strings for <code>password</code> or <code>salt</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<pre><code class=""language-mjs"">const {
  pbkdf2Sync,
} = await import('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
</code></pre>
<pre><code class=""language-cjs"">const {
  pbkdf2Sync,
} = require('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
</code></pre>
<p>An array of supported digest functions can be retrieved using
<a href=""crypto.html#cryptogethashes""><code>crypto.getHashes()</code></a>.</p>",5,Others,
236,crypto,,privateDecrypt,crypto.privateDecrypt,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>privateKey</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>oaepHash</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The hash function to use for OAEP padding and MGF1.
<strong>Default:</strong> <code>'sha1'</code></li>
<li><code>oaepLabel</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> The label to
use for OAEP padding. If not specified, no label is used.</li>
<li><code>padding</code> <a href=""crypto.html#cryptoconstants"" class=""type"">&lt;crypto.constants&gt;</a> An optional padding value defined in
<code>crypto.constants</code>, which may be: <code>crypto.constants.RSA_NO_PADDING</code>,
<code>crypto.constants.RSA_PKCS1_PADDING</code>, or
<code>crypto.constants.RSA_PKCS1_OAEP_PADDING</code>.</li>
</ul>
</li>
<li><code>buffer</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> A new <code>Buffer</code> with the decrypted content.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Decrypts <code>buffer</code> with <code>privateKey</code>. <code>buffer</code> was previously encrypted using
the corresponding public key, for example using <a href=""crypto.html#cryptopublicencryptkey-buffer""><code>crypto.publicEncrypt()</code></a>.</p>
<p>If <code>privateKey</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>privateKey</code> had been passed to <a href=""crypto.html#cryptocreateprivatekeykey""><code>crypto.createPrivateKey()</code></a>. If it is an
object, the <code>padding</code> property can be passed. Otherwise, this function uses
<code>RSA_PKCS1_OAEP_PADDING</code>.</p>",0,34,
237,crypto,,privateEncrypt,crypto.privateEncrypt,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>privateKey</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
A PEM encoded private key.</li>
<li><code>passphrase</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> An optional
passphrase for the private key.</li>
<li><code>padding</code> <a href=""crypto.html#cryptoconstants"" class=""type"">&lt;crypto.constants&gt;</a> An optional padding value defined in
<code>crypto.constants</code>, which may be: <code>crypto.constants.RSA_NO_PADDING</code> or
<code>crypto.constants.RSA_PKCS1_PADDING</code>.</li>
<li><code>encoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The string encoding to use when <code>buffer</code>, <code>key</code>,
or <code>passphrase</code> are strings.</li>
</ul>
</li>
<li><code>buffer</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> A new <code>Buffer</code> with the encrypted content.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Encrypts <code>buffer</code> with <code>privateKey</code>. The returned data can be decrypted using
the corresponding public key, for example using <a href=""crypto.html#cryptopublicdecryptkey-buffer""><code>crypto.publicDecrypt()</code></a>.</p>
<p>If <code>privateKey</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>privateKey</code> had been passed to <a href=""crypto.html#cryptocreateprivatekeykey""><code>crypto.createPrivateKey()</code></a>. If it is an
object, the <code>padding</code> property can be passed. Otherwise, this function uses
<code>RSA_PKCS1_PADDING</code>.</p>",0,33,
238,crypto,,publicDecrypt,crypto.publicDecrypt,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>passphrase</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> An optional
passphrase for the private key.</li>
<li><code>padding</code> <a href=""crypto.html#cryptoconstants"" class=""type"">&lt;crypto.constants&gt;</a> An optional padding value defined in
<code>crypto.constants</code>, which may be: <code>crypto.constants.RSA_NO_PADDING</code> or
<code>crypto.constants.RSA_PKCS1_PADDING</code>.</li>
<li><code>encoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The string encoding to use when <code>buffer</code>, <code>key</code>,
or <code>passphrase</code> are strings.</li>
</ul>
</li>
<li><code>buffer</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> A new <code>Buffer</code> with the decrypted content.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Decrypts <code>buffer</code> with <code>key</code>.<code>buffer</code> was previously encrypted using
the corresponding private key, for example using <a href=""crypto.html#cryptoprivateencryptprivatekey-buffer""><code>crypto.privateEncrypt()</code></a>.</p>
<p>If <code>key</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>key</code> had been passed to <a href=""crypto.html#cryptocreatepublickeykey""><code>crypto.createPublicKey()</code></a>. If it is an
object, the <code>padding</code> property can be passed. Otherwise, this function uses
<code>RSA_PKCS1_PADDING</code>.</p>
<p>Because RSA public keys can be derived from private keys, a private key may
be passed instead of a public key.</p>",0,34,
239,crypto,,publicEncrypt,crypto.publicEncrypt,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
<ul>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>
A PEM encoded public or private key, <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a>, or <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>.</li>
<li><code>oaepHash</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The hash function to use for OAEP padding and MGF1.
<strong>Default:</strong> <code>'sha1'</code></li>
<li><code>oaepLabel</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> The label to
use for OAEP padding. If not specified, no label is used.</li>
<li><code>passphrase</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> An optional
passphrase for the private key.</li>
<li><code>padding</code> <a href=""crypto.html#cryptoconstants"" class=""type"">&lt;crypto.constants&gt;</a> An optional padding value defined in
<code>crypto.constants</code>, which may be: <code>crypto.constants.RSA_NO_PADDING</code>,
<code>crypto.constants.RSA_PKCS1_PADDING</code>, or
<code>crypto.constants.RSA_PKCS1_OAEP_PADDING</code>.</li>
<li><code>encoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The string encoding to use when <code>buffer</code>, <code>key</code>,
<code>oaepLabel</code>, or <code>passphrase</code> are strings.</li>
</ul>
</li>
<li><code>buffer</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> A new <code>Buffer</code> with the encrypted content.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Encrypts the content of <code>buffer</code> with <code>key</code> and returns a new
<a href=""buffer.html""><code>Buffer</code></a> with encrypted content. The returned data can be decrypted using
the corresponding private key, for example using <a href=""crypto.html#cryptoprivatedecryptprivatekey-buffer""><code>crypto.privateDecrypt()</code></a>.</p>
<p>If <code>key</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if
<code>key</code> had been passed to <a href=""crypto.html#cryptocreatepublickeykey""><code>crypto.createPublicKey()</code></a>. If it is an
object, the <code>padding</code> property can be passed. Otherwise, this function uses
<code>RSA_PKCS1_OAEP_PADDING</code>.</p>
<p>Because RSA public keys can be derived from private keys, a private key may
be passed instead of a public key.</p>",0,33,
240,crypto,,randomBytes,crypto.randomBytes,The crypto.randomBytes() method is used to generate cryptographically well-built artificial random data and the number of bytes to be generated in the written code.,2,Others,
241,crypto,,randomFillSync,crypto.randomFillSync,"<p>Synchronous version of <a href=""crypto.html#cryptorandomfillbuffer-offset-size-callback""><code>crypto.randomFill()</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const { randomFillSync } = await import('node:crypto');

const buf = Buffer.alloc(10);
console.log(randomFillSync(buf).toString('hex'));

randomFillSync(buf, 5);
console.log(buf.toString('hex'));

// The above is equivalent to the following:
randomFillSync(buf, 5, 5);
console.log(buf.toString('hex'));
</code></pre>
<pre><code class=""language-cjs"">const { randomFillSync } = require('node:crypto');
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(10);
console.log(randomFillSync(buf).toString('hex'));

randomFillSync(buf, 5);
console.log(buf.toString('hex'));

// The above is equivalent to the following:
randomFillSync(buf, 5, 5);
console.log(buf.toString('hex'));
</code></pre>
<p>Any <code>ArrayBuffer</code>, <code>TypedArray</code> or <code>DataView</code> instance may be passed as
<code>buffer</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const { randomFillSync } = await import('node:crypto');

const a = new Uint32Array(10);
console.log(Buffer.from(randomFillSync(a).buffer,
                        a.byteOffset, a.byteLength).toString('hex'));

const b = new DataView(new ArrayBuffer(10));
console.log(Buffer.from(randomFillSync(b).buffer,
                        b.byteOffset, b.byteLength).toString('hex'));

const c = new ArrayBuffer(10);
console.log(Buffer.from(randomFillSync(c)).toString('hex'));
</code></pre>
<pre><code class=""language-cjs"">const { randomFillSync } = require('node:crypto');
const { Buffer } = require('node:buffer');

const a = new Uint32Array(10);
console.log(Buffer.from(randomFillSync(a).buffer,
                        a.byteOffset, a.byteLength).toString('hex'));

const b = new DataView(new ArrayBuffer(10));
console.log(Buffer.from(randomFillSync(b).buffer,
                        b.byteOffset, b.byteLength).toString('hex'));

const c = new ArrayBuffer(10);
console.log(Buffer.from(randomFillSync(c)).toString('hex'));
</code></pre>",3,Others,
242,crypto,,randomFill,crypto.randomFill,"<p>This function is similar to <a href=""crypto.html#cryptorandombytessize-callback""><code>crypto.randomBytes()</code></a> but requires the first
argument to be a <a href=""buffer.html""><code>Buffer</code></a> that will be filled. It also
requires that a callback is passed in.</p>
<p>If the <code>callback</code> function is not provided, an error will be thrown.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const { randomFill } = await import('node:crypto');

const buf = Buffer.alloc(10);
randomFill(buf, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});

randomFill(buf, 5, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});

// The above is equivalent to the following:
randomFill(buf, 5, 5, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});
</code></pre>
<pre><code class=""language-cjs"">const { randomFill } = require('node:crypto');
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(10);
randomFill(buf, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});

randomFill(buf, 5, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});

// The above is equivalent to the following:
randomFill(buf, 5, 5, (err, buf) => {
  if (err) throw err;
  console.log(buf.toString('hex'));
});
</code></pre>
<p>Any <code>ArrayBuffer</code>, <code>TypedArray</code>, or <code>DataView</code> instance may be passed as
<code>buffer</code>.</p>
<p>While this includes instances of <code>Float32Array</code> and <code>Float64Array</code>, this
function should not be used to generate random floating-point numbers. The
result may contain <code>+Infinity</code>, <code>-Infinity</code>, and <code>NaN</code>, and even if the array
contains finite numbers only, they are not drawn from a uniform random
distribution and have no meaningful lower or upper bounds.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const { randomFill } = await import('node:crypto');

const a = new Uint32Array(10);
randomFill(a, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const b = new DataView(new ArrayBuffer(10));
randomFill(b, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const c = new ArrayBuffer(10);
randomFill(c, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf).toString('hex'));
});
</code></pre>
<pre><code class=""language-cjs"">const { randomFill } = require('node:crypto');
const { Buffer } = require('node:buffer');

const a = new Uint32Array(10);
randomFill(a, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const b = new DataView(new ArrayBuffer(10));
randomFill(b, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const c = new ArrayBuffer(10);
randomFill(c, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf).toString('hex'));
});
</code></pre>
<p>This API uses libuv's threadpool, which can have surprising and
negative performance implications for some applications; see the
<a href=""cli.html#uv_threadpool_sizesize""><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>
<p>The asynchronous version of <code>crypto.randomFill()</code> is carried out in a single
threadpool request. To minimize threadpool task length variation, partition
large <code>randomFill</code> requests when doing so as part of fulfilling a client
request.</p>",4,Others,
243,crypto,,randomInt,crypto.randomInt,"<p>Return a random integer <code>n</code> such that <code>min &#x3C;= n &#x3C; max</code>.  This
implementation avoids <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Modulo_bias"">modulo bias</a>.</p>
<p>The range (<code>max - min</code>) must be less than 2<sup>48</sup>. <code>min</code> and <code>max</code> must
be <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"">safe integers</a>.</p>
<p>If the <code>callback</code> function is not provided, the random integer is
generated synchronously.</p>
<pre><code class=""language-mjs"">// Asynchronous
const {
  randomInt,
} = await import('node:crypto');

randomInt(3, (err, n) => {
  if (err) throw err;
  console.log(`Random number chosen from (0, 1, 2): ${n}`);
});
</code></pre>
<pre><code class=""language-cjs"">// Asynchronous
const {
  randomInt,
} = require('node:crypto');

randomInt(3, (err, n) => {
  if (err) throw err;
  console.log(`Random number chosen from (0, 1, 2): ${n}`);
});
</code></pre>
<pre><code class=""language-mjs"">// Synchronous
const {
  randomInt,
} = await import('node:crypto');

const n = randomInt(3);
console.log(`Random number chosen from (0, 1, 2): ${n}`);
</code></pre>
<pre><code class=""language-cjs"">// Synchronous
const {
  randomInt,
} = require('node:crypto');

const n = randomInt(3);
console.log(`Random number chosen from (0, 1, 2): ${n}`);
</code></pre>
<pre><code class=""language-mjs"">// With `min` argument
const {
  randomInt,
} = await import('node:crypto');

const n = randomInt(1, 7);
console.log(`The dice rolled: ${n}`);
</code></pre>
<pre><code class=""language-cjs"">// With `min` argument
const {
  randomInt,
} = require('node:crypto');

const n = randomInt(1, 7);
console.log(`The dice rolled: ${n}`);
</code></pre>",3,Others,
244,crypto,,randomUUID,crypto.randomUUID,"<p>Generates a random <a href=""https://www.rfc-editor.org/rfc/rfc4122.txt"">RFC 4122</a> version 4 UUID. The UUID is generated using a
cryptographic pseudorandom number generator.</p>",1,Others,
245,crypto,,scrypt,crypto.scrypt,"<p>Provides an asynchronous <a href=""https://en.wikipedia.org/wiki/Scrypt"">scrypt</a> implementation. Scrypt is a password-based
key derivation function that is designed to be expensive computationally and
memory-wise in order to make brute-force attacks unrewarding.</p>
<p>The <code>salt</code> should be as unique as possible. It is recommended that a salt is
random and at least 16 bytes long. See <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"">NIST SP 800-132</a> for details.</p>
<p>When passing strings for <code>password</code> or <code>salt</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<p>The <code>callback</code> function is called with two arguments: <code>err</code> and <code>derivedKey</code>.
<code>err</code> is an exception object when key derivation fails, otherwise <code>err</code> is
<code>null</code>. <code>derivedKey</code> is passed to the callback as a <a href=""buffer.html""><code>Buffer</code></a>.</p>
<p>An exception is thrown when any of the input arguments specify invalid values
or types.</p>
<pre><code class=""language-mjs"">const {
  scrypt,
} = await import('node:crypto');

// Using the factory defaults.
scrypt('password', 'salt', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
// Using a custom N parameter. Must be a power of two.
scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'
});
</code></pre>
<pre><code class=""language-cjs"">const {
  scrypt,
} = require('node:crypto');

// Using the factory defaults.
scrypt('password', 'salt', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
// Using a custom N parameter. Must be a power of two.
scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'
});
</code></pre>",5,Others,
246,crypto,,scryptSync,crypto.scryptSync,"<p>Provides a synchronous <a href=""https://en.wikipedia.org/wiki/Scrypt"">scrypt</a> implementation. Scrypt is a password-based
key derivation function that is designed to be expensive computationally and
memory-wise in order to make brute-force attacks unrewarding.</p>
<p>The <code>salt</code> should be as unique as possible. It is recommended that a salt is
random and at least 16 bytes long. See <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"">NIST SP 800-132</a> for details.</p>
<p>When passing strings for <code>password</code> or <code>salt</code>, please consider
<a href=""crypto.html#using-strings-as-inputs-to-cryptographic-apis"">caveats when using strings as inputs to cryptographic APIs</a>.</p>
<p>An exception is thrown when key derivation fails, otherwise the derived key is
returned as a <a href=""buffer.html""><code>Buffer</code></a>.</p>
<p>An exception is thrown when any of the input arguments specify invalid values
or types.</p>
<pre><code class=""language-mjs"">const {
  scryptSync,
} = await import('node:crypto');
// Using the factory defaults.

const key1 = scryptSync('password', 'salt', 64);
console.log(key1.toString('hex'));  // '3745e48...08d59ae'
// Using a custom N parameter. Must be a power of two.
const key2 = scryptSync('password', 'salt', 64, { N: 1024 });
console.log(key2.toString('hex'));  // '3745e48...aa39b34'
</code></pre>
<pre><code class=""language-cjs"">const {
  scryptSync,
} = require('node:crypto');
// Using the factory defaults.

const key1 = scryptSync('password', 'salt', 64);
console.log(key1.toString('hex'));  // '3745e48...08d59ae'
// Using a custom N parameter. Must be a power of two.
const key2 = scryptSync('password', 'salt', 64, { N: 1024 });
console.log(key2.toString('hex'));  // '3745e48...aa39b34'
</code></pre>",4,Others,
247,crypto,,secureHeapUsed,crypto.secureHeapUsed,,0,Others,
248,crypto,,setEngine,crypto.setEngine,"<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p>
<p><code>engine</code> could be either an id or a path to the engine's shared library.</p>
<p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code>
is a bit field taking one of or a mix of the following flags (defined in
<code>crypto.constants</code>):</p>
<ul>
<li><code>crypto.constants.ENGINE_METHOD_RSA</code></li>
<li><code>crypto.constants.ENGINE_METHOD_DSA</code></li>
<li><code>crypto.constants.ENGINE_METHOD_DH</code></li>
<li><code>crypto.constants.ENGINE_METHOD_RAND</code></li>
<li><code>crypto.constants.ENGINE_METHOD_EC</code></li>
<li><code>crypto.constants.ENGINE_METHOD_CIPHERS</code></li>
<li><code>crypto.constants.ENGINE_METHOD_DIGESTS</code></li>
<li><code>crypto.constants.ENGINE_METHOD_PKEY_METHS</code></li>
<li><code>crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS</code></li>
<li><code>crypto.constants.ENGINE_METHOD_ALL</code></li>
<li><code>crypto.constants.ENGINE_METHOD_NONE</code></li>
</ul>",2,Others,
249,crypto,,setFips,crypto.setFips,"<p>Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build.
Throws an error if FIPS mode is not available.</p>",1,Others,
250,crypto,,sign,crypto.sign,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type"" class=""type"">&lt;null&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type"" class=""type"">&lt;undefined&gt;</a></li>
<li><code>data</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>callback</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a>
<ul>
<li><code>err</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"" class=""type"">&lt;Error&gt;</a></li>
<li><code>signature</code> <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a></li>
</ul>
</li>
<li>Returns: <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> if the <code>callback</code> function is not provided.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Calculates and returns the signature for <code>data</code> using the given private key and
algorithm. If <code>algorithm</code> is <code>null</code> or <code>undefined</code>, then the algorithm is
dependent upon the key type (especially Ed25519 and Ed448).</p>
<p>If <code>key</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if <code>key</code> had been
passed to <a href=""crypto.html#cryptocreateprivatekeykey""><code>crypto.createPrivateKey()</code></a>. If it is an object, the following
additional properties can be passed:</p>
<ul>
<li>
<p><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> For DSA and ECDSA, this option specifies the
format of the generated signature. It can be one of the following:</p>
<ul>
<li><code>'der'</code> (default): DER-encoded ASN.1 signature structure encoding <code>(r, s)</code>.</li>
<li><code>'ieee-p1363'</code>: Signature format <code>r || s</code> as proposed in IEEE-P1363.</li>
</ul>
</li>
<li>
<p><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Optional padding value for RSA, one of the following:</p>
<ul>
<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>
<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>
</ul>
<p><code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function
used to sign the message as specified in section 3.1 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>.</p>
</li>
<li>
<p><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Salt length for when padding is
<code>RSA_PKCS1_PSS_PADDING</code>. The special value
<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest
size, <code>crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN</code> (default) sets it to the
maximum permissible value.</p>
</li>
</ul>
<p>If the <code>callback</code> function is provided this function uses libuv's threadpool.</p>",0,Others,
251,crypto,,timingSafeEqual,crypto.timingSafeEqual,"<p>This function compares the underlying bytes that represent the given
<code>ArrayBuffer</code>, <code>TypedArray</code>, or <code>DataView</code> instances using a constant-time
algorithm.</p>
<p>This function does not leak timing information that
would allow an attacker to guess one of the values. This is suitable for
comparing HMAC digests or secret values like authentication cookies or
<a href=""https://www.w3.org/TR/capability-urls/"">capability urls</a>.</p>
<p><code>a</code> and <code>b</code> must both be <code>Buffer</code>s, <code>TypedArray</code>s, or <code>DataView</code>s, and they
must have the same byte length. An error is thrown if <code>a</code> and <code>b</code> have
different byte lengths.</p>
<p>If at least one of <code>a</code> and <code>b</code> is a <code>TypedArray</code> with more than one byte per
entry, such as <code>Uint16Array</code>, the result will be computed using the platform
byte order.</p>
<p><strong class=""critical"">When both of the inputs are <code>Float32Array</code>s or
<code>Float64Array</code>s, this function might return unexpected results due to IEEE 754
encoding of floating-point numbers. In particular, neither <code>x === y</code> nor
<code>Object.is(x, y)</code> implies that the byte representations of two floating-point
numbers <code>x</code> and <code>y</code> are equal.</strong></p>
<p>Use of <code>crypto.timingSafeEqual</code> does not guarantee that the <em>surrounding</em> code
is timing-safe. Care should be taken to ensure that the surrounding code does
not introduce timing vulnerabilities.</p>",2,Others,
252,crypto,,verify,crypto.verify,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type"" class=""type"">&lt;null&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type"" class=""type"">&lt;undefined&gt;</a></li>
<li><code>data</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li><code>key</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a> | <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>signature</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a></li>
<li><code>callback</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a>
<ul>
<li><code>err</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"" class=""type"">&lt;Error&gt;</a></li>
<li><code>result</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
</ul>
</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> <code>true</code> or <code>false</code> depending on the validity of the
signature for the data and public key if the <code>callback</code> function is not
provided.</li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Verifies the given signature for <code>data</code> using the given key and algorithm. If
<code>algorithm</code> is <code>null</code> or <code>undefined</code>, then the algorithm is dependent upon the
key type (especially Ed25519 and Ed448).</p>
<p>If <code>key</code> is not a <a href=""crypto.html#class-keyobject""><code>KeyObject</code></a>, this function behaves as if <code>key</code> had been
passed to <a href=""crypto.html#cryptocreatepublickeykey""><code>crypto.createPublicKey()</code></a>. If it is an object, the following
additional properties can be passed:</p>
<ul>
<li>
<p><code>dsaEncoding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> For DSA and ECDSA, this option specifies the
format of the signature. It can be one of the following:</p>
<ul>
<li><code>'der'</code> (default): DER-encoded ASN.1 signature structure encoding <code>(r, s)</code>.</li>
<li><code>'ieee-p1363'</code>: Signature format <code>r || s</code> as proposed in IEEE-P1363.</li>
</ul>
</li>
<li>
<p><code>padding</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Optional padding value for RSA, one of the following:</p>
<ul>
<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>
<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>
</ul>
<p><code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function
used to sign the message as specified in section 3.1 of <a href=""https://www.rfc-editor.org/rfc/rfc4055.txt"">RFC 4055</a>.</p>
</li>
<li>
<p><code>saltLength</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Salt length for when padding is
<code>RSA_PKCS1_PSS_PADDING</code>. The special value
<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest
size, <code>crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN</code> (default) sets it to the
maximum permissible value.</p>
</li>
</ul>
<p>The <code>signature</code> argument is the previously calculated signature for the <code>data</code>.</p>
<p>Because public keys can be derived from private keys, a private key or a public
key may be passed for <code>key</code>.</p>
<p>If the <code>callback</code> function is provided this function uses libuv's threadpool.</p>",0,Others,
253,channel,,publish,channel.publish,"<p>Publish a message to any subscribers to the channel. This will trigger
message handlers synchronously so they will execute within the same context.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');

channel.publish({
  some: 'message',
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channel = diagnostics_channel.channel('my-channel');

channel.publish({
  some: 'message',
});
</code></pre>",1,,
254,channel,,subscribe,channel.subscribe,"<p>Register a message handler to subscribe to this channel. This message handler
will be run synchronously whenever a message is published to the channel. Any
errors thrown in the message handler will trigger an <a href=""process.html#event-uncaughtexception""><code>'uncaughtException'</code></a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');

channel.subscribe((message, name) => {
  // Received data
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channel = diagnostics_channel.channel('my-channel');

channel.subscribe((message, name) => {
  // Received data
});
</code></pre>",1,,
255,channel,,unsubscribe,channel.unsubscribe,"<p>Remove a message handler previously registered to this channel with
<a href=""diagnostics_channel.html#channelsubscribeonmessage""><code>channel.subscribe(onMessage)</code></a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');

function onMessage(message, name) {
  // Received data
}

channel.subscribe(onMessage);

channel.unsubscribe(onMessage);
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channel = diagnostics_channel.channel('my-channel');

function onMessage(message, name) {
  // Received data
}

channel.subscribe(onMessage);

channel.unsubscribe(onMessage);
</code></pre>",1,,
256,channel,,bindStore,channel.bindStore,"<p>When <a href=""diagnostics_channel.html#channelrunstorescontext-fn-thisarg-args""><code>channel.runStores(context, ...)</code></a> is called, the given context data
will be applied to any store bound to the channel. If the store has already been
bound the previous <code>transform</code> function will be replaced with the new one.
The <code>transform</code> function may be omitted to set the given context data as the
context directly.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';
import { AsyncLocalStorage } from 'node:async_hooks';

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store, (data) => {
  return { data };
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');
const { AsyncLocalStorage } = require('node:async_hooks');

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store, (data) => {
  return { data };
});
</code></pre>",2,,
257,channel,,unbindStore,channel.unbindStore,"<p>Remove a message handler previously registered to this channel with
<a href=""diagnostics_channel.html#channelbindstorestore-transform""><code>channel.bindStore(store)</code></a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';
import { AsyncLocalStorage } from 'node:async_hooks';

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store);
channel.unbindStore(store);
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');
const { AsyncLocalStorage } = require('node:async_hooks');

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store);
channel.unbindStore(store);
</code></pre>",1,,
258,channel,,runStores,channel.runStores,"<p>Applies the given data to any AsyncLocalStorage instances bound to the channel
for the duration of the given function, then publishes to the channel within
the scope of that data is applied to the stores.</p>
<p>If a transform function was given to <a href=""diagnostics_channel.html#channelbindstorestore-transform""><code>channel.bindStore(store)</code></a> it will be
applied to transform the message data before it becomes the context value for
the store. The prior storage context is accessible from within the transform
function in cases where context linking is required.</p>
<p>The context applied to the store should be accessible in any async code which
continues from execution which began during the given function, however
there are some situations in which <a href=""async_context.html#troubleshooting-context-loss"">context loss</a> may occur.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';
import { AsyncLocalStorage } from 'node:async_hooks';

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store, (message) => {
  const parent = store.getStore();
  return new Span(message, parent);
});
channel.runStores({ some: 'message' }, () => {
  store.getStore(); // Span({ some: 'message' })
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');
const { AsyncLocalStorage } = require('node:async_hooks');

const store = new AsyncLocalStorage();

const channel = diagnostics_channel.channel('my-channel');

channel.bindStore(store, (message) => {
  const parent = store.getStore();
  return new Span(message, parent);
});
channel.runStores({ some: 'message' }, () => {
  store.getStore(); // Span({ some: 'message' })
});
</code></pre>",4,,
259,tracingChannel,,subscribe,tracingChannel.subscribe,"<p>Helper to subscribe a collection of functions to the corresponding channels.
This is the same as calling <a href=""diagnostics_channel.html#channelsubscribeonmessage""><code>channel.subscribe(onMessage)</code></a> on each channel
individually.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.subscribe({
  start(message) {
    // Handle start message
  },
  end(message) {
    // Handle end message
  },
  asyncStart(message) {
    // Handle asyncStart message
  },
  asyncEnd(message) {
    // Handle asyncEnd message
  },
  error(message) {
    // Handle error message
  },
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.subscribe({
  start(message) {
    // Handle start message
  },
  end(message) {
    // Handle end message
  },
  asyncStart(message) {
    // Handle asyncStart message
  },
  asyncEnd(message) {
    // Handle asyncEnd message
  },
  error(message) {
    // Handle error message
  },
});
</code></pre>",1,,
260,tracingChannel,,unsubscribe,tracingChannel.unsubscribe,"<p>Helper to unsubscribe a collection of functions from the corresponding channels.
This is the same as calling <a href=""diagnostics_channel.html#channelunsubscribeonmessage""><code>channel.unsubscribe(onMessage)</code></a> on each channel
individually.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.unsubscribe({
  start(message) {
    // Handle start message
  },
  end(message) {
    // Handle end message
  },
  asyncStart(message) {
    // Handle asyncStart message
  },
  asyncEnd(message) {
    // Handle asyncEnd message
  },
  error(message) {
    // Handle error message
  },
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.unsubscribe({
  start(message) {
    // Handle start message
  },
  end(message) {
    // Handle end message
  },
  asyncStart(message) {
    // Handle asyncStart message
  },
  asyncEnd(message) {
    // Handle asyncEnd message
  },
  error(message) {
    // Handle error message
  },
});
</code></pre>",1,,
261,tracingChannel,,traceSync,tracingChannel.traceSync,"<p>Trace a synchronous function call. This will always produce a <a href=""diagnostics_channel.html#startevent""><code>start</code> event</a>
and <a href=""diagnostics_channel.html#endevent""><code>end</code> event</a> around the execution and may produce an <a href=""diagnostics_channel.html#errorevent""><code>error</code> event</a>
if the given function throws an error. This will run the given function using
<a href=""diagnostics_channel.html#channelrunstorescontext-fn-thisarg-args""><code>channel.runStores(context, ...)</code></a> on the <code>start</code> channel which ensures all
events should have any bound stores set to match this trace context.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceSync(() => {
  // Do something
}, {
  some: 'thing',
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceSync(() => {
  // Do something
}, {
  some: 'thing',
});
</code></pre>",4,,
262,tracingChannel,,tracePromise,tracingChannel.tracePromise,"<p>Trace a promise-returning function call. This will always produce a
<a href=""diagnostics_channel.html#startevent""><code>start</code> event</a> and <a href=""diagnostics_channel.html#endevent""><code>end</code> event</a> around the synchronous portion of the
function execution, and will produce an <a href=""diagnostics_channel.html#asyncstartevent""><code>asyncStart</code> event</a> and
<a href=""diagnostics_channel.html#asyncendevent""><code>asyncEnd</code> event</a> when a promise continuation is reached. It may also
produce an <a href=""diagnostics_channel.html#errorevent""><code>error</code> event</a> if the given function throws an error or the
returned promise rejects. This will run the given function using
<a href=""diagnostics_channel.html#channelrunstorescontext-fn-thisarg-args""><code>channel.runStores(context, ...)</code></a> on the <code>start</code> channel which ensures all
events should have any bound stores set to match this trace context.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.tracePromise(async () => {
  // Do something
}, {
  some: 'thing',
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.tracePromise(async () => {
  // Do something
}, {
  some: 'thing',
});
</code></pre>",4,,
263,tracingChannel,,traceCallback,tracingChannel.traceCallback,"<p>Trace a callback-receiving function call. This will always produce a
<a href=""diagnostics_channel.html#startevent""><code>start</code> event</a> and <a href=""diagnostics_channel.html#endevent""><code>end</code> event</a> around the synchronous portion of the
function execution, and will produce a <a href=""diagnostics_channel.html#asyncstartevent""><code>asyncStart</code> event</a> and
<a href=""diagnostics_channel.html#asyncendevent""><code>asyncEnd</code> event</a> around the callback execution. It may also produce an
<a href=""diagnostics_channel.html#errorevent""><code>error</code> event</a> if the given function throws an error or the returned
promise rejects. This will run the given function using
<a href=""diagnostics_channel.html#channelrunstorescontext-fn-thisarg-args""><code>channel.runStores(context, ...)</code></a> on the <code>start</code> channel which ensures all
events should have any bound stores set to match this trace context.</p>
<p>The <code>position</code> will be -1 by default to indicate the final argument should
be used as the callback.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceCallback((arg1, callback) => {
  // Do something
  callback(null, 'result');
}, 1, {
  some: 'thing',
}, thisArg, arg1, callback);
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceCallback((arg1, callback) => {
  // Do something
  callback(null, 'result');
}, {
  some: 'thing',
}, thisArg, arg1, callback);
</code></pre>
<p>The callback will also be run with <a href=""diagnostics_channel.html#channelrunstorescontext-fn-thisarg-args""><code>channel.runStores(context, ...)</code></a> which
enables context loss recovery in some cases.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';
import { AsyncLocalStorage } from 'node:async_hooks';

const channels = diagnostics_channel.tracingChannel('my-channel');
const myStore = new AsyncLocalStorage();

// The start channel sets the initial store data to something
// and stores that store data value on the trace context object
channels.start.bindStore(myStore, (data) => {
  const span = new Span(data);
  data.span = span;
  return span;
});

// Then asyncStart can restore from that data it stored previously
channels.asyncStart.bindStore(myStore, (data) => {
  return data.span;
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');
const { AsyncLocalStorage } = require('node:async_hooks');

const channels = diagnostics_channel.tracingChannel('my-channel');
const myStore = new AsyncLocalStorage();

// The start channel sets the initial store data to something
// and stores that store data value on the trace context object
channels.start.bindStore(myStore, (data) => {
  const span = new Span(data);
  data.span = span;
  return span;
});

// Then asyncStart can restore from that data it stored previously
channels.asyncStart.bindStore(myStore, (data) => {
  return data.span;
});
</code></pre>",5,,
264,diagnostics_channel,,hasSubscribers,diagnostics_channel.hasSubscribers,"<p>Check if there are active subscribers to the named channel. This is helpful if
the message you want to send might be expensive to prepare.</p>
<p>This API is optional but helpful when trying to publish messages from very
performance-sensitive code.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

if (diagnostics_channel.hasSubscribers('my-channel')) {
  // There are subscribers, prepare and publish message
}
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

if (diagnostics_channel.hasSubscribers('my-channel')) {
  // There are subscribers, prepare and publish message
}
</code></pre>",1,,
265,diagnostics_channel,,channel,diagnostics_channel.channel,"<p>This is the primary entry-point for anyone wanting to publish to a named
channel. It produces a channel object which is optimized to reduce overhead at
publish time as much as possible.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channel = diagnostics_channel.channel('my-channel');
</code></pre>",1,,
266,diagnostics_channel,,subscribe,diagnostics_channel.subscribe,"<p>Register a message handler to subscribe to this channel. This message handler
will be run synchronously whenever a message is published to the channel. Any
errors thrown in the message handler will trigger an <a href=""process.html#event-uncaughtexception""><code>'uncaughtException'</code></a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

diagnostics_channel.subscribe('my-channel', (message, name) => {
  // Received data
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

diagnostics_channel.subscribe('my-channel', (message, name) => {
  // Received data
});
</code></pre>",2,,
267,diagnostics_channel,,unsubscribe,diagnostics_channel.unsubscribe,"<p>Remove a message handler previously registered to this channel with
<a href=""diagnostics_channel.html#diagnostics_channelsubscribename-onmessage""><code>diagnostics_channel.subscribe(name, onMessage)</code></a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

function onMessage(message, name) {
  // Received data
}

diagnostics_channel.subscribe('my-channel', onMessage);

diagnostics_channel.unsubscribe('my-channel', onMessage);
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

function onMessage(message, name) {
  // Received data
}

diagnostics_channel.subscribe('my-channel', onMessage);

diagnostics_channel.unsubscribe('my-channel', onMessage);
</code></pre>",2,,
268,diagnostics_channel,,tracingChannel,diagnostics_channel.tracingChannel,"<p>Creates a <a href=""diagnostics_channel.html#class-tracingchannel""><code>TracingChannel</code></a> wrapper for the given
<a href=""diagnostics_channel.html#tracingchannel-channels"">TracingChannel Channels</a>. If a name is given, the corresponding tracing
channels will be created in the form of <code>tracing:${name}:${eventType}</code> where
<code>eventType</code> corresponds to the types of <a href=""diagnostics_channel.html#tracingchannel-channels"">TracingChannel Channels</a>.</p>
<pre><code class=""language-mjs"">import diagnostics_channel from 'node:diagnostics_channel';

const channelsByName = diagnostics_channel.tracingChannel('my-channel');

// or...

const channelsByCollection = diagnostics_channel.tracingChannel({
  start: diagnostics_channel.channel('tracing:my-channel:start'),
  end: diagnostics_channel.channel('tracing:my-channel:end'),
  asyncStart: diagnostics_channel.channel('tracing:my-channel:asyncStart'),
  asyncEnd: diagnostics_channel.channel('tracing:my-channel:asyncEnd'),
  error: diagnostics_channel.channel('tracing:my-channel:error'),
});
</code></pre>
<pre><code class=""language-cjs"">const diagnostics_channel = require('node:diagnostics_channel');

const channelsByName = diagnostics_channel.tracingChannel('my-channel');

// or...

const channelsByCollection = diagnostics_channel.tracingChannel({
  start: diagnostics_channel.channel('tracing:my-channel:start'),
  end: diagnostics_channel.channel('tracing:my-channel:end'),
  asyncStart: diagnostics_channel.channel('tracing:my-channel:asyncStart'),
  asyncEnd: diagnostics_channel.channel('tracing:my-channel:asyncEnd'),
  error: diagnostics_channel.channel('tracing:my-channel:error'),
});
</code></pre>",1,,
269,start,,start,start,"<p>The <code>start</code> event represents the point at which a function is called. At this
point the event data may contain function arguments or anything else available
at the very start of the execution of the function.</p>",1,Others,
270,end,,end,end,"<p>The <code>end</code> event represents the point at which a function call returns a value.
In the case of an async function this is when the promise returned not when the
function itself makes a return statement internally. At this point, if the
traced function was synchronous the <code>result</code> field will be set to the return
value of the function. Alternatively, the <code>error</code> field may be present to
represent any thrown errors.</p>
<p>It is recommended to listen specifically to the <code>error</code> event to track errors
as it may be possible for a traceable action to produce multiple errors. For
example, an async task which fails may be started internally before the sync
part of the task then throws an error.</p>",1,Others,
271,asyncStart,,asyncStart,asyncStart,"<p>The <code>asyncStart</code> event represents the callback or continuation of a traceable
function being reached. At this point things like callback arguments may be
available, or anything else expressing the ""result"" of the action.</p>
<p>For callbacks-based functions, the first argument of the callback will be
assigned to the <code>error</code> field, if not <code>undefined</code> or <code>null</code>, and the second
argument will be assigned to the <code>result</code> field.</p>
<p>For promises, the argument to the <code>resolve</code> path will be assigned to <code>result</code>
or the argument to the <code>reject</code> path will be assign to <code>error</code>.</p>
<p>It is recommended to listen specifically to the <code>error</code> event to track errors
as it may be possible for a traceable action to produce multiple errors. For
example, an async task which fails may be started internally before the sync
part of the task then throws an error.</p>",1,,
272,asyncEnd,,asyncEnd,asyncEnd,"<p>The <code>asyncEnd</code> event represents the callback of an asynchronous function
returning. It's not likely event data will change after the <code>asyncStart</code> event,
however it may be useful to see the point where the callback completes.</p>",1,Others,
273,error,,error,error,"<p>The <code>error</code> event represents any error produced by the traceable function
either synchronously or asynchronously. If an error is thrown in the
synchronous portion of the traced function the error will be assigned to the
<code>error</code> field of the event and the <code>error</code> event will be triggered. If an error
is received asynchronously through a callback or promise rejection it will also
be assigned to the <code>error</code> field of the event and trigger the <code>error</code> event.</p>
<p>It is possible for a single traceable function call to produce errors multiple
times so this should be considered when consuming this event. For example, if
another async task is triggered internally which fails and then the sync part
of the function then throws and error two <code>error</code> events will be emitted, one
for the sync error and one for the async error.</p>",1,Others,
274,dns,,getServers,dns.getServers,"<p>Returns an array of IP address strings, formatted according to <a href=""https://tools.ietf.org/html/rfc5952#section-6"">RFC 5952</a>,
that are currently configured for DNS resolution. A string will include a port
section if a custom port is used.</p>
<!-- eslint-disable semi-->
<pre><code class=""language-js"">[
  '4.4.4.4',
  '2001:4860:4860::8888',
  '4.4.4.4:1053',
  '[2001:4860:4860::8888]:1053',
]
</code></pre>",0,26,
275,dns,,lookup,dns.lookup,"<p>Resolves a host name (e.g. <code>'nodejs.org'</code>) into the first found A (IPv4) or
AAAA (IPv6) record. All <code>option</code> properties are optional. If <code>options</code> is an
integer, then it must be <code>4</code> or <code>6</code> – if <code>options</code> is <code>0</code> or not provided, then
IPv4 and IPv6 addresses are both returned if found.</p>
<p>With the <code>all</code> option set to <code>true</code>, the arguments for <code>callback</code> change to
<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the
properties <code>address</code> and <code>family</code>.</p>
<p>On error, <code>err</code> is an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code> is the error code.
Keep in mind that <code>err.code</code> will be set to <code>'ENOTFOUND'</code> not only when
the host name does not exist but also when the lookup fails in other ways
such as no available file descriptors.</p>
<p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.
The implementation uses an operating system facility that can associate names
with addresses and vice versa. This implementation can have subtle but
important consequences on the behavior of any Node.js program. Please take some
time to consult the <a href=""dns.html#implementation-considerations"">Implementation considerations section</a> before using
<code>dns.lookup()</code>.</p>
<p>Example usage:</p>
<pre><code class=""language-js"">const dns = require('node:dns');
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};
dns.lookup('example.com', options, (err, address, family) =>
  console.log('address: %j family: IPv%s', address, family));
// address: ""2606:2800:220:1:248:1893:25c8:1946"" family: IPv6

// When options.all is true, the result will be an Array.
options.all = true;
dns.lookup('example.com', options, (err, addresses) =>
  console.log('addresses: %j', addresses));
// addresses: [{""address"":""2606:2800:220:1:248:1893:25c8:1946"",""family"":6}]
</code></pre>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, and <code>all</code>
is not set to <code>true</code>, it returns a <code>Promise</code> for an <code>Object</code> with <code>address</code> and
<code>family</code> properties.</p>",3,21,
276,dns,,lookupService,dns.lookupService,"<p>Resolves the given <code>address</code> and <code>port</code> into a host name and service using
the operating system's underlying <code>getnameinfo</code> implementation.</p>
<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.
The <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>
will be thrown.</p>
<p>On an error, <code>err</code> is an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code> is the error code.</p>
<pre><code class=""language-js"">const dns = require('node:dns');
dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {
  console.log(hostname, service);
  // Prints: localhost ssh
});
</code></pre>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns a
<code>Promise</code> for an <code>Object</code> with <code>hostname</code> and <code>service</code> properties.</p>",3,21,
277,dns,,resolve,dns.resolve,"<p>Uses the DNS protocol to resolve a host name (e.g. <code>'nodejs.org'</code>) into an array
of the resource records. The <code>callback</code> function has arguments
<code>(err, records)</code>. When successful, <code>records</code> will be an array of resource
records. The type and structure of individual results varies based on <code>rrtype</code>:</p>
<table>
<thead>
<tr>
<th><code>rrtype</code></th>
<th><code>records</code> contains</th>
<th>Result type</th>
<th>Shorthand method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'A'</code></td>
<td>IPv4 addresses (default)</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnsresolve4hostname-options-callback""><code>dns.resolve4()</code></a></td>
</tr>
<tr>
<td><code>'AAAA'</code></td>
<td>IPv6 addresses</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnsresolve6hostname-options-callback""><code>dns.resolve6()</code></a></td>
</tr>
<tr>
<td><code>'ANY'</code></td>
<td>any records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolveanyhostname-callback""><code>dns.resolveAny()</code></a></td>
</tr>
<tr>
<td><code>'CAA'</code></td>
<td>CA authorization records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolvecaahostname-callback""><code>dns.resolveCaa()</code></a></td>
</tr>
<tr>
<td><code>'CNAME'</code></td>
<td>canonical name records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnsresolvecnamehostname-callback""><code>dns.resolveCname()</code></a></td>
</tr>
<tr>
<td><code>'MX'</code></td>
<td>mail exchange records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolvemxhostname-callback""><code>dns.resolveMx()</code></a></td>
</tr>
<tr>
<td><code>'NAPTR'</code></td>
<td>name authority pointer records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolvenaptrhostname-callback""><code>dns.resolveNaptr()</code></a></td>
</tr>
<tr>
<td><code>'NS'</code></td>
<td>name server records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnsresolvenshostname-callback""><code>dns.resolveNs()</code></a></td>
</tr>
<tr>
<td><code>'PTR'</code></td>
<td>pointer records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnsresolveptrhostname-callback""><code>dns.resolvePtr()</code></a></td>
</tr>
<tr>
<td><code>'SOA'</code></td>
<td>start of authority records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolvesoahostname-callback""><code>dns.resolveSoa()</code></a></td>
</tr>
<tr>
<td><code>'SRV'</code></td>
<td>service records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnsresolvesrvhostname-callback""><code>dns.resolveSrv()</code></a></td>
</tr>
<tr>
<td><code>'TXT'</code></td>
<td>text records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a></td>
<td><a href=""dns.html#dnsresolvetxthostname-callback""><code>dns.resolveTxt()</code></a></td>
</tr>
</tbody>
</table>
<p>On error, <code>err</code> is an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code> is one of the
<a href=""dns.html#error-codes"">DNS error codes</a>.</p>",3,21,
278,dns,,resolve4,dns.resolve4,"<p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of IPv4 addresses (e.g.
<code>['74.125.79.104', '74.125.79.105', '74.125.79.106']</code>).</p>",3,21,
279,dns,,resolve6,dns.resolve6,"<p>Uses the DNS protocol to resolve IPv6 addresses (<code>AAAA</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of IPv6 addresses.</p>",3,21,
280,dns,,resolveAny,dns.resolveAny,"<p>Uses the DNS protocol to resolve all records (also known as <code>ANY</code> or <code>*</code> query).
The <code>ret</code> argument passed to the <code>callback</code> function will be an array containing
various types of records. Each object has a property <code>type</code> that indicates the
type of the current record. And depending on the <code>type</code>, additional properties
will be present on the object:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Properties</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'A'</code></td>
<td><code>address</code>/<code>ttl</code></td>
</tr>
<tr>
<td><code>'AAAA'</code></td>
<td><code>address</code>/<code>ttl</code></td>
</tr>
<tr>
<td><code>'CNAME'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'MX'</code></td>
<td>Refer to <a href=""dns.html#dnsresolvemxhostname-callback""><code>dns.resolveMx()</code></a></td>
</tr>
<tr>
<td><code>'NAPTR'</code></td>
<td>Refer to <a href=""dns.html#dnsresolvenaptrhostname-callback""><code>dns.resolveNaptr()</code></a></td>
</tr>
<tr>
<td><code>'NS'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'PTR'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'SOA'</code></td>
<td>Refer to <a href=""dns.html#dnsresolvesoahostname-callback""><code>dns.resolveSoa()</code></a></td>
</tr>
<tr>
<td><code>'SRV'</code></td>
<td>Refer to <a href=""dns.html#dnsresolvesrvhostname-callback""><code>dns.resolveSrv()</code></a></td>
</tr>
<tr>
<td><code>'TXT'</code></td>
<td>This type of record contains an array property called <code>entries</code> which refers to <a href=""dns.html#dnsresolvetxthostname-callback""><code>dns.resolveTxt()</code></a>, e.g. <code>{ entries: ['...'], type: 'TXT' }</code></td>
</tr>
</tbody>
</table>
<p>Here is an example of the <code>ret</code> object passed to the callback:</p>
<!-- eslint-disable semi -->
<pre><code class=""language-js"">[ { type: 'A', address: '127.0.0.1', ttl: 299 },
  { type: 'CNAME', value: 'example.com' },
  { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },
  { type: 'NS', value: 'ns1.example.com' },
  { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },
  { type: 'SOA',
    nsname: 'ns1.example.com',
    hostmaster: 'admin.example.com',
    serial: 156696742,
    refresh: 900,
    retry: 900,
    expire: 1800,
    minttl: 60 } ]
</code></pre>
<p>DNS server operators may choose not to respond to <code>ANY</code>
queries. It may be better to call individual methods like <a href=""dns.html#dnsresolve4hostname-options-callback""><code>dns.resolve4()</code></a>,
<a href=""dns.html#dnsresolvemxhostname-callback""><code>dns.resolveMx()</code></a>, and so on. For more details, see <a href=""https://tools.ietf.org/html/rfc8482"">RFC 8482</a>.</p>",2,21,
281,dns,,resolveCname,dns.resolveCname,"<p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The
<code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of canonical name records available for the <code>hostname</code>
(e.g. <code>['bar.example.com']</code>).</p>",2,21,
282,dns,,resolveCaa,dns.resolveCaa,"<p>Uses the DNS protocol to resolve <code>CAA</code> records for the <code>hostname</code>. The
<code>addresses</code> argument passed to the <code>callback</code> function
will contain an array of certification authority authorization records
available for the <code>hostname</code> (e.g. <code>[{critical: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]</code>).</p>",2,21,
283,dns,,resolveMx,dns.resolveMx,"<p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
contain an array of objects containing both a <code>priority</code> and <code>exchange</code>
property (e.g. <code>[{priority: 10, exchange: 'mx.example.com'}, ...]</code>).</p>",2,21,
284,dns,,resolveNaptr,dns.resolveNaptr,"<p>Uses the DNS protocol to resolve regular expression-based records (<code>NAPTR</code>
records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code>
function will contain an array of objects with the following properties:</p>
<ul>
<li><code>flags</code></li>
<li><code>service</code></li>
<li><code>regexp</code></li>
<li><code>replacement</code></li>
<li><code>order</code></li>
<li><code>preference</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  flags: 's',
  service: 'SIP+D2U',
  regexp: '',
  replacement: '_sip._udp.example.com',
  order: 30,
  preference: 100
}
</code></pre>",2,21,
285,dns,,resolveNs,dns.resolveNs,"<p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
contain an array of name server records available for <code>hostname</code>
(e.g. <code>['ns1.example.com', 'ns2.example.com']</code>).</p>",2,21,
286,dns,,resolvePtr,dns.resolvePtr,"<p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
be an array of strings containing the reply records.</p>",2,21,
287,dns,,resolveSoa,dns.resolveSoa,"<p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for
the <code>hostname</code>. The <code>address</code> argument passed to the <code>callback</code> function will
be an object with the following properties:</p>
<ul>
<li><code>nsname</code></li>
<li><code>hostmaster</code></li>
<li><code>serial</code></li>
<li><code>refresh</code></li>
<li><code>retry</code></li>
<li><code>expire</code></li>
<li><code>minttl</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  nsname: 'ns.example.com',
  hostmaster: 'root.example.com',
  serial: 2013101809,
  refresh: 10000,
  retry: 2400,
  expire: 604800,
  minttl: 3600
}
</code></pre>",2,21,
288,dns,,resolveSrv,dns.resolveSrv,"<p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the
<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will
be an array of objects with the following properties:</p>
<ul>
<li><code>priority</code></li>
<li><code>weight</code></li>
<li><code>port</code></li>
<li><code>name</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  priority: 10,
  weight: 5,
  port: 21223,
  name: 'service.example.com'
}
</code></pre>",2,21,
289,dns,,resolveTxt,dns.resolveTxt,"<!--lint disable no-undefined-references list-item-bullet-indent-->
<ul>
<li><code>hostname</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>callback</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a>
<ul>
<li><code>err</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"" class=""type"">&lt;Error&gt;</a></li>
<li><code>records</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&#x3C;string[][]></a></li>
</ul>
</li>
</ul>
<!--lint enable no-undefined-references list-item-bullet-indent-->
<p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the
<code>hostname</code>. The <code>records</code> argument passed to the <code>callback</code> function is a
two-dimensional array of the text records available for <code>hostname</code> (e.g.
<code>[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]</code>). Each sub-array contains TXT chunks of
one record. Depending on the use case, these could be either joined together or
treated separately.</p>",0,21,
290,dns,,reverse,dns.reverse,"<p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an
array of host names.</p>
<p>On error, <code>err</code> is an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code> is
one of the <a href=""dns.html#error-codes"">DNS error codes</a>.</p>",2,21,
291,dns,,setDefaultResultOrder,dns.setDefaultResultOrder,"<p>Set the default value of <code>verbatim</code> in <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> and
<a href=""dns.html#dnspromiseslookuphostname-options""><code>dnsPromises.lookup()</code></a>. The value could be:</p>
<ul>
<li><code>ipv4first</code>: sets default <code>verbatim</code> <code>false</code>.</li>
<li><code>verbatim</code>: sets default <code>verbatim</code> <code>true</code>.</li>
</ul>
<p>The default is <code>verbatim</code> and <a href=""dns.html#dnssetdefaultresultorderorder""><code>dns.setDefaultResultOrder()</code></a> have higher
priority than <a href=""cli.html#--dns-result-orderorder""><code>--dns-result-order</code></a>. When using <a href=""worker_threads.html"">worker threads</a>,
<a href=""dns.html#dnssetdefaultresultorderorder""><code>dns.setDefaultResultOrder()</code></a> from the main thread won't affect the default
dns orders in workers.</p>",1,Others,
292,dns,,getDefaultResultOrder,dns.getDefaultResultOrder,"<p>Get the default value for <code>verbatim</code> in <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> and
<a href=""dns.html#dnspromiseslookuphostname-options""><code>dnsPromises.lookup()</code></a>. The value could be:</p>
<ul>
<li><code>ipv4first</code>: for <code>verbatim</code> defaulting to <code>false</code>.</li>
<li><code>verbatim</code>: for <code>verbatim</code> defaulting to <code>true</code>.</li>
</ul>",0,Others,
293,dns,,setServers,dns.setServers,"<p>Sets the IP address and port of servers to be used when performing DNS
resolution. The <code>servers</code> argument is an array of <a href=""https://tools.ietf.org/html/rfc5952#section-6"">RFC 5952</a> formatted
addresses. If the port is the IANA default DNS port (53) it can be omitted.</p>
<pre><code class=""language-js"">dns.setServers([
  '4.4.4.4',
  '[2001:4860:4860::8888]',
  '4.4.4.4:1053',
  '[2001:4860:4860::8888]:1053',
]);
</code></pre>
<p>An error will be thrown if an invalid address is provided.</p>
<p>The <code>dns.setServers()</code> method must not be called while a DNS query is in
progress.</p>
<p>The <a href=""dns.html#dnssetserversservers""><code>dns.setServers()</code></a> method affects only <a href=""dns.html#dnsresolvehostname-rrtype-callback""><code>dns.resolve()</code></a>,
<code>dns.resolve*()</code> and <a href=""dns.html#dnsreverseip-callback""><code>dns.reverse()</code></a> (and specifically <em>not</em>
<a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a>).</p>
<p>This method works much like
<a href=""https://man7.org/linux/man-pages/man5/resolv.conf.5.html"">resolve.conf</a>.
That is, if attempting to resolve with the first server provided results in a
<code>NOTFOUND</code> error, the <code>resolve()</code> method will <em>not</em> attempt to resolve with
subsequent servers provided. Fallback DNS servers will only be used if the
earlier ones time out or result in some other error.</p>",1,25,
294,Resolver,,Resolver,Resolver,"<p>Create a new resolver.</p>
<ul>
<li><code>options</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a>
<ul>
<li><code>timeout</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> Query timeout in milliseconds, or <code>-1</code> to use the
default timeout.</li>
<li><code>tries</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> The number of tries the resolver will try contacting
each name server before giving up. <strong>Default:</strong> <code>4</code></li>
</ul>
</li>
</ul>",0,Others,
295,resolver,,cancel,resolver.cancel,"<p>Cancel all outstanding DNS queries made by this resolver. The corresponding
callbacks will be called with an error with code <code>ECANCELLED</code>.</p>",0,Others,
296,resolver,,setLocalAddress,resolver.setLocalAddress,"<p>The resolver instance will send its requests from the specified IP address.
This allows programs to specify outbound interfaces when used on multi-homed
systems.</p>
<p>If a v4 or v6 address is not specified, it is set to the default and the
operating system will choose a local address automatically.</p>
<p>The resolver will use the v4 local address when making requests to IPv4 DNS
servers, and the v6 local address when making requests to IPv6 DNS servers.
The <code>rrtype</code> of resolution requests has no impact on the local address used.</p>",2,25,
297,resolver,,cancel,resolver.cancel,"<p>Cancel all outstanding DNS queries made by this resolver. The corresponding
promises will be rejected with an error with the code <code>ECANCELLED</code>.</p>",0,Others,
298,dnsPromises,,getServers,dnsPromises.getServers,"<p>Returns an array of IP address strings, formatted according to <a href=""https://tools.ietf.org/html/rfc5952#section-6"">RFC 5952</a>,
that are currently configured for DNS resolution. A string will include a port
section if a custom port is used.</p>
<!-- eslint-disable semi-->
<pre><code class=""language-js"">[
  '4.4.4.4',
  '2001:4860:4860::8888',
  '4.4.4.4:1053',
  '[2001:4860:4860::8888]:1053',
]
</code></pre>",0,26,
299,dnsPromises,,lookup,dnsPromises.lookup,"<p>Resolves a host name (e.g. <code>'nodejs.org'</code>) into the first found A (IPv4) or
AAAA (IPv6) record. All <code>option</code> properties are optional. If <code>options</code> is an
integer, then it must be <code>4</code> or <code>6</code> – if <code>options</code> is not provided, then IPv4
and IPv6 addresses are both returned if found.</p>
<p>With the <code>all</code> option set to <code>true</code>, the <code>Promise</code> is resolved with <code>addresses</code>
being an array of objects with the properties <code>address</code> and <code>family</code>.</p>
<p>On error, the <code>Promise</code> is rejected with an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code>
is the error code.
Keep in mind that <code>err.code</code> will be set to <code>'ENOTFOUND'</code> not only when
the host name does not exist but also when the lookup fails in other ways
such as no available file descriptors.</p>
<p><a href=""dns.html#dnspromiseslookuphostname-options""><code>dnsPromises.lookup()</code></a> does not necessarily have anything to do with the DNS
protocol. The implementation uses an operating system facility that can
associate names with addresses and vice versa. This implementation can have
subtle but important consequences on the behavior of any Node.js program. Please
take some time to consult the <a href=""dns.html#implementation-considerations"">Implementation considerations section</a> before
using <code>dnsPromises.lookup()</code>.</p>
<p>Example usage:</p>
<pre><code class=""language-js"">const dns = require('node:dns');
const dnsPromises = dns.promises;
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};

dnsPromises.lookup('example.com', options).then((result) => {
  console.log('address: %j family: IPv%s', result.address, result.family);
  // address: ""2606:2800:220:1:248:1893:25c8:1946"" family: IPv6
});

// When options.all is true, the result will be an Array.
options.all = true;
dnsPromises.lookup('example.com', options).then((result) => {
  console.log('addresses: %j', result);
  // addresses: [{""address"":""2606:2800:220:1:248:1893:25c8:1946"",""family"":6}]
});
</code></pre>",2,21,
300,dnsPromises,,lookupService,dnsPromises.lookupService,"<p>Resolves the given <code>address</code> and <code>port</code> into a host name and service using
the operating system's underlying <code>getnameinfo</code> implementation.</p>
<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.
The <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>
will be thrown.</p>
<p>On error, the <code>Promise</code> is rejected with an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code>
is the error code.</p>
<pre><code class=""language-js"">const dnsPromises = require('node:dns').promises;
dnsPromises.lookupService('127.0.0.1', 22).then((result) => {
  console.log(result.hostname, result.service);
  // Prints: localhost ssh
});
</code></pre>",2,21,
301,dnsPromises,,resolve,dnsPromises.resolve,"<p>Uses the DNS protocol to resolve a host name (e.g. <code>'nodejs.org'</code>) into an array
of the resource records. When successful, the <code>Promise</code> is resolved with an
array of resource records. The type and structure of individual results vary
based on <code>rrtype</code>:</p>
<table>
<thead>
<tr>
<th><code>rrtype</code></th>
<th><code>records</code> contains</th>
<th>Result type</th>
<th>Shorthand method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'A'</code></td>
<td>IPv4 addresses (default)</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolve4hostname-options""><code>dnsPromises.resolve4()</code></a></td>
</tr>
<tr>
<td><code>'AAAA'</code></td>
<td>IPv6 addresses</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolve6hostname-options""><code>dnsPromises.resolve6()</code></a></td>
</tr>
<tr>
<td><code>'ANY'</code></td>
<td>any records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolveanyhostname""><code>dnsPromises.resolveAny()</code></a></td>
</tr>
<tr>
<td><code>'CAA'</code></td>
<td>CA authorization records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvecaahostname""><code>dnsPromises.resolveCaa()</code></a></td>
</tr>
<tr>
<td><code>'CNAME'</code></td>
<td>canonical name records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvecnamehostname""><code>dnsPromises.resolveCname()</code></a></td>
</tr>
<tr>
<td><code>'MX'</code></td>
<td>mail exchange records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvemxhostname""><code>dnsPromises.resolveMx()</code></a></td>
</tr>
<tr>
<td><code>'NAPTR'</code></td>
<td>name authority pointer records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvenaptrhostname""><code>dnsPromises.resolveNaptr()</code></a></td>
</tr>
<tr>
<td><code>'NS'</code></td>
<td>name server records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvenshostname""><code>dnsPromises.resolveNs()</code></a></td>
</tr>
<tr>
<td><code>'PTR'</code></td>
<td>pointer records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolveptrhostname""><code>dnsPromises.resolvePtr()</code></a></td>
</tr>
<tr>
<td><code>'SOA'</code></td>
<td>start of authority records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvesoahostname""><code>dnsPromises.resolveSoa()</code></a></td>
</tr>
<tr>
<td><code>'SRV'</code></td>
<td>service records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvesrvhostname""><code>dnsPromises.resolveSrv()</code></a></td>
</tr>
<tr>
<td><code>'TXT'</code></td>
<td>text records</td>
<td><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a></td>
<td><a href=""dns.html#dnspromisesresolvetxthostname""><code>dnsPromises.resolveTxt()</code></a></td>
</tr>
</tbody>
</table>
<p>On error, the <code>Promise</code> is rejected with an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code>
is one of the <a href=""dns.html#error-codes"">DNS error codes</a>.</p>",2,21,
302,dnsPromises,,resolve4,dnsPromises.resolve4,"<p>Uses the DNS protocol to resolve IPv4 addresses (<code>A</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of IPv4
addresses (e.g. <code>['74.125.79.104', '74.125.79.105', '74.125.79.106']</code>).</p>",2,21,
303,dnsPromises,,resolve6,dnsPromises.resolve6,"<p>Uses the DNS protocol to resolve IPv6 addresses (<code>AAAA</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of IPv6
addresses.</p>",2,21,
304,dnsPromises,,resolveAny,dnsPromises.resolveAny,"<p>Uses the DNS protocol to resolve all records (also known as <code>ANY</code> or <code>*</code> query).
On success, the <code>Promise</code> is resolved with an array containing various types of
records. Each object has a property <code>type</code> that indicates the type of the
current record. And depending on the <code>type</code>, additional properties will be
present on the object:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Properties</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'A'</code></td>
<td><code>address</code>/<code>ttl</code></td>
</tr>
<tr>
<td><code>'AAAA'</code></td>
<td><code>address</code>/<code>ttl</code></td>
</tr>
<tr>
<td><code>'CNAME'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'MX'</code></td>
<td>Refer to <a href=""dns.html#dnspromisesresolvemxhostname""><code>dnsPromises.resolveMx()</code></a></td>
</tr>
<tr>
<td><code>'NAPTR'</code></td>
<td>Refer to <a href=""dns.html#dnspromisesresolvenaptrhostname""><code>dnsPromises.resolveNaptr()</code></a></td>
</tr>
<tr>
<td><code>'NS'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'PTR'</code></td>
<td><code>value</code></td>
</tr>
<tr>
<td><code>'SOA'</code></td>
<td>Refer to <a href=""dns.html#dnspromisesresolvesoahostname""><code>dnsPromises.resolveSoa()</code></a></td>
</tr>
<tr>
<td><code>'SRV'</code></td>
<td>Refer to <a href=""dns.html#dnspromisesresolvesrvhostname""><code>dnsPromises.resolveSrv()</code></a></td>
</tr>
<tr>
<td><code>'TXT'</code></td>
<td>This type of record contains an array property called <code>entries</code> which refers to <a href=""dns.html#dnspromisesresolvetxthostname""><code>dnsPromises.resolveTxt()</code></a>, e.g. <code>{ entries: ['...'], type: 'TXT' }</code></td>
</tr>
</tbody>
</table>
<p>Here is an example of the result object:</p>
<!-- eslint-disable semi -->
<pre><code class=""language-js"">[ { type: 'A', address: '127.0.0.1', ttl: 299 },
  { type: 'CNAME', value: 'example.com' },
  { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },
  { type: 'NS', value: 'ns1.example.com' },
  { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },
  { type: 'SOA',
    nsname: 'ns1.example.com',
    hostmaster: 'admin.example.com',
    serial: 156696742,
    refresh: 900,
    retry: 900,
    expire: 1800,
    minttl: 60 } ]
</code></pre>",1,21,
305,dnsPromises,,resolveCaa,dnsPromises.resolveCaa,"<p>Uses the DNS protocol to resolve <code>CAA</code> records for the <code>hostname</code>. On success,
the <code>Promise</code> is resolved with an array of objects containing available
certification authority authorization records available for the <code>hostname</code>
(e.g. <code>[{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]</code>).</p>",1,21,
306,dnsPromises,,resolveCname,dnsPromises.resolveCname,"<p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. On success,
the <code>Promise</code> is resolved with an array of canonical name records available for
the <code>hostname</code> (e.g. <code>['bar.example.com']</code>).</p>",1,21,
307,dnsPromises,,resolveMx,dnsPromises.resolveMx,"<p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of objects
containing both a <code>priority</code> and <code>exchange</code> property (e.g.
<code>[{priority: 10, exchange: 'mx.example.com'}, ...]</code>).</p>",1,21,
308,dnsPromises,,resolveNaptr,dnsPromises.resolveNaptr,"<p>Uses the DNS protocol to resolve regular expression-based records (<code>NAPTR</code>
records) for the <code>hostname</code>. On success, the <code>Promise</code> is resolved with an array
of objects with the following properties:</p>
<ul>
<li><code>flags</code></li>
<li><code>service</code></li>
<li><code>regexp</code></li>
<li><code>replacement</code></li>
<li><code>order</code></li>
<li><code>preference</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  flags: 's',
  service: 'SIP+D2U',
  regexp: '',
  replacement: '_sip._udp.example.com',
  order: 30,
  preference: 100
}
</code></pre>",1,21,
309,dnsPromises,,resolveNs,dnsPromises.resolveNs,"<p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of name server
records available for <code>hostname</code> (e.g.
<code>['ns1.example.com', 'ns2.example.com']</code>).</p>",1,21,
310,dnsPromises,,resolvePtr,dnsPromises.resolvePtr,"<p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of strings
containing the reply records.</p>",1,21,
311,dnsPromises,,resolveSoa,dnsPromises.resolveSoa,"<p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for
the <code>hostname</code>. On success, the <code>Promise</code> is resolved with an object with the
following properties:</p>
<ul>
<li><code>nsname</code></li>
<li><code>hostmaster</code></li>
<li><code>serial</code></li>
<li><code>refresh</code></li>
<li><code>retry</code></li>
<li><code>expire</code></li>
<li><code>minttl</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  nsname: 'ns.example.com',
  hostmaster: 'root.example.com',
  serial: 2013101809,
  refresh: 10000,
  retry: 2400,
  expire: 604800,
  minttl: 3600
}
</code></pre>",1,21,
312,dnsPromises,,resolveSrv,dnsPromises.resolveSrv,"<p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with an array of objects with
the following properties:</p>
<ul>
<li><code>priority</code></li>
<li><code>weight</code></li>
<li><code>port</code></li>
<li><code>name</code></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  priority: 10,
  weight: 5,
  port: 21223,
  name: 'service.example.com'
}
</code></pre>",1,21,
313,dnsPromises,,resolveTxt,dnsPromises.resolveTxt,"<p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the
<code>hostname</code>. On success, the <code>Promise</code> is resolved with a two-dimensional array
of the text records available for <code>hostname</code> (e.g.
<code>[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]</code>). Each sub-array contains TXT chunks of
one record. Depending on the use case, these could be either joined together or
treated separately.</p>",1,21,
314,dnsPromises,,reverse,dnsPromises.reverse,"<p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an
array of host names.</p>
<p>On error, the <code>Promise</code> is rejected with an <a href=""errors.html#class-error""><code>Error</code></a> object, where <code>err.code</code>
is one of the <a href=""dns.html#error-codes"">DNS error codes</a>.</p>",1,21,
315,dnsPromises,,setDefaultResultOrder,dnsPromises.setDefaultResultOrder,"<p>Set the default value of <code>verbatim</code> in <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> and
<a href=""dns.html#dnspromiseslookuphostname-options""><code>dnsPromises.lookup()</code></a>. The value could be:</p>
<ul>
<li><code>ipv4first</code>: sets default <code>verbatim</code> <code>false</code>.</li>
<li><code>verbatim</code>: sets default <code>verbatim</code> <code>true</code>.</li>
</ul>
<p>The default is <code>verbatim</code> and <a href=""dns.html#dnspromisessetdefaultresultorderorder""><code>dnsPromises.setDefaultResultOrder()</code></a> have
higher priority than <a href=""cli.html#--dns-result-orderorder""><code>--dns-result-order</code></a>. When using <a href=""worker_threads.html"">worker threads</a>,
<a href=""dns.html#dnspromisessetdefaultresultorderorder""><code>dnsPromises.setDefaultResultOrder()</code></a> from the main thread won't affect the
default dns orders in workers.</p>",1,Others,
316,dnsPromises,,getDefaultResultOrder,dnsPromises.getDefaultResultOrder,<p>Get the value of <code>dnsOrder</code>.</p>,0,Others,
317,dnsPromises,,setServers,dnsPromises.setServers,"<p>Sets the IP address and port of servers to be used when performing DNS
resolution. The <code>servers</code> argument is an array of <a href=""https://tools.ietf.org/html/rfc5952#section-6"">RFC 5952</a> formatted
addresses. If the port is the IANA default DNS port (53) it can be omitted.</p>
<pre><code class=""language-js"">dnsPromises.setServers([
  '4.4.4.4',
  '[2001:4860:4860::8888]',
  '4.4.4.4:1053',
  '[2001:4860:4860::8888]:1053',
]);
</code></pre>
<p>An error will be thrown if an invalid address is provided.</p>
<p>The <code>dnsPromises.setServers()</code> method must not be called while a DNS query is in
progress.</p>
<p>This method works much like
<a href=""https://man7.org/linux/man-pages/man5/resolv.conf.5.html"">resolve.conf</a>.
That is, if attempting to resolve with the first server provided results in a
<code>NOTFOUND</code> error, the <code>resolve()</code> method will <em>not</em> attempt to resolve with
subsequent servers provided. Fallback DNS servers will only be used if the
earlier ones time out or result in some other error.</p>",1,25,
318,dns,,lookup,dns.lookup,"<p>Under the hood, <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> uses the same operating system facilities
as most other programs. For instance, <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> will almost always
resolve a given name the same way as the <code>ping</code> command. On most POSIX-like
operating systems, the behavior of the <a href=""dns.html#dnslookuphostname-options-callback""><code>dns.lookup()</code></a> function can be
modified by changing settings in <a href=""http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html""><code>nsswitch.conf(5)</code></a> and/or <a href=""http://man7.org/linux/man-pages/man5/resolv.conf.5.html""><code>resolv.conf(5)</code></a>,
but changing these files will change the behavior of all other
programs running on the same operating system.</p>
<p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript's
perspective, it is implemented as a synchronous call to <a href=""http://man7.org/linux/man-pages/man3/getaddrinfo.3.html""><code>getaddrinfo(3)</code></a> that runs
on libuv's threadpool. This can have surprising negative performance
implications for some applications, see the <a href=""cli.html#uv_threadpool_sizesize""><code>UV_THREADPOOL_SIZE</code></a>
documentation for more information.</p>
<p>Various networking APIs will call <code>dns.lookup()</code> internally to resolve
host names. If that is an issue, consider resolving the host name to an address
using <code>dns.resolve()</code> and using the address instead of a host name. Also, some
networking APIs (such as <a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect()</code></a> and <a href=""dgram.html#dgramcreatesocketoptions-callback""><code>dgram.createSocket()</code></a>)
allow the default resolver, <code>dns.lookup()</code>, to be replaced.</p>",0,21,
319,domain,,create,domain.create,,0,Others,
320,domain,,add,domain.add,"<p>Explicitly adds an emitter to the domain. If any event handlers called by
the emitter throw an error, or if the emitter emits an <code>'error'</code> event, it
will be routed to the domain's <code>'error'</code> event, just like with implicit
binding.</p>
<p>This also works with timers that are returned from <a href=""timers.html#setintervalcallback-delay-args""><code>setInterval()</code></a> and
<a href=""timers.html#settimeoutcallback-delay-args""><code>setTimeout()</code></a>. If their callback function throws, it will be caught by
the domain <code>'error'</code> handler.</p>
<p>If the Timer or <code>EventEmitter</code> was already bound to a domain, it is removed
from that one, and bound to this one instead.</p>",1,Others,
321,domain,,bind,domain.bind,"<p>The returned function will be a wrapper around the supplied callback
function. When the returned function is called, any errors that are
thrown will be routed to the domain's <code>'error'</code> event.</p>
<pre><code class=""language-js"">const d = domain.create();

function readSomeFile(filename, cb) {
  fs.readFile(filename, 'utf8', d.bind((er, data) => {
    // If this throws, it will also be passed to the domain.
    return cb(er, data ? JSON.parse(data) : null);
  }));
}

d.on('error', (er) => {
  // An error occurred somewhere. If we throw it now, it will crash the program
  // with the normal line number and stack message.
});
</code></pre>",1,Others,
322,domain,,enter,domain.enter,"<p>The <code>enter()</code> method is plumbing used by the <code>run()</code>, <code>bind()</code>, and
<code>intercept()</code> methods to set the active domain. It sets <code>domain.active</code> and
<code>process.domain</code> to the domain, and implicitly pushes the domain onto the domain
stack managed by the domain module (see <a href=""domain.html#domainexit""><code>domain.exit()</code></a> for details on the
domain stack). The call to <code>enter()</code> delimits the beginning of a chain of
asynchronous calls and I/O operations bound to a domain.</p>
<p>Calling <code>enter()</code> changes only the active domain, and does not alter the domain
itself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a
single domain.</p>",0,Others,
323,domain,,exit,domain.exit,"<p>The <code>exit()</code> method exits the current domain, popping it off the domain stack.
Any time execution is going to switch to the context of a different chain of
asynchronous calls, it's important to ensure that the current domain is exited.
The call to <code>exit()</code> delimits either the end of or an interruption to the chain
of asynchronous calls and I/O operations bound to a domain.</p>
<p>If there are multiple, nested domains bound to the current execution context,
<code>exit()</code> will exit any domains nested within this domain.</p>
<p>Calling <code>exit()</code> changes only the active domain, and does not alter the domain
itself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a
single domain.</p>",0,Others,
324,domain,,intercept,domain.intercept,"<p>This method is almost identical to <a href=""domain.html#domainbindcallback""><code>domain.bind(callback)</code></a>. However, in
addition to catching thrown errors, it will also intercept <a href=""errors.html#class-error""><code>Error</code></a>
objects sent as the first argument to the function.</p>
<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced
with a single error handler in a single place.</p>
<pre><code class=""language-js"">const d = domain.create();

function readSomeFile(filename, cb) {
  fs.readFile(filename, 'utf8', d.intercept((data) => {
    // Note, the first argument is never passed to the
    // callback since it is assumed to be the 'Error' argument
    // and thus intercepted by the domain.

    // If this throws, it will also be passed to the domain
    // so the error-handling logic can be moved to the 'error'
    // event on the domain instead of being repeated throughout
    // the program.
    return cb(null, JSON.parse(data));
  }));
}

d.on('error', (er) => {
  // An error occurred somewhere. If we throw it now, it will crash the program
  // with the normal line number and stack message.
});
</code></pre>",1,Others,
325,domain,,remove,domain.remove,"<p>The opposite of <a href=""domain.html#domainaddemitter""><code>domain.add(emitter)</code></a>. Removes domain handling from the
specified emitter.</p>",1,Others,
326,domain,,run,domain.run,"<p>Run the supplied function in the context of the domain, implicitly
binding all event emitters, timers, and low-level requests that are
created in that context. Optionally, arguments can be passed to
the function.</p>
<p>This is the most basic way to use a domain.</p>
<pre><code class=""language-js"">const domain = require('node:domain');
const fs = require('node:fs');
const d = domain.create();
d.on('error', (er) => {
  console.error('Caught error!', er);
});
d.run(() => {
  process.nextTick(() => {
    setTimeout(() => { // Simulating some various async stuff
      fs.open('non-existent file', 'r', (er, fd) => {
        if (er) throw er;
        // proceed...
      });
    }, 100);
  });
});
</code></pre>
<p>In this example, the <code>d.on('error')</code> handler will be triggered, rather
than crashing the program.</p>",2,Others,
327,events,,getEventListeners,events.getEventListeners,"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>
<p>For <code>EventEmitter</code>s this behaves exactly the same as calling <code>.listeners</code> on
the emitter.</p>
<p>For <code>EventTarget</code>s this is the only way to get the event listeners for the
event target. This is useful for debugging and diagnostic purposes.</p>
<pre><code class=""language-mjs"">import { getEventListeners, EventEmitter } from 'node:events';

{
  const ee = new EventEmitter();
  const listener = () => console.log('Events are fun');
  ee.on('foo', listener);
  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
}
{
  const et = new EventTarget();
  const listener = () => console.log('Events are fun');
  et.addEventListener('foo', listener);
  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
}
</code></pre>
<pre><code class=""language-cjs"">const { getEventListeners, EventEmitter } = require('node:events');

{
  const ee = new EventEmitter();
  const listener = () => console.log('Events are fun');
  ee.on('foo', listener);
  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
}
{
  const et = new EventTarget();
  const listener = () => console.log('Events are fun');
  et.addEventListener('foo', listener);
  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
}
</code></pre>",2,Others,
328,events,,getMaxListeners,events.getMaxListeners,"<p>Returns the currently set max amount of listeners.</p>
<p>For <code>EventEmitter</code>s this behaves exactly the same as calling <code>.getMaxListeners</code> on
the emitter.</p>
<p>For <code>EventTarget</code>s this is the only way to get the max event listeners for the
event target. If the number of event handlers on a single EventTarget exceeds
the max set, the EventTarget will print a warning.</p>
<pre><code class=""language-mjs"">import { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';

{
  const ee = new EventEmitter();
  console.log(getMaxListeners(ee)); // 10
  setMaxListeners(11, ee);
  console.log(getMaxListeners(ee)); // 11
}
{
  const et = new EventTarget();
  console.log(getMaxListeners(et)); // 10
  setMaxListeners(11, et);
  console.log(getMaxListeners(et)); // 11
}
</code></pre>
<pre><code class=""language-cjs"">const { getMaxListeners, setMaxListeners, EventEmitter } = require('node:events');

{
  const ee = new EventEmitter();
  console.log(getMaxListeners(ee)); // 10
  setMaxListeners(11, ee);
  console.log(getMaxListeners(ee)); // 11
}
{
  const et = new EventTarget();
  console.log(getMaxListeners(et)); // 10
  setMaxListeners(11, et);
  console.log(getMaxListeners(et)); // 11
}
</code></pre>",1,Others,
329,events,,once,events.once,"<p>Creates a <code>Promise</code> that is fulfilled when the <code>EventEmitter</code> emits the given
event or that is rejected if the <code>EventEmitter</code> emits <code>'error'</code> while waiting.
The <code>Promise</code> will resolve with an array of all the arguments emitted to the
given event.</p>
<p>This method is intentionally generic and works with the web platform
<a href=""https://dom.spec.whatwg.org/#interface-eventtarget"">EventTarget</a> interface, which has no special
<code>'error'</code> event semantics and does not listen to the <code>'error'</code> event.</p>
<pre><code class=""language-mjs"">import { once, EventEmitter } from 'node:events';
import process from 'node:process';

const ee = new EventEmitter();

process.nextTick(() => {
  ee.emit('myevent', 42);
});

const [value] = await once(ee, 'myevent');
console.log(value);

const err = new Error('kaboom');
process.nextTick(() => {
  ee.emit('error', err);
});

try {
  await once(ee, 'myevent');
} catch (err) {
  console.error('error happened', err);
}
</code></pre>
<pre><code class=""language-cjs"">const { once, EventEmitter } = require('node:events');

async function run() {
  const ee = new EventEmitter();

  process.nextTick(() => {
    ee.emit('myevent', 42);
  });

  const [value] = await once(ee, 'myevent');
  console.log(value);

  const err = new Error('kaboom');
  process.nextTick(() => {
    ee.emit('error', err);
  });

  try {
    await once(ee, 'myevent');
  } catch (err) {
    console.error('error happened', err);
  }
}

run();
</code></pre>
<p>The special handling of the <code>'error'</code> event is only used when <code>events.once()</code>
is used to wait for another event. If <code>events.once()</code> is used to wait for the
'<code>error'</code> event itself, then it is treated as any other kind of event without
special handling:</p>
<pre><code class=""language-mjs"">import { EventEmitter, once } from 'node:events';

const ee = new EventEmitter();

once(ee, 'error')
  .then(([err]) => console.log('ok', err.message))
  .catch((err) => console.error('error', err.message));

ee.emit('error', new Error('boom'));

// Prints: ok boom
</code></pre>
<pre><code class=""language-cjs"">const { EventEmitter, once } = require('node:events');

const ee = new EventEmitter();

once(ee, 'error')
  .then(([err]) => console.log('ok', err.message))
  .catch((err) => console.error('error', err.message));

ee.emit('error', new Error('boom'));

// Prints: ok boom
</code></pre>
<p>An <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> can be used to cancel waiting for the event:</p>
<pre><code class=""language-mjs"">import { EventEmitter, once } from 'node:events';

const ee = new EventEmitter();
const ac = new AbortController();

async function foo(emitter, event, signal) {
  try {
    await once(emitter, event, { signal });
    console.log('event emitted!');
  } catch (error) {
    if (error.name === 'AbortError') {
      console.error('Waiting for the event was canceled!');
    } else {
      console.error('There was an error', error.message);
    }
  }
}

foo(ee, 'foo', ac.signal);
ac.abort(); // Abort waiting for the event
ee.emit('foo'); // Prints: Waiting for the event was canceled!
</code></pre>
<pre><code class=""language-cjs"">const { EventEmitter, once } = require('node:events');

const ee = new EventEmitter();
const ac = new AbortController();

async function foo(emitter, event, signal) {
  try {
    await once(emitter, event, { signal });
    console.log('event emitted!');
  } catch (error) {
    if (error.name === 'AbortError') {
      console.error('Waiting for the event was canceled!');
    } else {
      console.error('There was an error', error.message);
    }
  }
}

foo(ee, 'foo', ac.signal);
ac.abort(); // Abort waiting for the event
ee.emit('foo'); // Prints: Waiting for the event was canceled!
</code></pre>",3,Others,
330,events,,listenerCount,events.listenerCount,"<p>A class method that returns the number of listeners for the given <code>eventName</code>
registered on the given <code>emitter</code>.</p>
<pre><code class=""language-mjs"">import { EventEmitter, listenerCount } from 'node:events';

const myEmitter = new EventEmitter();
myEmitter.on('event', () => {});
myEmitter.on('event', () => {});
console.log(listenerCount(myEmitter, 'event'));
// Prints: 2
</code></pre>
<pre><code class=""language-cjs"">const { EventEmitter, listenerCount } = require('node:events');

const myEmitter = new EventEmitter();
myEmitter.on('event', () => {});
myEmitter.on('event', () => {});
console.log(listenerCount(myEmitter, 'event'));
// Prints: 2
</code></pre>",2,Others,
331,events,,on,events.on,"<pre><code class=""language-mjs"">import { on, EventEmitter } from 'node:events';
import process from 'node:process';

const ee = new EventEmitter();

// Emit later on
process.nextTick(() => {
  ee.emit('foo', 'bar');
  ee.emit('foo', 42);
});

for await (const event of on(ee, 'foo')) {
  // The execution of this inner block is synchronous and it
  // processes one event at a time (even with await). Do not use
  // if concurrent execution is required.
  console.log(event); // prints ['bar'] [42]
}
// Unreachable here
</code></pre>
<pre><code class=""language-cjs"">const { on, EventEmitter } = require('node:events');

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo')) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();
</code></pre>
<p>Returns an <code>AsyncIterator</code> that iterates <code>eventName</code> events. It will throw
if the <code>EventEmitter</code> emits <code>'error'</code>. It removes all listeners when
exiting the loop. The <code>value</code> returned by each iteration is an array
composed of the emitted event arguments.</p>
<p>An <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> can be used to cancel waiting on events:</p>
<pre><code class=""language-mjs"">import { on, EventEmitter } from 'node:events';
import process from 'node:process';

const ac = new AbortController();

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo', { signal: ac.signal })) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();

process.nextTick(() => ac.abort());
</code></pre>
<pre><code class=""language-cjs"">const { on, EventEmitter } = require('node:events');

const ac = new AbortController();

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo', { signal: ac.signal })) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();

process.nextTick(() => ac.abort());
</code></pre>",3,Others,
332,events,,setMaxListeners,events.setMaxListeners,"<pre><code class=""language-mjs"">import { setMaxListeners, EventEmitter } from 'node:events';

const target = new EventTarget();
const emitter = new EventEmitter();

setMaxListeners(5, target, emitter);
</code></pre>
<pre><code class=""language-cjs"">const {
  setMaxListeners,
  EventEmitter,
} = require('node:events');

const target = new EventTarget();
const emitter = new EventEmitter();

setMaxListeners(5, target, emitter);
</code></pre>",2,Others,
333,events,,addAbortListener,events.addAbortListener,"<p>Listens once to the <code>abort</code> event on the provided <code>signal</code>.</p>
<p>Listening to the <code>abort</code> event on abort signals is unsafe and may
lead to resource leaks since another third party with the signal can
call <a href=""events.html#eventstopimmediatepropagation""><code>e.stopImmediatePropagation()</code></a>. Unfortunately Node.js cannot change
this since it would violate the web standard. Additionally, the original
API makes it easy to forget to remove listeners.</p>
<p>This API allows safely using <code>AbortSignal</code>s in Node.js APIs by solving these
two issues by listening to the event such that <code>stopImmediatePropagation</code> does
not prevent the listener from running.</p>
<p>Returns a disposable so that it may be unsubscribed from more easily.</p>
<pre><code class=""language-cjs"">const { addAbortListener } = require('node:events');

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
</code></pre>
<pre><code class=""language-mjs"">import { addAbortListener } from 'node:events';

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
</code></pre>",2,Others,
334,emitter,,addListener,emitter.addListener,"<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>",2,Others,
335,emitter,,emit,emitter.emit,"<p>Synchronously calls each of the listeners registered for the event named
<code>eventName</code>, in the order they were registered, passing the supplied arguments
to each.</p>
<p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
</code></pre>",2,Others,
336,emitter,,eventNames,emitter.eventNames,"<p>Returns an array listing the events for which the emitter has registered
listeners. The values in the array are strings or <code>Symbol</code>s.</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';

const myEE = new EventEmitter();
myEE.on('foo', () => {});
myEE.on('bar', () => {});

const sym = Symbol('symbol');
myEE.on(sym, () => {});

console.log(myEE.eventNames());
// Prints: [ 'foo', 'bar', Symbol(symbol) ]
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');

const myEE = new EventEmitter();
myEE.on('foo', () => {});
myEE.on('bar', () => {});

const sym = Symbol('symbol');
myEE.on(sym, () => {});

console.log(myEE.eventNames());
// Prints: [ 'foo', 'bar', Symbol(symbol) ]
</code></pre>",0,Others,
337,emitter,,getMaxListeners,emitter.getMaxListeners,"<p>Returns the current max listener value for the <code>EventEmitter</code> which is either
set by <a href=""events.html#emittersetmaxlistenersn""><code>emitter.setMaxListeners(n)</code></a> or defaults to
<a href=""events.html#eventsdefaultmaxlisteners""><code>events.defaultMaxListeners</code></a>.</p>",0,Others,
338,emitter,,listenerCount,emitter.listenerCount,"<p>Returns the number of listeners listening for the event named <code>eventName</code>.
If <code>listener</code> is provided, it will return how many times the listener is found
in the list of the listeners of the event.</p>",2,Others,
339,emitter,,listeners,emitter.listeners,"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>
<pre><code class=""language-js"">server.on('connection', (stream) => {
  console.log('someone connected!');
});
console.log(util.inspect(server.listeners('connection')));
// Prints: [ [Function] ]
</code></pre>",1,Others,
340,emitter,,off,emitter.off,"<p>Alias for <a href=""events.html#emitterremovelistenereventname-listener""><code>emitter.removeListener()</code></a>.</p>",2,Others,
341,emitter,,on,emitter.on,"<p>Adds the <code>listener</code> function to the end of the listeners array for the
event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has
already been added. Multiple calls passing the same combination of <code>eventName</code>
and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple
times.</p>
<pre><code class=""language-js"">server.on('connection', (stream) => {
  console.log('someone connected!');
});
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>
<p>By default, event listeners are invoked in the order they are added. The
<code>emitter.prependListener()</code> method can be used as an alternative to add the
event listener to the beginning of the listeners array.</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
const myEE = new EventEmitter();
myEE.on('foo', () => console.log('a'));
myEE.prependListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
const myEE = new EventEmitter();
myEE.on('foo', () => console.log('a'));
myEE.prependListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
</code></pre>",2,Others,
342,emitter,,once,emitter.once,"<p>Adds a <strong>one-time</strong> <code>listener</code> function for the event named <code>eventName</code>. The
next time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>
<pre><code class=""language-js"">server.once('connection', (stream) => {
  console.log('Ah, we have our first user!');
});
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>
<p>By default, event listeners are invoked in the order they are added. The
<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the
event listener to the beginning of the listeners array.</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
const myEE = new EventEmitter();
myEE.once('foo', () => console.log('a'));
myEE.prependOnceListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
const myEE = new EventEmitter();
myEE.once('foo', () => console.log('a'));
myEE.prependOnceListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
</code></pre>",2,Others,
343,emitter,,prependListener,emitter.prependListener,"<p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the
event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has
already been added. Multiple calls passing the same combination of <code>eventName</code>
and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple
times.</p>
<pre><code class=""language-js"">server.prependListener('connection', (stream) => {
  console.log('someone connected!');
});
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>",2,Others,
344,emitter,,prependOnceListener,emitter.prependOnceListener,"<p>Adds a <strong>one-time</strong> <code>listener</code> function for the event named <code>eventName</code> to the
<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this
listener is removed, and then invoked.</p>
<pre><code class=""language-js"">server.prependOnceListener('connection', (stream) => {
  console.log('Ah, we have our first user!');
});
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>",2,Others,
345,emitter,,removeAllListeners,emitter.removeAllListeners,"<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>
<p>It is bad practice to remove listeners added elsewhere in the code,
particularly when the <code>EventEmitter</code> instance was created by some other
component or module (e.g. sockets or file streams).</p>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>",1,Others,
346,emitter,,removeListener,emitter.removeListener,"<p>Removes the specified <code>listener</code> from the listener array for the event named
<code>eventName</code>.</p>
<pre><code class=""language-js"">const callback = (stream) => {
  console.log('someone connected!');
};
server.on('connection', callback);
// ...
server.removeListener('connection', callback);
</code></pre>
<p><code>removeListener()</code> will remove, at most, one instance of a listener from the
listener array. If any single listener has been added multiple times to the
listener array for the specified <code>eventName</code>, then <code>removeListener()</code> must be
called multiple times to remove each instance.</p>
<p>Once an event is emitted, all listeners attached to it at the
time of emitting are called in order. This implies that any
<code>removeListener()</code> or <code>removeAllListeners()</code> calls <em>after</em> emitting and
<em>before</em> the last listener finishes execution will not remove them from
<code>emit()</code> in progress. Subsequent events behave as expected.</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();

const callbackA = () => {
  console.log('A');
  myEmitter.removeListener('event', callbackB);
};

const callbackB = () => {
  console.log('B');
};

myEmitter.on('event', callbackA);

myEmitter.on('event', callbackB);

// callbackA removes listener callbackB but it will still be called.
// Internal listener array at time of emit [callbackA, callbackB]
myEmitter.emit('event');
// Prints:
//   A
//   B

// callbackB is now removed.
// Internal listener array [callbackA]
myEmitter.emit('event');
// Prints:
//   A
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();

const callbackA = () => {
  console.log('A');
  myEmitter.removeListener('event', callbackB);
};

const callbackB = () => {
  console.log('B');
};

myEmitter.on('event', callbackA);

myEmitter.on('event', callbackB);

// callbackA removes listener callbackB but it will still be called.
// Internal listener array at time of emit [callbackA, callbackB]
myEmitter.emit('event');
// Prints:
//   A
//   B

// callbackB is now removed.
// Internal listener array [callbackA]
myEmitter.emit('event');
// Prints:
//   A
</code></pre>
<p>Because listeners are managed using an internal array, calling this will
change the position indices of any listener registered <em>after</em> the listener
being removed. This will not impact the order in which listeners are called,
but it means that any copies of the listener array as returned by
the <code>emitter.listeners()</code> method will need to be recreated.</p>
<p>When a single function has been added as a handler multiple times for a single
event (as in the example below), <code>removeListener()</code> will remove the most
recently added instance. In the example the <code>once('ping')</code>
listener is removed:</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
const ee = new EventEmitter();

function pong() {
  console.log('pong');
}

ee.on('ping', pong);
ee.once('ping', pong);
ee.removeListener('ping', pong);

ee.emit('ping');
ee.emit('ping');
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
const ee = new EventEmitter();

function pong() {
  console.log('pong');
}

ee.on('ping', pong);
ee.once('ping', pong);
ee.removeListener('ping', pong);

ee.emit('ping');
ee.emit('ping');
</code></pre>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>",2,Others,
347,emitter,,setMaxListeners,emitter.setMaxListeners,"<p>By default <code>EventEmitter</code>s will print a warning if more than <code>10</code> listeners are
added for a particular event. This is a useful default that helps finding
memory leaks. The <code>emitter.setMaxListeners()</code> method allows the limit to be
modified for this specific <code>EventEmitter</code> instance. The value can be set to
<code>Infinity</code> (or <code>0</code>) to indicate an unlimited number of listeners.</p>
<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>",1,Others,
348,emitter,,rawListeners,emitter.rawListeners,"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>,
including any wrappers (such as those created by <code>.once()</code>).</p>
<pre><code class=""language-mjs"">import { EventEmitter } from 'node:events';
const emitter = new EventEmitter();
emitter.once('log', () => console.log('log once'));

// Returns a new Array with a function `onceWrapper` which has a property
// `listener` which contains the original listener bound above
const listeners = emitter.rawListeners('log');
const logFnWrapper = listeners[0];

// Logs ""log once"" to the console and does not unbind the `once` event
logFnWrapper.listener();

// Logs ""log once"" to the console and removes the listener
logFnWrapper();

emitter.on('log', () => console.log('log persistently'));
// Will return a new Array with a single function bound by `.on()` above
const newListeners = emitter.rawListeners('log');

// Logs ""log persistently"" twice
newListeners[0]();
emitter.emit('log');
</code></pre>
<pre><code class=""language-cjs"">const EventEmitter = require('node:events');
const emitter = new EventEmitter();
emitter.once('log', () => console.log('log once'));

// Returns a new Array with a function `onceWrapper` which has a property
// `listener` which contains the original listener bound above
const listeners = emitter.rawListeners('log');
const logFnWrapper = listeners[0];

// Logs ""log once"" to the console and does not unbind the `once` event
logFnWrapper.listener();

// Logs ""log once"" to the console and removes the listener
logFnWrapper();

emitter.on('log', () => console.log('log persistently'));
// Will return a new Array with a single function bound by `.on()` above
const newListeners = emitter.rawListeners('log');

// Logs ""log persistently"" twice
newListeners[0]();
emitter.emit('log');
</code></pre>",1,Others,
349,eventemitterasyncresource,,emitDestroy,eventemitterasyncresource.emitDestroy,"<p>Call all <code>destroy</code> hooks. This should only ever be called once. An error will
be thrown if it is called more than once. This <strong>must</strong> be manually called. If
the resource is left to be collected by the GC then the <code>destroy</code> hooks will
never be called.</p>",0,,
350,event,,composedPath,event.composedPath,"<p>Returns an array containing the current <code>EventTarget</code> as the only entry or
empty if the event is not being dispatched. This is not used in
Node.js and is provided purely for completeness.</p>",0,Others,
351,event,,initEvent,event.initEvent,"<p>Redundant with event constructors and incapable of setting <code>composed</code>.
This is not used in Node.js and is provided purely for completeness.</p>",3,,
352,event,,preventDefault,event.preventDefault,<p>Sets the <code>defaultPrevented</code> property to <code>true</code> if <code>cancelable</code> is <code>true</code>.</p>,0,Others,
353,event,,stopImmediatePropagation,event.stopImmediatePropagation,<p>Stops the invocation of event listeners after the current one completes.</p>,0,Others,
354,event,,stopPropagation,event.stopPropagation,<p>This is not used in Node.js and is provided purely for completeness.</p>,0,Others,
355,eventTarget,,addEventListener,eventTarget.addEventListener,"<p>Adds a new handler for the <code>type</code> event. Any given <code>listener</code> is added
only once per <code>type</code> and per <code>capture</code> option value.</p>
<p>If the <code>once</code> option is <code>true</code>, the <code>listener</code> is removed after the
next time a <code>type</code> event is dispatched.</p>
<p>The <code>capture</code> option is not used by Node.js in any functional way other than
tracking registered event listeners per the <code>EventTarget</code> specification.
Specifically, the <code>capture</code> option is used as part of the key when registering
a <code>listener</code>. Any individual <code>listener</code> may be added once with
<code>capture = false</code>, and once with <code>capture = true</code>.</p>
<pre><code class=""language-js"">function handler(event) {}

const target = new EventTarget();
target.addEventListener('foo', handler, { capture: true });  // first
target.addEventListener('foo', handler, { capture: false }); // second

// Removes the second instance of handler
target.removeEventListener('foo', handler);

// Removes the first instance of handler
target.removeEventListener('foo', handler, { capture: true });
</code></pre>",3,,
356,eventTarget,,dispatchEvent,eventTarget.dispatchEvent,"<p>Dispatches the <code>event</code> to the list of handlers for <code>event.type</code>.</p>
<p>The registered event listeners is synchronously invoked in the order they
were registered.</p>",1,Others,
357,eventTarget,,removeEventListener,eventTarget.removeEventListener,<p>Removes the <code>listener</code> from the list of handlers for event <code>type</code>.</p>,3,,
358,nodeEventTarget,,addListener,nodeEventTarget.addListener,"<p>Node.js-specific extension to the <code>EventTarget</code> class that emulates the
equivalent <code>EventEmitter</code> API. The only difference between <code>addListener()</code> and
<code>addEventListener()</code> is that <code>addListener()</code> will return a reference to the
<code>EventTarget</code>.</p>",2,,
359,nodeEventTarget,,emit,nodeEventTarget.emit,"<p>Node.js-specific extension to the <code>EventTarget</code> class that dispatches the
<code>arg</code> to the list of handlers for <code>type</code>.</p>",2,,
360,nodeEventTarget,,eventNames,nodeEventTarget.eventNames,"<p>Node.js-specific extension to the <code>EventTarget</code> class that returns an array
of event <code>type</code> names for which event listeners are registered.</p>",0,,
361,nodeEventTarget,,listenerCount,nodeEventTarget.listenerCount,"<p>Node.js-specific extension to the <code>EventTarget</code> class that returns the number
of event listeners registered for the <code>type</code>.</p>",1,,
362,nodeEventTarget,,setMaxListeners,nodeEventTarget.setMaxListeners,"<p>Node.js-specific extension to the <code>EventTarget</code> class that sets the number
of max event listeners as <code>n</code>.</p>",1,,
363,nodeEventTarget,,getMaxListeners,nodeEventTarget.getMaxListeners,"<p>Node.js-specific extension to the <code>EventTarget</code> class that returns the number
of max event listeners.</p>",0,,
364,nodeEventTarget,,off,nodeEventTarget.off,<p>Node.js-specific alias for <code>eventTarget.removeEventListener()</code>.</p>,3,,
365,nodeEventTarget,,on,nodeEventTarget.on,<p>Node.js-specific alias for <code>eventTarget.addEventListener()</code>.</p>,2,,
366,nodeEventTarget,,once,nodeEventTarget.once,"<p>Node.js-specific extension to the <code>EventTarget</code> class that adds a <code>once</code>
listener for the given event <code>type</code>. This is equivalent to calling <code>on</code>
with the <code>once</code> option set to <code>true</code>.</p>",2,,
367,nodeEventTarget,,removeAllListeners,nodeEventTarget.removeAllListeners,"<p>Node.js-specific extension to the <code>EventTarget</code> class. If <code>type</code> is specified,
removes all registered listeners for <code>type</code>, otherwise removes all registered
listeners.</p>",1,,
368,nodeEventTarget,,removeListener,nodeEventTarget.removeListener,"<p>Node.js-specific extension to the <code>EventTarget</code> class that removes the
<code>listener</code> for the given <code>type</code>. The only difference between <code>removeListener()</code>
and <code>removeEventListener()</code> is that <code>removeListener()</code> will return a reference
to the <code>EventTarget</code>.</p>",3,,
369,fsPromises,,access,fsPromises.access,"<p>Tests a user's permissions for the file or directory specified by <code>path</code>.
The <code>mode</code> argument is an optional integer that specifies the accessibility
checks to be performed. <code>mode</code> should be either the value <code>fs.constants.F_OK</code>
or a mask consisting of the bitwise OR of any of <code>fs.constants.R_OK</code>,
<code>fs.constants.W_OK</code>, and <code>fs.constants.X_OK</code> (e.g.
<code>fs.constants.W_OK | fs.constants.R_OK</code>). Check <a href=""fs.html#file-access-constants"">File access constants</a> for
possible values of <code>mode</code>.</p>
<p>If the accessibility check is successful, the promise is fulfilled with no
value. If any of the accessibility checks fail, the promise is rejected
with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"" class=""type"">&lt;Error&gt;</a> object. The following example checks if the file
<code>/etc/passwd</code> can be read and written by the current process.</p>
<pre><code class=""language-mjs"">import { access, constants } from 'node:fs/promises';

try {
  await access('/etc/passwd', constants.R_OK | constants.W_OK);
  console.log('can access');
} catch {
  console.error('cannot access');
}
</code></pre>
<p>Using <code>fsPromises.access()</code> to check for the accessibility of a file before
calling <code>fsPromises.open()</code> is not recommended. Doing so introduces a race
condition, since other processes may change the file's state between the two
calls. Instead, user code should open/read/write the file directly and handle
the error raised if the file is not accessible.</p>",2,Others,
370,fsPromises,,appendFile,fsPromises.appendFile,"<p>Asynchronously append data to a file, creating the file if it does not yet
exist. <code>data</code> can be a string or a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>If <code>options</code> is a string, then it specifies the <code>encoding</code>.</p>
<p>The <code>mode</code> option only affects the newly created file. See <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>
for more details.</p>
<p>The <code>path</code> may be specified as a <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a> that has been opened
for appending (using <code>fsPromises.open()</code>).</p>",3,14,
371,fsPromises,,chmod,fsPromises.chmod,<p>Changes the permissions of a file.</p>,2,9,
372,fsPromises,,chown,fsPromises.chown,<p>Changes the ownership of a file.</p>,3,9,
373,fsPromises,,copyFile,fsPromises.copyFile,"<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it
already exists.</p>
<p>No guarantees are made about the atomicity of the copy operation. If an
error occurs after the destination file has been opened for writing, an attempt
will be made to remove the destination.</p>
<pre><code class=""language-mjs"">import { copyFile, constants } from 'node:fs/promises';

try {
  await copyFile('source.txt', 'destination.txt');
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
try {
  await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}
</code></pre>",3,7,
374,fsPromises,,cp,fsPromises.cp,"<p>Asynchronously copies the entire directory structure from <code>src</code> to <code>dest</code>,
including subdirectories and files.</p>
<p>When copying a directory to another directory, globs are not supported and
behavior is similar to <code>cp dir1/ dir2/</code>.</p>",3,7,
375,fsPromises,,lchmod,fsPromises.lchmod,"<p>Changes the permissions on a symbolic link.</p>
<p>This method is only implemented on macOS.</p>",2,9,
376,fsPromises,,lchown,fsPromises.lchown,<p>Changes the ownership on a symbolic link.</p>,3,9,
377,fsPromises,,lutimes,fsPromises.lutimes,"<p>Changes the access and modification times of a file in the same way as
<a href=""fs.html#fspromisesutimespath-atime-mtime""><code>fsPromises.utimes()</code></a>, with the difference that if the path refers to a
symbolic link, then the link is not dereferenced: instead, the timestamps of
the symbolic link itself are changed.</p>",3,Others,
378,fsPromises,,link,fsPromises.link,"<p>Creates a new link from the <code>existingPath</code> to the <code>newPath</code>. See the POSIX
<a href=""http://man7.org/linux/man-pages/man2/link.2.html""><code>link(2)</code></a> documentation for more detail.</p>",2,1,
379,fsPromises,,lstat,fsPromises.lstat,"<p>Equivalent to <a href=""fs.html#fspromisesstatpath-options""><code>fsPromises.stat()</code></a> unless <code>path</code> refers to a symbolic link,
in which case the link itself is stat-ed, not the file that it refers to.
Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man2/lstat.2.html""><code>lstat(2)</code></a> document for more detail.</p>",2,Others,
380,fsPromises,,mkdir,fsPromises.mkdir,"<p>Asynchronously creates a directory.</p>
<p>The optional <code>options</code> argument can be an integer specifying <code>mode</code> (permission
and sticky bits), or an object with a <code>mode</code> property and a <code>recursive</code>
property indicating whether parent directories should be created. Calling
<code>fsPromises.mkdir()</code> when <code>path</code> is a directory that exists results in a
rejection only when <code>recursive</code> is false.</p>
<pre><code class=""language-mjs"">import { mkdir } from 'node:fs/promises';

try {
  const projectFolder = new URL('./test/project/', import.meta.url);
  const createDir = await mkdir(projectFolder, { recursive: true });

  console.log(`created ${createDir}`);
} catch (err) {
  console.error(err.message);
}
</code></pre>
<pre><code class=""language-cjs"">const { mkdir } = require('node:fs/promises');
const { join } = require('node:path');

async function makeDirectory() {
  const projectFolder = join(__dirname, 'test', 'project');
  const dirCreation = await mkdir(projectFolder, { recursive: true });

  console.log(dirCreation);
  return dirCreation;
}

makeDirectory().catch(console.error);
</code></pre>",2,10,
381,fsPromises,,mkdtemp,fsPromises.mkdtemp,"<p>Creates a unique temporary directory. A unique directory name is generated by
appending six random characters to the end of the provided <code>prefix</code>. Due to
platform inconsistencies, avoid trailing <code>X</code> characters in <code>prefix</code>. Some
platforms, notably the BSDs, can return more than six random characters, and
replace trailing <code>X</code> characters in <code>prefix</code> with random characters.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use.</p>
<pre><code class=""language-mjs"">import { mkdtemp } from 'node:fs/promises';
import { join } from 'node:path';
import { tmpdir } from 'node:os';

try {
  await mkdtemp(join(tmpdir(), 'foo-'));
} catch (err) {
  console.error(err);
}
</code></pre>
<p>The <code>fsPromises.mkdtemp()</code> method will append the six randomly selected
characters directly to the <code>prefix</code> string. For instance, given a directory
<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the
<code>prefix</code> must end with a trailing platform-specific path separator
(<code>require('node:path').sep</code>).</p>",2,10,
382,fsPromises,,open,fsPromises.open,"<p>Opens a <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a>.</p>
<p>Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man2/open.2.html""><code>open(2)</code></a> documentation for more detail.</p>
<p>Some characters (<code>&#x3C; > : "" / \ | ? *</code>) are reserved under Windows as documented
by <a href=""https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file"">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains
a colon, Node.js will open a file system stream, as described by
<a href=""https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams"">this MSDN page</a>.</p>",3,19,
383,fsPromises,,opendir,fsPromises.opendir,"<p>Asynchronously open a directory for iterative scanning. See the POSIX
<a href=""http://man7.org/linux/man-pages/man3/opendir.3.html""><code>opendir(3)</code></a> documentation for more detail.</p>
<p>Creates an <a href=""fs.html#class-fsdir"" class=""type"">&lt;fs.Dir&gt;</a>, which contains all further functions for reading from
and cleaning up the directory.</p>
<p>The <code>encoding</code> option sets the encoding for the <code>path</code> while opening the
directory and subsequent read operations.</p>
<p>Example using async iteration:</p>
<pre><code class=""language-mjs"">import { opendir } from 'node:fs/promises';

try {
  const dir = await opendir('./');
  for await (const dirent of dir)
    console.log(dirent.name);
} catch (err) {
  console.error(err);
}
</code></pre>
<p>When using the async iterator, the <a href=""fs.html#class-fsdir"" class=""type"">&lt;fs.Dir&gt;</a> object will be automatically
closed after the iterator exits.</p>",2,19,
384,fsPromises,,readdir,fsPromises.readdir,"<p>Reads the contents of a directory.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the filenames. If the <code>encoding</code> is set to <code>'buffer'</code>, the filenames returned
will be passed as <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> objects.</p>
<p>If <code>options.withFileTypes</code> is set to <code>true</code>, the returned array will contain
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> objects.</p>
<pre><code class=""language-mjs"">import { readdir } from 'node:fs/promises';

try {
  const files = await readdir(path);
  for (const file of files)
    console.log(file);
} catch (err) {
  console.error(err);
}
</code></pre>",2,3,
385,fsPromises,,readFile,fsPromises.readFile,"<p>Asynchronously reads the entire contents of a file.</p>
<p>If no encoding is specified (using <code>options.encoding</code>), the data is returned
as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object. Otherwise, the data will be a string.</p>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>
<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is
platform-specific. On macOS, Linux, and Windows, the promise will be rejected
with an error. On FreeBSD, a representation of the directory's contents will be
returned.</p>
<p>An example of reading a <code>package.json</code> file located in the same directory of the
running code:</p>
<pre><code class=""language-mjs"">import { readFile } from 'node:fs/promises';
try {
  const filePath = new URL('./package.json', import.meta.url);
  const contents = await readFile(filePath, { encoding: 'utf8' });
  console.log(contents);
} catch (err) {
  console.error(err.message);
}
</code></pre>
<pre><code class=""language-cjs"">const { readFile } = require('node:fs/promises');
const { resolve } = require('node:path');
async function logFile() {
  try {
    const filePath = resolve('./package.json');
    const contents = await readFile(filePath, { encoding: 'utf8' });
    console.log(contents);
  } catch (err) {
    console.error(err.message);
  }
}
logFile();
</code></pre>
<p>It is possible to abort an ongoing <code>readFile</code> using an <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a>. If a
request is aborted the promise returned is rejected with an <code>AbortError</code>:</p>
<pre><code class=""language-mjs"">import { readFile } from 'node:fs/promises';

try {
  const controller = new AbortController();
  const { signal } = controller;
  const promise = readFile(fileName, { signal });

  // Abort the request before the promise settles.
  controller.abort();

  await promise;
} catch (err) {
  // When a request is aborted - err is an AbortError
  console.error(err);
}
</code></pre>
<p>Aborting an ongoing request does not abort individual operating
system requests but rather the internal buffering <code>fs.readFile</code> performs.</p>
<p>Any specified <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a> has to support reading.</p>",2,12,
386,fsPromises,,readlink,fsPromises.readlink,"<p>Reads the contents of the symbolic link referred to by <code>path</code>. See the POSIX
<a href=""http://man7.org/linux/man-pages/man2/readlink.2.html""><code>readlink(2)</code></a> documentation for more detail. The promise is fulfilled with the
<code>linkString</code> upon success.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the link path returned. If the <code>encoding</code> is set to <code>'buffer'</code>, the link path
returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>",2,12,
387,fsPromises,,realpath,fsPromises.realpath,"<p>Determines the actual location of <code>path</code> using the same semantics as the
<code>fs.realpath.native()</code> function.</p>
<p>Only paths that can be converted to UTF8 strings are supported.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path. If the <code>encoding</code> is set to <code>'buffer'</code>, the path returned will be
passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>
<p>On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on <code>/proc</code> in order for this function to work. Glibc does not have
this restriction.</p>",2,Others,
388,fsPromises,,rename,fsPromises.rename,<p>Renames <code>oldPath</code> to <code>newPath</code>.</p>,2,Others,
389,fsPromises,,rmdir,fsPromises.rmdir,"<p>Removes the directory identified by <code>path</code>.</p>
<p>Using <code>fsPromises.rmdir()</code> on a file (not a directory) results in the
promise being rejected with an <code>ENOENT</code> error on Windows and an <code>ENOTDIR</code>
error on POSIX.</p>
<p>To get a behavior similar to the <code>rm -rf</code> Unix command, use
<a href=""fs.html#fspromisesrmpath-options""><code>fsPromises.rm()</code></a> with options <code>{ recursive: true, force: true }</code>.</p>",2,8,
390,fsPromises,,rm,fsPromises.rm,<p>Removes files and directories (modeled on the standard POSIX <code>rm</code> utility).</p>,2,8,
391,fsPromises,,stat,fsPromises.stat,,2,Others,
392,fsPromises,,statfs,fsPromises.statfs,,2,Others,
393,fsPromises,,symlink,fsPromises.symlink,"<p>Creates a symbolic link.</p>
<p>The <code>type</code> argument is only used on Windows platforms and can be one of <code>'dir'</code>,
<code>'file'</code>, or <code>'junction'</code>. If the <code>type</code> argument is not a string, Node.js will
autodetect <code>target</code> type and use <code>'file'</code> or <code>'dir'</code>. If the <code>target</code> does not
exist, <code>'file'</code> will be used. Windows junction points require the destination
path to be absolute. When using <code>'junction'</code>, the <code>target</code> argument will
automatically be normalized to absolute path. Junction points on NTFS volumes
can only point to directories.</p>",3,Others,
394,fsPromises,,truncate,fsPromises.truncate,"<p>Truncates (shortens or extends the length) of the content at <code>path</code> to <code>len</code>
bytes.</p>",2,Others,
395,fsPromises,,unlink,fsPromises.unlink,"<p>If <code>path</code> refers to a symbolic link, then the link is removed without affecting
the file or directory to which that link refers. If the <code>path</code> refers to a file
path that is not a symbolic link, the file is deleted. See the POSIX <a href=""http://man7.org/linux/man-pages/man2/unlink.2.html""><code>unlink(2)</code></a>
documentation for more detail.</p>",1,8,
396,fsPromises,,utimes,fsPromises.utimes,"<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>
<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>
<ul>
<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a
numeric string like <code>'123456789.0'</code>.</li>
<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code>, or
<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>
</ul>",3,Others,
397,fsPromises,,watch,fsPromises.watch,"<p>Returns an async iterator that watches for changes on <code>filename</code>, where <code>filename</code>
is either a file or a directory.</p>
<pre><code class=""language-js"">const { watch } = require('node:fs/promises');

const ac = new AbortController();
const { signal } = ac;
setTimeout(() => ac.abort(), 10000);

(async () => {
  try {
    const watcher = watch(__filename, { signal });
    for await (const event of watcher)
      console.log(event);
  } catch (err) {
    if (err.name === 'AbortError')
      return;
    throw err;
  }
})();
</code></pre>
<p>On most platforms, <code>'rename'</code> is emitted whenever a filename appears or
disappears in the directory.</p>
<p>All the <a href=""fs.html#caveats"">caveats</a> for <code>fs.watch()</code> also apply to <code>fsPromises.watch()</code>.</p>",2,Others,
398,fsPromises,,writeFile,fsPromises.writeFile,"<p>Asynchronously writes data to a file, replacing the file if it already exists.
<code>data</code> can be a string, a buffer, an <a href=""https://tc39.github.io/ecma262/#sec-asynciterable-interface"" class=""type"">&lt;AsyncIterable&gt;</a>, or an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol"" class=""type"">&lt;Iterable&gt;</a> object.</p>
<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>
<p>The <code>mode</code> option only affects the newly created file. See <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>
for more details.</p>
<p>Any specified <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a> has to support writing.</p>
<p>It is unsafe to use <code>fsPromises.writeFile()</code> multiple times on the same file
without waiting for the promise to be settled.</p>
<p>Similarly to <code>fsPromises.readFile</code> - <code>fsPromises.writeFile</code> is a convenience
method that performs multiple <code>write</code> calls internally to write the buffer
passed to it. For performance sensitive code consider using
<a href=""fs.html#fscreatewritestreampath-options""><code>fs.createWriteStream()</code></a> or <a href=""fs.html#filehandlecreatewritestreamoptions""><code>filehandle.createWriteStream()</code></a>.</p>
<p>It is possible to use an <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> to cancel an <code>fsPromises.writeFile()</code>.
Cancelation is ""best effort"", and some amount of data is likely still
to be written.</p>
<pre><code class=""language-mjs"">import { writeFile } from 'node:fs/promises';
import { Buffer } from 'node:buffer';

try {
  const controller = new AbortController();
  const { signal } = controller;
  const data = new Uint8Array(Buffer.from('Hello Node.js'));
  const promise = writeFile('message.txt', data, { signal });

  // Abort the request before the promise settles.
  controller.abort();

  await promise;
} catch (err) {
  // When a request is aborted - err is an AbortError
  console.error(err);
}
</code></pre>
<p>Aborting an ongoing request does not abort individual operating
system requests but rather the internal buffering <code>fs.writeFile</code> performs.</p>",3,Others,
399,filehandle,,appendFile,filehandle.appendFile,"<p>Alias of <a href=""fs.html#filehandlewritefiledata-options""><code>filehandle.writeFile()</code></a>.</p>
<p>When operating on file handles, the mode cannot be changed from what it was set
to with <a href=""fs.html#fspromisesopenpath-flags-mode""><code>fsPromises.open()</code></a>. Therefore, this is equivalent to
<a href=""fs.html#filehandlewritefiledata-options""><code>filehandle.writeFile()</code></a>.</p>",2,14,
400,filehandle,,chmod,filehandle.chmod,"<p>Modifies the permissions on the file. See <a href=""http://man7.org/linux/man-pages/man2/chmod.2.html""><code>chmod(2)</code></a>.</p>",1,9,
401,filehandle,,chown,filehandle.chown,"<p>Changes the ownership of the file. A wrapper for <a href=""http://man7.org/linux/man-pages/man2/chown.2.html""><code>chown(2)</code></a>.</p>",2,9,
402,filehandle,,close,filehandle.close,"<p>Closes the file handle after waiting for any pending operation on the handle to
complete.</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs/promises';

let filehandle;
try {
  filehandle = await open('thefile.txt', 'r');
} finally {
  await filehandle?.close();
}
</code></pre>",0,Others,
403,filehandle,,createReadStream,filehandle.createReadStream,"<p>Unlike the 16 KiB default <code>highWaterMark</code> for a <a href=""stream.html#class-streamreadable"" class=""type"">&lt;stream.Readable&gt;</a>, the stream
returned by this method has a default <code>highWaterMark</code> of 64 KiB.</p>
<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from
the file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and
start counting at 0, allowed values are in the
[0, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER""><code>Number.MAX_SAFE_INTEGER</code></a>] range. If <code>start</code> is
omitted or <code>undefined</code>, <code>filehandle.createReadStream()</code> reads sequentially from
the current file position. The <code>encoding</code> can be any one of those accepted by
<a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>If the <code>FileHandle</code> points to a character device that only supports blocking
reads (such as keyboard or sound card), read operations do not finish until data
is available. This can prevent the process from exiting and the stream from
closing naturally.</p>
<p>By default, the stream will emit a <code>'close'</code> event after it has been
destroyed.  Set the <code>emitClose</code> option to <code>false</code> to change this behavior.</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs/promises';

const fd = await open('/dev/input/event0');
// Create a stream from some character device.
const stream = fd.createReadStream();
setTimeout(() => {
  stream.close(); // This may not close the stream.
  // Artificially marking end-of-stream, as if the underlying resource had
  // indicated end-of-file by itself, allows the stream to close.
  // This does not cancel pending read operations, and if there is such an
  // operation, the process may still not be able to exit successfully
  // until it finishes.
  stream.push(null);
  stream.read(0);
}, 100);
</code></pre>
<p>If <code>autoClose</code> is false, then the file descriptor won't be closed, even if
there's an error. It is the application's responsibility to close it and make
sure there's no file descriptor leak. If <code>autoClose</code> is set to true (default
behavior), on <code>'error'</code> or <code>'end'</code> the file descriptor will be closed
automatically.</p>
<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs/promises';

const fd = await open('sample.txt');
fd.createReadStream({ start: 90, end: 99 });
</code></pre>",1,18,
404,filehandle,,createWriteStream,filehandle.createWriteStream,"<p><code>options</code> may also include a <code>start</code> option to allow writing data at some
position past the beginning of the file, allowed values are in the
[0, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER""><code>Number.MAX_SAFE_INTEGER</code></a>] range. Modifying a file rather than
replacing it may require the <code>flags</code> <code>open</code> option to be set to <code>r+</code> rather than
the default <code>r</code>. The <code>encoding</code> can be any one of those accepted by <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>If <code>autoClose</code> is set to true (default behavior) on <code>'error'</code> or <code>'finish'</code>
the file descriptor will be closed automatically. If <code>autoClose</code> is false,
then the file descriptor won't be closed, even if there's an error.
It is the application's responsibility to close it and make sure there's no
file descriptor leak.</p>
<p>By default, the stream will emit a <code>'close'</code> event after it has been
destroyed.  Set the <code>emitClose</code> option to <code>false</code> to change this behavior.</p>",1,17,
405,filehandle,,datasync,filehandle.datasync,"<p>Forces all currently queued I/O operations associated with the file to the
operating system's synchronized I/O completion state. Refer to the POSIX
<a href=""http://man7.org/linux/man-pages/man2/fdatasync.2.html""><code>fdatasync(2)</code></a> documentation for details.</p>
<p>Unlike <code>filehandle.sync</code> this method does not flush modified metadata.</p>",0,Others,
406,filehandle,,read,filehandle.read,"<p>Reads data from the file and stores that in the given buffer.</p>
<p>If the file is not modified concurrently, the end-of-file is reached when the
number of bytes read is zero.</p>",4,12,
407,filehandle,,read,filehandle.read,"<p>Reads data from the file and stores that in the given buffer.</p>
<p>If the file is not modified concurrently, the end-of-file is reached when the
number of bytes read is zero.</p>",1,12,
408,filehandle,,read,filehandle.read,"<p>Reads data from the file and stores that in the given buffer.</p>
<p>If the file is not modified concurrently, the end-of-file is reached when the
number of bytes read is zero.</p>",2,12,
409,filehandle,,readableWebStream,filehandle.readableWebStream,"<p>Returns a <code>ReadableStream</code> that may be used to read the files data.</p>
<p>An error will be thrown if this method is called more than once or is called
after the <code>FileHandle</code> is closed or closing.</p>
<pre><code class=""language-mjs"">import {
  open,
} from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const chunk of file.readableWebStream())
  console.log(chunk);

await file.close();
</code></pre>
<pre><code class=""language-cjs"">const {
  open,
} = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const chunk of file.readableWebStream())
    console.log(chunk);

  await file.close();
})();
</code></pre>
<p>While the <code>ReadableStream</code> will read the file to completion, it will not
close the <code>FileHandle</code> automatically. User code must still call the
<code>fileHandle.close()</code> method.</p>",1,18,
410,filehandle,,readFile,filehandle.readFile,"<p>Asynchronously reads the entire contents of a file.</p>
<p>If <code>options</code> is a string, then it specifies the <code>encoding</code>.</p>
<p>The <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a> has to support reading.</p>
<p>If one or more <code>filehandle.read()</code> calls are made on a file handle and then a
<code>filehandle.readFile()</code> call is made, the data will be read from the current
position till the end of the file. It doesn't always read from the beginning
of the file.</p>",1,12,
411,filehandle,,readLines,filehandle.readLines,"<p>Convenience method to create a <code>readline</code> interface and stream over the file.
See <a href=""fs.html#filehandlecreatereadstreamoptions""><code>filehandle.createReadStream()</code></a> for the options.</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const line of file.readLines()) {
  console.log(line);
}
</code></pre>
<pre><code class=""language-cjs"">const { open } = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const line of file.readLines()) {
    console.log(line);
  }
})();
</code></pre>",1,12,
412,filehandle,,readv,filehandle.readv,"<p>Read from a file and write to an array of <a href=""https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView"" class=""type"">&lt;ArrayBufferView&gt;</a>s</p>",2,12,
413,filehandle,,stat,filehandle.stat,,1,Others,
414,filehandle,,sync,filehandle.sync,"<p>Request that all data for the open file descriptor is flushed to the storage
device. The specific implementation is operating system and device specific.
Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man2/fsync.2.html""><code>fsync(2)</code></a> documentation for more detail.</p>",0,Others,
415,filehandle,,truncate,filehandle.truncate,"<p>Truncates the file.</p>
<p>If the file was larger than <code>len</code> bytes, only the first <code>len</code> bytes will be
retained in the file.</p>
<p>The following example retains only the first four bytes of the file:</p>
<pre><code class=""language-mjs"">import { open } from 'node:fs/promises';

let filehandle = null;
try {
  filehandle = await open('temp.txt', 'r+');
  await filehandle.truncate(4);
} finally {
  await filehandle?.close();
}
</code></pre>
<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the
extended part is filled with null bytes (<code>'\0'</code>):</p>
<p>If <code>len</code> is negative then <code>0</code> will be used.</p>",1,Others,
416,filehandle,,utimes,filehandle.utimes,"<p>Change the file system timestamps of the object referenced by the <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a>
then fulfills the promise with no arguments upon success.</p>",2,Others,
417,filehandle,,write,filehandle.write,"<p>Write <code>buffer</code> to the file.</p>
<p>The promise is fulfilled with an object containing two properties:</p>
<ul>
<li><code>bytesWritten</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> the number of bytes written</li>
<li><code>buffer</code> <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> a reference to the
<code>buffer</code> written.</li>
</ul>
<p>It is unsafe to use <code>filehandle.write()</code> multiple times on the same file
without waiting for the promise to be fulfilled (or rejected). For this
scenario, use <a href=""fs.html#filehandlecreatewritestreamoptions""><code>filehandle.createWriteStream()</code></a>.</p>
<p>On Linux, positional writes do not work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>",4,14,
418,filehandle,,write,filehandle.write,"<p>Write <code>buffer</code> to the file.</p>
<p>Similar to the above <code>filehandle.write</code> function, this version takes an
optional <code>options</code> object. If no <code>options</code> object is specified, it will
default with the above values.</p>",2,14,
419,filehandle,,write,filehandle.write,"<p>Write <code>string</code> to the file. If <code>string</code> is not a string, the promise is
rejected with an error.</p>
<p>The promise is fulfilled with an object containing two properties:</p>
<ul>
<li><code>bytesWritten</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> the number of bytes written</li>
<li><code>buffer</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> a reference to the <code>string</code> written.</li>
</ul>
<p>It is unsafe to use <code>filehandle.write()</code> multiple times on the same file
without waiting for the promise to be fulfilled (or rejected). For this
scenario, use <a href=""fs.html#filehandlecreatewritestreamoptions""><code>filehandle.createWriteStream()</code></a>.</p>
<p>On Linux, positional writes do not work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>",3,14,
420,filehandle,,writeFile,filehandle.writeFile,"<p>Asynchronously writes data to a file, replacing the file if it already exists.
<code>data</code> can be a string, a buffer, an <a href=""https://tc39.github.io/ecma262/#sec-asynciterable-interface"" class=""type"">&lt;AsyncIterable&gt;</a>, or an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol"" class=""type"">&lt;Iterable&gt;</a> object.
The promise is fulfilled with no arguments upon success.</p>
<p>If <code>options</code> is a string, then it specifies the <code>encoding</code>.</p>
<p>The <a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a> has to support writing.</p>
<p>It is unsafe to use <code>filehandle.writeFile()</code> multiple times on the same file
without waiting for the promise to be fulfilled (or rejected).</p>
<p>If one or more <code>filehandle.write()</code> calls are made on a file handle and then a
<code>filehandle.writeFile()</code> call is made, the data will be written from the
current position till the end of the file. It doesn't always write from the
beginning of the file.</p>",2,14,
421,filehandle,,writev,filehandle.writev,"<p>Write an array of <a href=""https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView"" class=""type"">&lt;ArrayBufferView&gt;</a>s to the file.</p>
<p>The promise is fulfilled with an object containing a two properties:</p>
<ul>
<li><code>bytesWritten</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;integer&gt;</a> the number of bytes written</li>
<li><code>buffers</code> <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer[]&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray[]&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView[]&gt;</a> a reference to the <code>buffers</code>
input.</li>
</ul>
<p>It is unsafe to call <code>writev()</code> multiple times on the same file without waiting
for the promise to be fulfilled (or rejected).</p>
<p>On Linux, positional writes don't work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>",2,14,
422,filehandle[Symbol,,[Symbol.asyncDispose],filehandle[Symbol.asyncDispose],<p>An alias for <code>filehandle.close()</code>.</p>,0,Others,
423,fs,,access,fs.access,"<p>Tests a user's permissions for the file or directory specified by <code>path</code>.
The <code>mode</code> argument is an optional integer that specifies the accessibility
checks to be performed. <code>mode</code> should be either the value <code>fs.constants.F_OK</code>
or a mask consisting of the bitwise OR of any of <code>fs.constants.R_OK</code>,
<code>fs.constants.W_OK</code>, and <code>fs.constants.X_OK</code> (e.g.
<code>fs.constants.W_OK | fs.constants.R_OK</code>). Check <a href=""fs.html#file-access-constants"">File access constants</a> for
possible values of <code>mode</code>.</p>
<p>The final argument, <code>callback</code>, is a callback function that is invoked with
a possible error argument. If any of the accessibility checks fail, the error
argument will be an <code>Error</code> object. The following examples check if
<code>package.json</code> exists, and if it is readable or writable.</p>
<pre><code class=""language-mjs"">import { access, constants } from 'node:fs';

const file = 'package.json';

// Check if the file exists in the current directory.
access(file, constants.F_OK, (err) => {
  console.log(`${file} ${err ? 'does not exist' : 'exists'}`);
});

// Check if the file is readable.
access(file, constants.R_OK, (err) => {
  console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);
});

// Check if the file is writable.
access(file, constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);
});

// Check if the file is readable and writable.
access(file, constants.R_OK | constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);
});
</code></pre>
<p>Do not use <code>fs.access()</code> to check for the accessibility of a file before calling
<code>fs.open()</code>, <code>fs.readFile()</code>, or <code>fs.writeFile()</code>. Doing
so introduces a race condition, since other processes may change the file's
state between the two calls. Instead, user code should open/read/write the
file directly and handle the error raised if the file is not accessible.</p>
<p><strong>write (NOT RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { access, open, close } from 'node:fs';

access('myfile', (err) => {
  if (!err) {
    console.error('myfile already exists');
    return;
  }

  open('myfile', 'wx', (err, fd) => {
    if (err) throw err;

    try {
      writeMyData(fd);
    } finally {
      close(fd, (err) => {
        if (err) throw err;
      });
    }
  });
});
</code></pre>
<p><strong>write (RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { open, close } from 'node:fs';

open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
</code></pre>
<p><strong>read (NOT RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { access, open, close } from 'node:fs';
access('myfile', (err) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  open('myfile', 'r', (err, fd) => {
    if (err) throw err;

    try {
      readMyData(fd);
    } finally {
      close(fd, (err) => {
        if (err) throw err;
      });
    }
  });
});
</code></pre>
<p><strong>read (RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
</code></pre>
<p>The ""not recommended"" examples above check for accessibility and then use the
file; the ""recommended"" examples are better because they use the file directly
and handle the error, if any.</p>
<p>In general, check for the accessibility of a file only if the file will not be
used directly, for example when its accessibility is a signal from another
process.</p>
<p>On Windows, access-control policies (ACLs) on a directory may limit access to
a file or directory. The <code>fs.access()</code> function, however, does not check the
ACL and therefore may report that a path is accessible even if the ACL restricts
the user from reading or writing to it.</p>",3,Others,
424,fs,,appendFile,fs.appendFile,"<p>Asynchronously append data to a file, creating the file if it does not yet
exist. <code>data</code> can be a string or a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>The <code>mode</code> option only affects the newly created file. See <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>
for more details.</p>
<pre><code class=""language-mjs"">import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', (err) => {
  if (err) throw err;
  console.log('The ""data to append"" was appended to file!');
});
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding:</p>
<pre><code class=""language-mjs"">import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', 'utf8', callback);
</code></pre>
<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened
for appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will
not be closed automatically.</p>
<pre><code class=""language-mjs"">import { open, close, appendFile } from 'node:fs';

function closeFd(fd) {
  close(fd, (err) => {
    if (err) throw err;
  });
}

open('message.txt', 'a', (err, fd) => {
  if (err) throw err;

  try {
    appendFile(fd, 'data to append', 'utf8', (err) => {
      closeFd(fd);
      if (err) throw err;
    });
  } catch (err) {
    closeFd(fd);
    throw err;
  }
});
</code></pre>",4,14,
425,fs,,chmod,fs.chmod,"<p>Asynchronously changes the permissions of a file. No arguments other than a
possible exception are given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/chmod.2.html""><code>chmod(2)</code></a> documentation for more detail.</p>
<pre><code class=""language-mjs"">import { chmod } from 'node:fs';

chmod('my_file.txt', 0o775, (err) => {
  if (err) throw err;
  console.log('The permissions for file ""my_file.txt"" have been changed!');
});
</code></pre>",3,9,
426,fs,,chown,fs.chown,"<p>Asynchronously changes owner and group of a file. No arguments other than a
possible exception are given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/chown.2.html""><code>chown(2)</code></a> documentation for more detail.</p>",4,9,
427,fs,,close,fs.close,"<p>Closes the file descriptor. No arguments other than a possible exception are
given to the completion callback.</p>
<p>Calling <code>fs.close()</code> on any file descriptor (<code>fd</code>) that is currently in use
through any other <code>fs</code> operation may lead to undefined behavior.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/close.2.html""><code>close(2)</code></a> documentation for more detail.</p>",2,Others,
428,fs,,copyFile,fs.copyFile,"<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it
already exists. No arguments other than a possible exception are given to the
callback function. Node.js makes no guarantees about the atomicity of the copy
operation. If an error occurs after the destination file has been opened for
writing, Node.js will attempt to remove the destination.</p>
<p><code>mode</code> is an optional integer that specifies the behavior
of the copy operation. It is possible to create a mask consisting of the bitwise
OR of two or more values (e.g.
<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>
<ul>
<li><code>fs.constants.COPYFILE_EXCL</code>: The copy operation will fail if <code>dest</code> already
exists.</li>
<li><code>fs.constants.COPYFILE_FICLONE</code>: The copy operation will attempt to create a
copy-on-write reflink. If the platform does not support copy-on-write, then a
fallback copy mechanism is used.</li>
<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code>: The copy operation will attempt to
create a copy-on-write reflink. If the platform does not support
copy-on-write, then the operation will fail.</li>
</ul>
<pre><code class=""language-mjs"">import { copyFile, constants } from 'node:fs';

function callback(err) {
  if (err) throw err;
  console.log('source.txt was copied to destination.txt');
}

// destination.txt will be created or overwritten by default.
copyFile('source.txt', 'destination.txt', callback);

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);
</code></pre>",4,7,
429,fs,,cp,fs.cp,"<p>Asynchronously copies the entire directory structure from <code>src</code> to <code>dest</code>,
including subdirectories and files.</p>
<p>When copying a directory to another directory, globs are not supported and
behavior is similar to <code>cp dir1/ dir2/</code>.</p>",4,7,
430,fs,,createReadStream,fs.createReadStream,"<p>Unlike the 16 KiB default <code>highWaterMark</code> for a <a href=""stream.html#class-streamreadable"" class=""type"">&lt;stream.Readable&gt;</a>, the stream
returned by this method has a default <code>highWaterMark</code> of 64 KiB.</p>
<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from
the file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and
start counting at 0, allowed values are in the
[0, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER""><code>Number.MAX_SAFE_INTEGER</code></a>] range. If <code>fd</code> is specified and <code>start</code> is
omitted or <code>undefined</code>, <code>fs.createReadStream()</code> reads sequentially from the
current file position. The <code>encoding</code> can be any one of those accepted by
<a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use
the specified file descriptor. This means that no <code>'open'</code> event will be
emitted. <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to
<a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a>.</p>
<p>If <code>fd</code> points to a character device that only supports blocking reads
(such as keyboard or sound card), read operations do not finish until data is
available. This can prevent the process from exiting and the stream from
closing naturally.</p>
<p>By default, the stream will emit a <code>'close'</code> event after it has been
destroyed.  Set the <code>emitClose</code> option to <code>false</code> to change this behavior.</p>
<p>By providing the <code>fs</code> option, it is possible to override the corresponding <code>fs</code>
implementations for <code>open</code>, <code>read</code>, and <code>close</code>. When providing the <code>fs</code> option,
an override for <code>read</code> is required. If no <code>fd</code> is provided, an override for
<code>open</code> is also required. If <code>autoClose</code> is <code>true</code>, an override for <code>close</code> is
also required.</p>
<pre><code class=""language-mjs"">import { createReadStream } from 'node:fs';

// Create a stream from some character device.
const stream = createReadStream('/dev/input/event0');
setTimeout(() => {
  stream.close(); // This may not close the stream.
  // Artificially marking end-of-stream, as if the underlying resource had
  // indicated end-of-file by itself, allows the stream to close.
  // This does not cancel pending read operations, and if there is such an
  // operation, the process may still not be able to exit successfully
  // until it finishes.
  stream.push(null);
  stream.read(0);
}, 100);
</code></pre>
<p>If <code>autoClose</code> is false, then the file descriptor won't be closed, even if
there's an error. It is the application's responsibility to close it and make
sure there's no file descriptor leak. If <code>autoClose</code> is set to true (default
behavior), on <code>'error'</code> or <code>'end'</code> the file descriptor will be closed
automatically.</p>
<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the
file was created.</p>
<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>
<pre><code class=""language-mjs"">import { createReadStream } from 'node:fs';

createReadStream('sample.txt', { start: 90, end: 99 });
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>",2,18,
431,fs,,createWriteStream,fs.createWriteStream,"<p><code>options</code> may also include a <code>start</code> option to allow writing data at some
position past the beginning of the file, allowed values are in the
[0, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER""><code>Number.MAX_SAFE_INTEGER</code></a>] range. Modifying a file rather than
replacing it may require the <code>flags</code> option to be set to <code>r+</code> rather than the
default <code>w</code>. The <code>encoding</code> can be any one of those accepted by <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>If <code>autoClose</code> is set to true (default behavior) on <code>'error'</code> or <code>'finish'</code>
the file descriptor will be closed automatically. If <code>autoClose</code> is false,
then the file descriptor won't be closed, even if there's an error.
It is the application's responsibility to close it and make sure there's no
file descriptor leak.</p>
<p>By default, the stream will emit a <code>'close'</code> event after it has been
destroyed.  Set the <code>emitClose</code> option to <code>false</code> to change this behavior.</p>
<p>By providing the <code>fs</code> option it is possible to override the corresponding <code>fs</code>
implementations for <code>open</code>, <code>write</code>, <code>writev</code>, and <code>close</code>. Overriding <code>write()</code>
without <code>writev()</code> can reduce performance as some optimizations (<code>_writev()</code>)
will be disabled. When providing the <code>fs</code> option, overrides for at least one of
<code>write</code> and <code>writev</code> are required. If no <code>fd</code> option is supplied, an override
for <code>open</code> is also required. If <code>autoClose</code> is <code>true</code>, an override for <code>close</code>
is also required.</p>
<p>Like <a href=""fs.html#class-fsreadstream"" class=""type"">&lt;fs.ReadStream&gt;</a>, if <code>fd</code> is specified, <a href=""fs.html#class-fswritestream"" class=""type"">&lt;fs.WriteStream&gt;</a> will ignore the
<code>path</code> argument and will use the specified file descriptor. This means that no
<code>'open'</code> event will be emitted. <code>fd</code> should be blocking; non-blocking <code>fd</code>s
should be passed to <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a>.</p>
<p>If <code>options</code> is a string, then it specifies the encoding.</p>",2,17,
432,fs,,exists,fs.exists,"<p>Test whether or not the given path exists by checking with the file system.
Then call the <code>callback</code> argument with either true or false:</p>
<pre><code class=""language-mjs"">import { exists } from 'node:fs';

exists('/etc/passwd', (e) => {
  console.log(e ? 'it exists' : 'no passwd!');
});
</code></pre>
<p><strong>The parameters for this callback are not consistent with other Node.js
callbacks.</strong> Normally, the first parameter to a Node.js callback is an <code>err</code>
parameter, optionally followed by other parameters. The <code>fs.exists()</code> callback
has only one boolean parameter. This is one reason <code>fs.access()</code> is recommended
instead of <code>fs.exists()</code>.</p>
<p>Using <code>fs.exists()</code> to check for the existence of a file before calling
<code>fs.open()</code>, <code>fs.readFile()</code>, or <code>fs.writeFile()</code> is not recommended. Doing
so introduces a race condition, since other processes may change the file's
state between the two calls. Instead, user code should open/read/write the
file directly and handle the error raised if the file does not exist.</p>
<p><strong>write (NOT RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { exists, open, close } from 'node:fs';

exists('myfile', (e) => {
  if (e) {
    console.error('myfile already exists');
  } else {
    open('myfile', 'wx', (err, fd) => {
      if (err) throw err;

      try {
        writeMyData(fd);
      } finally {
        close(fd, (err) => {
          if (err) throw err;
        });
      }
    });
  }
});
</code></pre>
<p><strong>write (RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { open, close } from 'node:fs';
open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
</code></pre>
<p><strong>read (NOT RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { open, close, exists } from 'node:fs';

exists('myfile', (e) => {
  if (e) {
    open('myfile', 'r', (err, fd) => {
      if (err) throw err;

      try {
        readMyData(fd);
      } finally {
        close(fd, (err) => {
          if (err) throw err;
        });
      }
    });
  } else {
    console.error('myfile does not exist');
  }
});
</code></pre>
<p><strong>read (RECOMMENDED)</strong></p>
<pre><code class=""language-mjs"">import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
</code></pre>
<p>The ""not recommended"" examples above check for existence and then use the
file; the ""recommended"" examples are better because they use the file directly
and handle the error, if any.</p>
<p>In general, check for the existence of a file only if the file won't be
used directly, for example when its existence is a signal from another
process.</p>",2,Others,
433,fs,,fchmod,fs.fchmod,"<p>Sets the permissions on the file. No arguments other than a possible exception
are given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fchmod.2.html""><code>fchmod(2)</code></a> documentation for more detail.</p>",3,9,
434,fs,,fchown,fs.fchown,"<p>Sets the owner of the file. No arguments other than a possible exception are
given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fchown.2.html""><code>fchown(2)</code></a> documentation for more detail.</p>",4,9,
435,fs,,fdatasync,fs.fdatasync,"<p>Forces all currently queued I/O operations associated with the file to the
operating system's synchronized I/O completion state. Refer to the POSIX
<a href=""http://man7.org/linux/man-pages/man2/fdatasync.2.html""><code>fdatasync(2)</code></a> documentation for details. No arguments other than a possible
exception are given to the completion callback.</p>",2,Others,
436,fs,,fstat,fs.fstat,"<p>Invokes the callback with the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> for the file descriptor.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fstat.2.html""><code>fstat(2)</code></a> documentation for more detail.</p>",3,Others,
437,fs,,fsync,fs.fsync,"<p>Request that all data for the open file descriptor is flushed to the storage
device. The specific implementation is operating system and device specific.
Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man2/fsync.2.html""><code>fsync(2)</code></a> documentation for more detail. No arguments other
than a possible exception are given to the completion callback.</p>",2,Others,
438,fs,,ftruncate,fs.ftruncate,"<p>Truncates the file descriptor. No arguments other than a possible exception are
given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/ftruncate.2.html""><code>ftruncate(2)</code></a> documentation for more detail.</p>
<p>If the file referred to by the file descriptor was larger than <code>len</code> bytes, only
the first <code>len</code> bytes will be retained in the file.</p>
<p>For example, the following program retains only the first four bytes of the
file:</p>
<pre><code class=""language-mjs"">import { open, close, ftruncate } from 'node:fs';

function closeFd(fd) {
  close(fd, (err) => {
    if (err) throw err;
  });
}

open('temp.txt', 'r+', (err, fd) => {
  if (err) throw err;

  try {
    ftruncate(fd, 4, (err) => {
      closeFd(fd);
      if (err) throw err;
    });
  } catch (err) {
    closeFd(fd);
    if (err) throw err;
  }
});
</code></pre>
<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the
extended part is filled with null bytes (<code>'\0'</code>):</p>
<p>If <code>len</code> is negative then <code>0</code> will be used.</p>",3,Others,
439,fs,,futimes,fs.futimes,"<p>Change the file system timestamps of the object referenced by the supplied file
descriptor. See <a href=""fs.html#fsutimespath-atime-mtime-callback""><code>fs.utimes()</code></a>.</p>",4,Others,
440,fs,,lchmod,fs.lchmod,"<p>Changes the permissions on a symbolic link. No arguments other than a possible
exception are given to the completion callback.</p>
<p>This method is only implemented on macOS.</p>
<p>See the POSIX <a href=""https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2""><code>lchmod(2)</code></a> documentation for more detail.</p>",3,9,
441,fs,,lchown,fs.lchown,"<p>Set the owner of the symbolic link. No arguments other than a possible
exception are given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/lchown.2.html""><code>lchown(2)</code></a> documentation for more detail.</p>",4,9,
442,fs,,lutimes,fs.lutimes,"<p>Changes the access and modification times of a file in the same way as
<a href=""fs.html#fsutimespath-atime-mtime-callback""><code>fs.utimes()</code></a>, with the difference that if the path refers to a symbolic
link, then the link is not dereferenced: instead, the timestamps of the
symbolic link itself are changed.</p>
<p>No arguments other than a possible exception are given to the completion
callback.</p>",4,Others,
443,fs,,link,fs.link,"<p>Creates a new link from the <code>existingPath</code> to the <code>newPath</code>. See the POSIX
<a href=""http://man7.org/linux/man-pages/man2/link.2.html""><code>link(2)</code></a> documentation for more detail. No arguments other than a possible
exception are given to the completion callback.</p>",3,Others,
444,fs,,lstat,fs.lstat,"<p>Retrieves the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> for the symbolic link referred to by the path.
The callback gets two arguments <code>(err, stats)</code> where <code>stats</code> is a <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a>
object. <code>lstat()</code> is identical to <code>stat()</code>, except that if <code>path</code> is a symbolic
link, then the link itself is stat-ed, not the file that it refers to.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/lstat.2.html""><code>lstat(2)</code></a> documentation for more details.</p>",3,Others,
445,fs,,mkdir,fs.mkdir,"<p>Asynchronously creates a directory.</p>
<p>The callback is given a possible exception and, if <code>recursive</code> is <code>true</code>, the
first directory path created, <code>(err[, path])</code>.
<code>path</code> can still be <code>undefined</code> when <code>recursive</code> is <code>true</code>, if no directory was
created (for instance, if it was previously created).</p>
<p>The optional <code>options</code> argument can be an integer specifying <code>mode</code> (permission
and sticky bits), or an object with a <code>mode</code> property and a <code>recursive</code>
property indicating whether parent directories should be created. Calling
<code>fs.mkdir()</code> when <code>path</code> is a directory that exists results in an error only
when <code>recursive</code> is false. If <code>recursive</code> is false and the directory exists,
an <code>EEXIST</code> error occurs.</p>
<pre><code class=""language-mjs"">import { mkdir } from 'node:fs';

// Create ./tmp/a/apple, regardless of whether ./tmp and ./tmp/a exist.
mkdir('./tmp/a/apple', { recursive: true }, (err) => {
  if (err) throw err;
});
</code></pre>
<p>On Windows, using <code>fs.mkdir()</code> on the root directory even with recursion will
result in an error:</p>
<pre><code class=""language-mjs"">import { mkdir } from 'node:fs';

mkdir('/', { recursive: true }, (err) => {
  // => [Error: EPERM: operation not permitted, mkdir 'C:\']
});
</code></pre>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/mkdir.2.html""><code>mkdir(2)</code></a> documentation for more details.</p>",3,10,
446,fs,,mkdtemp,fs.mkdtemp,"<p>Creates a unique temporary directory.</p>
<p>Generates six random characters to be appended behind a required
<code>prefix</code> to create a unique temporary directory. Due to platform
inconsistencies, avoid trailing <code>X</code> characters in <code>prefix</code>. Some platforms,
notably the BSDs, can return more than six random characters, and replace
trailing <code>X</code> characters in <code>prefix</code> with random characters.</p>
<p>The created directory path is passed as a string to the callback's second
parameter.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use.</p>
<pre><code class=""language-mjs"">import { mkdtemp } from 'node:fs';
import { join } from 'node:path';
import { tmpdir } from 'node:os';

mkdtemp(join(tmpdir(), 'foo-'), (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Prints: /tmp/foo-itXde2 or C:\Users\...\AppData\Local\Temp\foo-itXde2
});
</code></pre>
<p>The <code>fs.mkdtemp()</code> method will append the six randomly selected characters
directly to the <code>prefix</code> string. For instance, given a directory <code>/tmp</code>, if the
intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the <code>prefix</code>
must end with a trailing platform-specific path separator
(<code>require('node:path').sep</code>).</p>
<pre><code class=""language-mjs"">import { tmpdir } from 'node:os';
import { mkdtemp } from 'node:fs';

// The parent directory for the new temporary directory
const tmpDir = tmpdir();

// This method is *INCORRECT*:
mkdtemp(tmpDir, (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Will print something similar to `/tmpabc123`.
  // A new temporary directory is created at the file system root
  // rather than *within* the /tmp directory.
});

// This method is *CORRECT*:
import { sep } from 'node:path';
mkdtemp(`${tmpDir}${sep}`, (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Will print something similar to `/tmp/abc123`.
  // A new temporary directory is created within
  // the /tmp directory.
});
</code></pre>",3,10,
447,fs,,open,fs.open,"<p>Asynchronous file open. See the POSIX <a href=""http://man7.org/linux/man-pages/man2/open.2.html""><code>open(2)</code></a> documentation for more details.</p>
<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was
created. On Windows, only the write permission can be manipulated; see
<a href=""fs.html#fschmodpath-mode-callback""><code>fs.chmod()</code></a>.</p>
<p>The callback gets two arguments <code>(err, fd)</code>.</p>
<p>Some characters (<code>&#x3C; > : "" / \ | ? *</code>) are reserved under Windows as documented
by <a href=""https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file"">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains
a colon, Node.js will open a file system stream, as described by
<a href=""https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams"">this MSDN page</a>.</p>
<p>Functions based on <code>fs.open()</code> exhibit this behavior as well:
<code>fs.writeFile()</code>, <code>fs.readFile()</code>, etc.</p>",4,19,
448,fs,,openAsBlob,fs.openAsBlob,"<p>Returns a <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> whose data is backed by the given file.</p>
<p>The file must not be modified after the <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> is created. Any modifications
will cause reading the <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> data to fail with a <code>DOMException</code> error.
Synchronous stat operations on the file when the <code>Blob</code> is created, and before
each read in order to detect whether the file data has been modified on disk.</p>
<pre><code class=""language-mjs"">import { openAsBlob } from 'node:fs';

const blob = await openAsBlob('the.file.txt');
const ab = await blob.arrayBuffer();
blob.stream();
</code></pre>
<pre><code class=""language-cjs"">const { openAsBlob } = require('node:fs');

(async () => {
  const blob = await openAsBlob('the.file.txt');
  const ab = await blob.arrayBuffer();
  blob.stream();
})();
</code></pre>",2,19,
449,fs,,opendir,fs.opendir,"<p>Asynchronously open a directory. See the POSIX <a href=""http://man7.org/linux/man-pages/man3/opendir.3.html""><code>opendir(3)</code></a> documentation for
more details.</p>
<p>Creates an <a href=""fs.html#class-fsdir"" class=""type"">&lt;fs.Dir&gt;</a>, which contains all further functions for reading from
and cleaning up the directory.</p>
<p>The <code>encoding</code> option sets the encoding for the <code>path</code> while opening the
directory and subsequent read operations.</p>",3,19,
450,fs,,read,fs.read,"<p>Read data from the file specified by <code>fd</code>.</p>
<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>
<p>If the file is not modified concurrently, the end-of-file is reached when the
number of bytes read is zero.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a promise for an <code>Object</code> with <code>bytesRead</code> and <code>buffer</code> properties.</p>",6,12,
453,fs,,readdir,fs.readdir,"<p>Reads the contents of a directory. The callback gets two arguments <code>(err, files)</code>
where <code>files</code> is an array of the names of the files in the directory excluding
<code>'.'</code> and <code>'..'</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> documentation for more details.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the filenames passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the filenames returned will be passed as <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> objects.</p>
<p>If <code>options.withFileTypes</code> is set to <code>true</code>, the <code>files</code> array will contain
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> objects.</p>",3,3,
454,fs,,readFile,fs.readFile,The fs.readFile() method is an inbuilt method that is used to read the file. This method read the entire file into the buffer,3,12,
455,fs,,readlink,fs.readlink,"<p>Reads the contents of the symbolic link referred to by <code>path</code>. The callback gets
two arguments <code>(err, linkString)</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/readlink.2.html""><code>readlink(2)</code></a> documentation for more details.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the link path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the link path returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>",3,12,
456,fs,,readv,fs.readv,"<p>Read from a file specified by <code>fd</code> and write to an array of <code>ArrayBufferView</code>s
using <code>readv()</code>.</p>
<p><code>position</code> is the offset from the beginning of the file from where data
should be read. If <code>typeof position !== 'number'</code>, the data will be read
from the current position.</p>
<p>The callback will be given three arguments: <code>err</code>, <code>bytesRead</code>, and
<code>buffers</code>. <code>bytesRead</code> is how many bytes were read from the file.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a promise for an <code>Object</code> with <code>bytesRead</code> and <code>buffers</code> properties.</p>",4,12,
457,fs,,realpath,fs.realpath,"<p>Asynchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code>, and
symbolic links.</p>
<p>A canonical pathname is not necessarily unique. Hard links and bind mounts can
expose a file system entity through many pathnames.</p>
<p>This function behaves like <a href=""http://man7.org/linux/man-pages/man3/realpath.3.html""><code>realpath(3)</code></a>, with some exceptions:</p>
<ol>
<li>
<p>No case conversion is performed on case-insensitive file systems.</p>
</li>
<li>
<p>The maximum number of symbolic links is platform-independent and generally
(much) higher than what the native <a href=""http://man7.org/linux/man-pages/man3/realpath.3.html""><code>realpath(3)</code></a> implementation supports.</p>
</li>
</ol>
<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>. May use <code>process.cwd</code>
to resolve relative paths.</p>
<p>Only paths that can be converted to UTF8 strings are supported.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the path returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>
<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system
dependent name for that object.</p>",3,Others,
458,fs,,native,fs.realpath.native,"<p>Asynchronous <a href=""http://man7.org/linux/man-pages/man3/realpath.3.html""><code>realpath(3)</code></a>.</p>
<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>.</p>
<p>Only paths that can be converted to UTF8 strings are supported.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>,
the path returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>
<p>On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on <code>/proc</code> in order for this function to work. Glibc does not have
this restriction.</p>",3,Others,
459,fs,,rename,fs.rename,"<p>Asynchronously rename file at <code>oldPath</code> to the pathname provided
as <code>newPath</code>. In the case that <code>newPath</code> already exists, it will
be overwritten. If there is a directory at <code>newPath</code>, an error will
be raised instead. No arguments other than a possible exception are
given to the completion callback.</p>
<p>See also: <a href=""http://man7.org/linux/man-pages/man2/rename.2.html""><code>rename(2)</code></a>.</p>
<pre><code class=""language-mjs"">import { rename } from 'node:fs';

rename('oldFile.txt', 'newFile.txt', (err) => {
  if (err) throw err;
  console.log('Rename complete!');
});
</code></pre>",3,Others,
460,fs,,rmdir,fs.rmdir,"<p>Asynchronous <a href=""http://man7.org/linux/man-pages/man2/rmdir.2.html""><code>rmdir(2)</code></a>. No arguments other than a possible exception are given
to the completion callback.</p>
<p>Using <code>fs.rmdir()</code> on a file (not a directory) results in an <code>ENOENT</code> error on
Windows and an <code>ENOTDIR</code> error on POSIX.</p>
<p>To get a behavior similar to the <code>rm -rf</code> Unix command, use <a href=""fs.html#fsrmpath-options-callback""><code>fs.rm()</code></a>
with options <code>{ recursive: true, force: true }</code>.</p>",3,8,
461,fs,,rm,fs.rm,"<p>Asynchronously removes files and directories (modeled on the standard POSIX <code>rm</code>
utility). No arguments other than a possible exception are given to the
completion callback.</p>",3,8,
462,fs,,stat,fs.stat,"<p>Asynchronous <a href=""http://man7.org/linux/man-pages/man2/stat.2.html""><code>stat(2)</code></a>. The callback gets two arguments <code>(err, stats)</code> where
<code>stats</code> is an <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object.</p>
<p>In case of an error, the <code>err.code</code> will be one of <a href=""errors.html#common-system-errors"">Common System Errors</a>.</p>
<p><a href=""fs.html#fsstatpath-options-callback""><code>fs.stat()</code></a> follows symbolic links. Use <a href=""fs.html#fslstatpath-options-callback""><code>fs.lstat()</code></a> to look at the
links themselves.</p>
<p>Using <code>fs.stat()</code> to check for the existence of a file before calling
<code>fs.open()</code>, <code>fs.readFile()</code>, or <code>fs.writeFile()</code> is not recommended.
Instead, user code should open/read/write the file directly and handle the
error raised if the file is not available.</p>
<p>To check if a file exists without manipulating it afterwards, <a href=""fs.html#fsaccesspath-mode-callback""><code>fs.access()</code></a>
is recommended.</p>
<p>For example, given the following directory structure:</p>
<pre><code class=""language-text"">- txtDir
-- file.txt
- app.js
</code></pre>
<p>The next program will check for the stats of the given paths:</p>
<pre><code class=""language-mjs"">import { stat } from 'node:fs';

const pathsToCheck = ['./txtDir', './txtDir/file.txt'];

for (let i = 0; i &#x3C; pathsToCheck.length; i++) {
  stat(pathsToCheck[i], (err, stats) => {
    console.log(stats.isDirectory());
    console.log(stats);
  });
}
</code></pre>
<p>The resulting output will resemble:</p>
<pre><code class=""language-console"">true
Stats {
  dev: 16777220,
  mode: 16877,
  nlink: 3,
  uid: 501,
  gid: 20,
  rdev: 0,
  blksize: 4096,
  ino: 14214262,
  size: 96,
  blocks: 0,
  atimeMs: 1561174653071.963,
  mtimeMs: 1561174614583.3518,
  ctimeMs: 1561174626623.5366,
  birthtimeMs: 1561174126937.2893,
  atime: 2019-06-22T03:37:33.072Z,
  mtime: 2019-06-22T03:36:54.583Z,
  ctime: 2019-06-22T03:37:06.624Z,
  birthtime: 2019-06-22T03:28:46.937Z
}
false
Stats {
  dev: 16777220,
  mode: 33188,
  nlink: 1,
  uid: 501,
  gid: 20,
  rdev: 0,
  blksize: 4096,
  ino: 14214074,
  size: 8,
  blocks: 8,
  atimeMs: 1561174616618.8555,
  mtimeMs: 1561174614584,
  ctimeMs: 1561174614583.8145,
  birthtimeMs: 1561174007710.7478,
  atime: 2019-06-22T03:36:56.619Z,
  mtime: 2019-06-22T03:36:54.584Z,
  ctime: 2019-06-22T03:36:54.584Z,
  birthtime: 2019-06-22T03:26:47.711Z
}
</code></pre>",3,Others,
463,fs,,statfs,fs.statfs,"<p>Asynchronous <a href=""http://man7.org/linux/man-pages/man2/statfs.2.html""><code>statfs(2)</code></a>. Returns information about the mounted file system which
contains <code>path</code>. The callback gets two arguments <code>(err, stats)</code> where <code>stats</code>
is an <a href=""fs.html#class-fsstatfs"" class=""type"">&lt;fs.StatFs&gt;</a> object.</p>
<p>In case of an error, the <code>err.code</code> will be one of <a href=""errors.html#common-system-errors"">Common System Errors</a>.</p>",3,Others,
464,fs,,symlink,fs.symlink,"<p>Creates the link called <code>path</code> pointing to <code>target</code>. No arguments other than a
possible exception are given to the completion callback.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/symlink.2.html""><code>symlink(2)</code></a> documentation for more details.</p>
<p>The <code>type</code> argument is only available on Windows and ignored on other platforms.
It can be set to <code>'dir'</code>, <code>'file'</code>, or <code>'junction'</code>. If the <code>type</code> argument is
not a string, Node.js will autodetect <code>target</code> type and use <code>'file'</code> or <code>'dir'</code>.
If the <code>target</code> does not exist, <code>'file'</code> will be used. Windows junction points
require the destination path to be absolute. When using <code>'junction'</code>, the
<code>target</code> argument will automatically be normalized to absolute path. Junction
points on NTFS volumes can only point to directories.</p>
<p>Relative targets are relative to the link's parent directory.</p>
<pre><code class=""language-mjs"">import { symlink } from 'node:fs';

symlink('./mew', './mewtwo', callback);
</code></pre>
<p>The above example creates a symbolic link <code>mewtwo</code> which points to <code>mew</code> in the
same directory:</p>
<pre><code class=""language-bash"">$ tree .
.
├── mew
└── mewtwo -> ./mew
</code></pre>",4,Others,
465,fs,,truncate,fs.truncate,"<p>Truncates the file. No arguments other than a possible exception are
given to the completion callback. A file descriptor can also be passed as the
first argument. In this case, <code>fs.ftruncate()</code> is called.</p>
<pre><code class=""language-mjs"">import { truncate } from 'node:fs';
// Assuming that 'path/file.txt' is a regular file.
truncate('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was truncated');
});
</code></pre>
<pre><code class=""language-cjs"">const { truncate } = require('node:fs');
// Assuming that 'path/file.txt' is a regular file.
truncate('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was truncated');
});
</code></pre>
<p>Passing a file descriptor is deprecated and may result in an error being thrown
in the future.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/truncate.2.html""><code>truncate(2)</code></a> documentation for more details.</p>",3,Others,
466,fs,,unlink,fs.unlink,"<p>Asynchronously removes a file or symbolic link. No arguments other than a
possible exception are given to the completion callback.</p>
<pre><code class=""language-mjs"">import { unlink } from 'node:fs';
// Assuming that 'path/file.txt' is a regular file.
unlink('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was deleted');
});
</code></pre>
<p><code>fs.unlink()</code> will not work on a directory, empty or otherwise. To remove a
directory, use <a href=""fs.html#fsrmdirpath-options-callback""><code>fs.rmdir()</code></a>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/unlink.2.html""><code>unlink(2)</code></a> documentation for more details.</p>",2,8,
467,fs,,unwatchFile,fs.unwatchFile,"<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that
particular listener is removed. Otherwise, <em>all</em> listeners are removed,
effectively stopping watching of <code>filename</code>.</p>
<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a
no-op, not an error.</p>
<p>Using <a href=""fs.html#fswatchfilename-options-listener""><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and
<code>fs.unwatchFile()</code>. <code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code>
and <code>fs.unwatchFile()</code> when possible.</p>",2,Others,
468,fs,,utimes,fs.utimes,"<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>
<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>
<ul>
<li>Values can be either numbers representing Unix epoch time in seconds,
<code>Date</code>s, or a numeric string like <code>'123456789.0'</code>.</li>
<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code>, or
<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>
</ul>",4,Others,
469,fs,,watch,fs.watch,"<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a
directory.</p>
<p>The second argument is optional. If <code>options</code> is provided as a string, it
specifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>
<p>The listener callback gets two arguments <code>(eventType, filename)</code>. <code>eventType</code>
is either <code>'rename'</code> or <code>'change'</code>, and <code>filename</code> is the name of the file
which triggered the event.</p>
<p>On most platforms, <code>'rename'</code> is emitted whenever a filename appears or
disappears in the directory.</p>
<p>The listener callback is attached to the <code>'change'</code> event fired by
<a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a>, but it is not the same thing as the <code>'change'</code> value of
<code>eventType</code>.</p>
<p>If a <code>signal</code> is passed, aborting the corresponding AbortController will close
the returned <a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a>.</p>",3,Others,
470,fs,,watchFile,fs.watchFile,"<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each
time the file is accessed.</p>
<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The
<code>options</code> object may contain a boolean named <code>persistent</code> that indicates
whether the process should continue to run as long as files are being watched.
The <code>options</code> object may specify an <code>interval</code> property indicating how often the
target should be polled in milliseconds.</p>
<p>The <code>listener</code> gets two arguments the current stat object and the previous
stat object:</p>
<pre><code class=""language-mjs"">import { watchFile } from 'node:fs';

watchFile('message.text', (curr, prev) => {
  console.log(`the current mtime is: ${curr.mtime}`);
  console.log(`the previous mtime was: ${prev.mtime}`);
});
</code></pre>
<p>These stat objects are instances of <code>fs.Stat</code>. If the <code>bigint</code> option is <code>true</code>,
the numeric values in these objects are specified as <code>BigInt</code>s.</p>
<p>To be notified when the file was modified, not just accessed, it is necessary
to compare <code>curr.mtimeMs</code> and <code>prev.mtimeMs</code>.</p>
<p>When an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it
will invoke the listener once, with all the fields zeroed (or, for dates, the
Unix Epoch). If the file is created later on, the listener will be called
again, with the latest stat objects. This is a change in functionality since
v0.10.</p>
<p>Using <a href=""fs.html#fswatchfilename-options-listener""><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and
<code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and
<code>fs.unwatchFile</code> when possible.</p>
<p>When a file being watched by <code>fs.watchFile()</code> disappears and reappears,
then the contents of <code>previous</code> in the second callback event (the file's
reappearance) will be the same as the contents of <code>previous</code> in the first
callback event (its disappearance).</p>
<p>This happens when:</p>
<ul>
<li>the file is deleted, followed by a restore</li>
<li>the file is renamed and then renamed a second time back to its original name</li>
</ul>",3,Others,
471,fs,,write,fs.write,"<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>
<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is
an integer specifying the number of bytes to write.</p>
<p><code>position</code> refers to the offset from the beginning of the file where this data
should be written. If <code>typeof position !== 'number'</code>, the data will be written
at the current position. See <a href=""http://man7.org/linux/man-pages/man2/pwrite.2.html""><code>pwrite(2)</code></a>.</p>
<p>The callback will be given three arguments <code>(err, bytesWritten, buffer)</code> where
<code>bytesWritten</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>
<p>If this method is invoked as its <a href=""util.html#utilpromisifyoriginal""><code>util.promisify()</code></a>ed version, it returns
a promise for an <code>Object</code> with <code>bytesWritten</code> and <code>buffer</code> properties.</p>
<p>It is unsafe to use <code>fs.write()</code> multiple times on the same file without waiting
for the callback. For this scenario, <a href=""fs.html#fscreatewritestreampath-options""><code>fs.createWriteStream()</code></a> is
recommended.</p>
<p>On Linux, positional writes don't work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.</p>",6,14,
474,fs,,writeFile,fs.writeFile,"<p>When <code>file</code> is a filename, asynchronously writes data to the file, replacing the
file if it already exists. <code>data</code> can be a string or a buffer.</p>
<p>When <code>file</code> is a file descriptor, the behavior is similar to calling
<code>fs.write()</code> directly (which is recommended). See the notes below on using
a file descriptor.</p>
<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>
<p>The <code>mode</code> option only affects the newly created file. See <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>
for more details.</p>
<pre><code class=""language-mjs"">import { writeFile } from 'node:fs';
import { Buffer } from 'node:buffer';

const data = new Uint8Array(Buffer.from('Hello Node.js'));
writeFile('message.txt', data, (err) => {
  if (err) throw err;
  console.log('The file has been saved!');
});
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding:</p>
<pre><code class=""language-mjs"">import { writeFile } from 'node:fs';

writeFile('message.txt', 'Hello Node.js', 'utf8', callback);
</code></pre>
<p>It is unsafe to use <code>fs.writeFile()</code> multiple times on the same file without
waiting for the callback. For this scenario, <a href=""fs.html#fscreatewritestreampath-options""><code>fs.createWriteStream()</code></a> is
recommended.</p>
<p>Similarly to <code>fs.readFile</code> - <code>fs.writeFile</code> is a convenience method that
performs multiple <code>write</code> calls internally to write the buffer passed to it.
For performance sensitive code consider using <a href=""fs.html#fscreatewritestreampath-options""><code>fs.createWriteStream()</code></a>.</p>
<p>It is possible to use an <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> to cancel an <code>fs.writeFile()</code>.
Cancelation is ""best effort"", and some amount of data is likely still
to be written.</p>
<pre><code class=""language-mjs"">import { writeFile } from 'node:fs';
import { Buffer } from 'node:buffer';

const controller = new AbortController();
const { signal } = controller;
const data = new Uint8Array(Buffer.from('Hello Node.js'));
writeFile('message.txt', data, { signal }, (err) => {
  // When a request is aborted - the callback is called with an AbortError
});
// When the request should be aborted
controller.abort();
</code></pre>
<p>Aborting an ongoing request does not abort individual operating
system requests but rather the internal buffering <code>fs.writeFile</code> performs.</p>",4,14,
476,fs,,accessSync,fs.accessSync,"<p>Synchronously tests a user's permissions for the file or directory specified
by <code>path</code>. The <code>mode</code> argument is an optional integer that specifies the
accessibility checks to be performed. <code>mode</code> should be either the value
<code>fs.constants.F_OK</code> or a mask consisting of the bitwise OR of any of
<code>fs.constants.R_OK</code>, <code>fs.constants.W_OK</code>, and <code>fs.constants.X_OK</code> (e.g.
<code>fs.constants.W_OK | fs.constants.R_OK</code>). Check <a href=""fs.html#file-access-constants"">File access constants</a> for
possible values of <code>mode</code>.</p>
<p>If any of the accessibility checks fail, an <code>Error</code> will be thrown. Otherwise,
the method will return <code>undefined</code>.</p>
<pre><code class=""language-mjs"">import { accessSync, constants } from 'node:fs';

try {
  accessSync('etc/passwd', constants.R_OK | constants.W_OK);
  console.log('can read/write');
} catch (err) {
  console.error('no access!');
}
</code></pre>",2,Others,
477,fs,,appendFileSync,fs.appendFileSync,"<p>Synchronously append data to a file, creating the file if it does not yet
exist. <code>data</code> can be a string or a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a>.</p>
<p>The <code>mode</code> option only affects the newly created file. See <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>
for more details.</p>
<pre><code class=""language-mjs"">import { appendFileSync } from 'node:fs';

try {
  appendFileSync('message.txt', 'data to append');
  console.log('The ""data to append"" was appended to file!');
} catch (err) {
  /* Handle the error */
}
</code></pre>
<p>If <code>options</code> is a string, then it specifies the encoding:</p>
<pre><code class=""language-mjs"">import { appendFileSync } from 'node:fs';

appendFileSync('message.txt', 'data to append', 'utf8');
</code></pre>
<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened
for appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will
not be closed automatically.</p>
<pre><code class=""language-mjs"">import { openSync, closeSync, appendFileSync } from 'node:fs';

let fd;

try {
  fd = openSync('message.txt', 'a');
  appendFileSync(fd, 'data to append', 'utf8');
} catch (err) {
  /* Handle the error */
} finally {
  if (fd !== undefined)
    closeSync(fd);
}
</code></pre>",3,14,
478,fs,,chmodSync,fs.chmodSync,"<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fschmodpath-mode-callback""><code>fs.chmod()</code></a>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/chmod.2.html""><code>chmod(2)</code></a> documentation for more detail.</p>",2,9,
479,fs,,chownSync,fs.chownSync,"<p>Synchronously changes owner and group of a file. Returns <code>undefined</code>.
This is the synchronous version of <a href=""fs.html#fschownpath-uid-gid-callback""><code>fs.chown()</code></a>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/chown.2.html""><code>chown(2)</code></a> documentation for more detail.</p>",3,9,
480,fs,,closeSync,fs.closeSync,"<p>Closes the file descriptor. Returns <code>undefined</code>.</p>
<p>Calling <code>fs.closeSync()</code> on any file descriptor (<code>fd</code>) that is currently in use
through any other <code>fs</code> operation may lead to undefined behavior.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/close.2.html""><code>close(2)</code></a> documentation for more detail.</p>",1,Others,
481,fs,,copyFileSync,fs.copyFileSync,"<p>Synchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it
already exists. Returns <code>undefined</code>. Node.js makes no guarantees about the
atomicity of the copy operation. If an error occurs after the destination file
has been opened for writing, Node.js will attempt to remove the destination.</p>
<p><code>mode</code> is an optional integer that specifies the behavior
of the copy operation. It is possible to create a mask consisting of the bitwise
OR of two or more values (e.g.
<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>
<ul>
<li><code>fs.constants.COPYFILE_EXCL</code>: The copy operation will fail if <code>dest</code> already
exists.</li>
<li><code>fs.constants.COPYFILE_FICLONE</code>: The copy operation will attempt to create a
copy-on-write reflink. If the platform does not support copy-on-write, then a
fallback copy mechanism is used.</li>
<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code>: The copy operation will attempt to
create a copy-on-write reflink. If the platform does not support
copy-on-write, then the operation will fail.</li>
</ul>
<pre><code class=""language-mjs"">import { copyFileSync, constants } from 'node:fs';

// destination.txt will be created or overwritten by default.
copyFileSync('source.txt', 'destination.txt');
console.log('source.txt was copied to destination.txt');

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
copyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);
</code></pre>",3,7,
482,fs,,cpSync,fs.cpSync,"<p>Synchronously copies the entire directory structure from <code>src</code> to <code>dest</code>,
including subdirectories and files.</p>
<p>When copying a directory to another directory, globs are not supported and
behavior is similar to <code>cp dir1/ dir2/</code>.</p>",3,7,
483,fs,,existsSync,fs.existsSync,"<p>Returns <code>true</code> if the path exists, <code>false</code> otherwise.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsexistspath-callback""><code>fs.exists()</code></a>.</p>
<p><code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not. The <code>callback</code>
parameter to <code>fs.exists()</code> accepts parameters that are inconsistent with other
Node.js callbacks. <code>fs.existsSync()</code> does not use a callback.</p>
<pre><code class=""language-mjs"">import { existsSync } from 'node:fs';

if (existsSync('/etc/passwd'))
  console.log('The path exists.');
</code></pre>",1,Others,
484,fs,,fchmodSync,fs.fchmodSync,"<p>Sets the permissions on the file. Returns <code>undefined</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fchmod.2.html""><code>fchmod(2)</code></a> documentation for more detail.</p>",2,9,
485,fs,,fchownSync,fs.fchownSync,"<p>Sets the owner of the file. Returns <code>undefined</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fchown.2.html""><code>fchown(2)</code></a> documentation for more detail.</p>",3,9,
486,fs,,fdatasyncSync,fs.fdatasyncSync,"<p>Forces all currently queued I/O operations associated with the file to the
operating system's synchronized I/O completion state. Refer to the POSIX
<a href=""http://man7.org/linux/man-pages/man2/fdatasync.2.html""><code>fdatasync(2)</code></a> documentation for details. Returns <code>undefined</code>.</p>",1,Others,
487,fs,,fstatSync,fs.fstatSync,"<p>Retrieves the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> for the file descriptor.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/fstat.2.html""><code>fstat(2)</code></a> documentation for more detail.</p>",2,Others,
488,fs,,fsyncSync,fs.fsyncSync,"<p>Request that all data for the open file descriptor is flushed to the storage
device. The specific implementation is operating system and device specific.
Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man2/fsync.2.html""><code>fsync(2)</code></a> documentation for more detail. Returns <code>undefined</code>.</p>",1,Others,
489,fs,,ftruncateSync,fs.ftruncateSync,"<p>Truncates the file descriptor. Returns <code>undefined</code>.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsftruncatefd-len-callback""><code>fs.ftruncate()</code></a>.</p>",2,Others,
490,fs,,futimesSync,fs.futimesSync,"<p>Synchronous version of <a href=""fs.html#fsfutimesfd-atime-mtime-callback""><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>",3,Others,
491,fs,,lchmodSync,fs.lchmodSync,"<p>Changes the permissions on a symbolic link. Returns <code>undefined</code>.</p>
<p>This method is only implemented on macOS.</p>
<p>See the POSIX <a href=""https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2""><code>lchmod(2)</code></a> documentation for more detail.</p>",2,9,
492,fs,,lchownSync,fs.lchownSync,"<p>Set the owner for the path. Returns <code>undefined</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/lchown.2.html""><code>lchown(2)</code></a> documentation for more details.</p>",3,9,
493,fs,,lutimesSync,fs.lutimesSync,"<p>Change the file system timestamps of the symbolic link referenced by <code>path</code>.
Returns <code>undefined</code>, or throws an exception when parameters are incorrect or
the operation fails. This is the synchronous version of <a href=""fs.html#fslutimespath-atime-mtime-callback""><code>fs.lutimes()</code></a>.</p>",3,Others,
494,fs,,linkSync,fs.linkSync,"<p>Creates a new link from the <code>existingPath</code> to the <code>newPath</code>. See the POSIX
<a href=""http://man7.org/linux/man-pages/man2/link.2.html""><code>link(2)</code></a> documentation for more detail. Returns <code>undefined</code>.</p>",2,Others,
495,fs,,lstatSync,fs.lstatSync,"<p>Retrieves the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> for the symbolic link referred to by <code>path</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/lstat.2.html""><code>lstat(2)</code></a> documentation for more details.</p>",2,Others,
496,fs,,mkdirSync,fs.mkdirSync,"<p>Synchronously creates a directory. Returns <code>undefined</code>, or if <code>recursive</code> is
<code>true</code>, the first directory path created.
This is the synchronous version of <a href=""fs.html#fsmkdirpath-options-callback""><code>fs.mkdir()</code></a>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/mkdir.2.html""><code>mkdir(2)</code></a> documentation for more details.</p>",2,10,
497,fs,,mkdtempSync,fs.mkdtempSync,"<p>Returns the created directory path.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsmkdtempprefix-options-callback""><code>fs.mkdtemp()</code></a>.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use.</p>",2,10,
498,fs,,opendirSync,fs.opendirSync,"<p>Synchronously open a directory. See <a href=""http://man7.org/linux/man-pages/man3/opendir.3.html""><code>opendir(3)</code></a>.</p>
<p>Creates an <a href=""fs.html#class-fsdir"" class=""type"">&lt;fs.Dir&gt;</a>, which contains all further functions for reading from
and cleaning up the directory.</p>
<p>The <code>encoding</code> option sets the encoding for the <code>path</code> while opening the
directory and subsequent read operations.</p>",2,19,
499,fs,,openSync,fs.openSync,"<p>Returns an integer representing the file descriptor.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsopenpath-flags-mode-callback""><code>fs.open()</code></a>.</p>",3,19,
500,fs,,readdirSync,fs.readdirSync,"<p>Reads the contents of the directory.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> documentation for more details.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the filenames returned. If the <code>encoding</code> is set to <code>'buffer'</code>,
the filenames returned will be passed as <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> objects.</p>
<p>If <code>options.withFileTypes</code> is set to <code>true</code>, the result will contain
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> objects.</p>",2,3,
501,fs,,readFileSync,fs.readFileSync,"The fs.readFileSync() method is an inbuilt application programming interface of the fs module which is used to read the file and return its content. In the fs.readFile() method, we can read a file in a non-blocking asynchronous way, but in the fs.readFileSync() method, we can synchronously read files, i.e. we are telling node.js to block other parallel processes and do the current file reading process. That is, when the fs.readFileSync() method is called the original node program stops executing",2,12,
502,fs,,readlinkSync,fs.readlinkSync,"<p>Returns the symbolic link's string value.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/readlink.2.html""><code>readlink(2)</code></a> documentation for more details.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the link path returned. If the <code>encoding</code> is set to <code>'buffer'</code>,
the link path returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>",2,12,
504,fs,,readSync,fs.readSync,"<p>Returns the number of <code>bytesRead</code>.</p>
<p>Similar to the above <code>fs.readSync</code> function, this version takes an optional <code>options</code> object.
If no <code>options</code> object is specified, it will default with the above values.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsreadfd-buffer-offset-length-position-callback""><code>fs.read()</code></a>.</p>",3,12,
505,fs,,readvSync,fs.readvSync,"<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsreadvfd-buffers-position-callback""><code>fs.readv()</code></a>.</p>",3,12,
506,fs,,realpathSync,fs.realpathSync,"<p>Returns the resolved pathname.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsrealpathpath-options-callback""><code>fs.realpath()</code></a>.</p>",2,Others,
507,fs,,native,fs.realpathSync.native,"<p>Synchronous <a href=""http://man7.org/linux/man-pages/man3/realpath.3.html""><code>realpath(3)</code></a>.</p>
<p>Only paths that can be converted to UTF8 strings are supported.</p>
<p>The optional <code>options</code> argument can be a string specifying an encoding, or an
object with an <code>encoding</code> property specifying the character encoding to use for
the path returned. If the <code>encoding</code> is set to <code>'buffer'</code>,
the path returned will be passed as a <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object.</p>
<p>On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on <code>/proc</code> in order for this function to work. Glibc does not have
this restriction.</p>",2,Others,
508,fs,,renameSync,fs.renameSync,"<p>Renames the file from <code>oldPath</code> to <code>newPath</code>. Returns <code>undefined</code>.</p>
<p>See the POSIX <a href=""http://man7.org/linux/man-pages/man2/rename.2.html""><code>rename(2)</code></a> documentation for more details.</p>",2,Others,
509,fs,,rmdirSync,fs.rmdirSync,"<p>Synchronous <a href=""http://man7.org/linux/man-pages/man2/rmdir.2.html""><code>rmdir(2)</code></a>. Returns <code>undefined</code>.</p>
<p>Using <code>fs.rmdirSync()</code> on a file (not a directory) results in an <code>ENOENT</code> error
on Windows and an <code>ENOTDIR</code> error on POSIX.</p>
<p>To get a behavior similar to the <code>rm -rf</code> Unix command, use <a href=""fs.html#fsrmsyncpath-options""><code>fs.rmSync()</code></a>
with options <code>{ recursive: true, force: true }</code>.</p>",2,8,
510,fs,,rmSync,fs.rmSync,"<p>Synchronously removes files and directories (modeled on the standard POSIX <code>rm</code>
utility). Returns <code>undefined</code>.</p>",2,8,
511,fs,,statSync,fs.statSync,"<p>Retrieves the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> for the path.</p>",2,Others,
512,fs,,statfsSync,fs.statfsSync,"<p>Synchronous <a href=""http://man7.org/linux/man-pages/man2/statfs.2.html""><code>statfs(2)</code></a>. Returns information about the mounted file system which
contains <code>path</code>.</p>
<p>In case of an error, the <code>err.code</code> will be one of <a href=""errors.html#common-system-errors"">Common System Errors</a>.</p>",2,Others,
513,fs,,symlinkSync,fs.symlinkSync,"<p>Returns <code>undefined</code>.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fssymlinktarget-path-type-callback""><code>fs.symlink()</code></a>.</p>",3,Others,
514,fs,,truncateSync,fs.truncateSync,"<p>Truncates the file. Returns <code>undefined</code>. A file descriptor can also be
passed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>
<p>Passing a file descriptor is deprecated and may result in an error being thrown
in the future.</p>",2,Others,
515,fs,,unlinkSync,fs.unlinkSync,`fs.unlink()` in Node.js removes files or symbolic links,1,8,
516,fs,,utimesSync,fs.utimesSync,"<p>Returns <code>undefined</code>.</p>
<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fsutimespath-atime-mtime-callback""><code>fs.utimes()</code></a>.</p>",3,Others,
517,fs,,writeFileSync,fs.writeFileSync,fs.writeFile() method is used to asynchronously write the specified data to a file,3,14,
518,fs,,writeSync,fs.writeSync,"<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fswritefd-buffer-offset-length-position-callback""><code>fs.write(fd, buffer...)</code></a>.</p>",5,14,
521,fs,,writevSync,fs.writevSync,"<p>For detailed information, see the documentation of the asynchronous version of
this API: <a href=""fs.html#fswritevfd-buffers-position-callback""><code>fs.writev()</code></a>.</p>",3,14,
522,dir,,close,dir.close,"<p>Asynchronously close the directory's underlying resource handle.
Subsequent reads will result in errors.</p>
<p>A promise is returned that will be fulfilled after the resource has been
closed.</p>",0,Others,
523,dir,,close,dir.close,"<p>Asynchronously close the directory's underlying resource handle.
Subsequent reads will result in errors.</p>
<p>The <code>callback</code> will be called after the resource handle has been closed.</p>",1,Others,
524,dir,,closeSync,dir.closeSync,"<p>Synchronously close the directory's underlying resource handle.
Subsequent reads will result in errors.</p>",0,Others,
525,dir,,read,dir.read,"<p>Asynchronously read the next directory entry via <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> as an
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>.</p>
<p>A promise is returned that will be fulfilled with an <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>, or <code>null</code>
if there are no more directory entries to read.</p>
<p>Directory entries returned by this function are in no particular order as
provided by the operating system's underlying directory mechanisms.
Entries added or removed while iterating over the directory might not be
included in the iteration results.</p>",0,3,
526,dir,,read,dir.read,"<p>Asynchronously read the next directory entry via <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> as an
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>.</p>
<p>After the read is completed, the <code>callback</code> will be called with an
<a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>, or <code>null</code> if there are no more directory entries to read.</p>
<p>Directory entries returned by this function are in no particular order as
provided by the operating system's underlying directory mechanisms.
Entries added or removed while iterating over the directory might not be
included in the iteration results.</p>",1,3,
527,dir,,readSync,dir.readSync,"<p>Synchronously read the next directory entry as an <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>. See the
POSIX <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> documentation for more detail.</p>
<p>If there are no more directory entries to read, <code>null</code> will be returned.</p>
<p>Directory entries returned by this function are in no particular order as
provided by the operating system's underlying directory mechanisms.
Entries added or removed while iterating over the directory might not be
included in the iteration results.</p>",0,3,
528,dir[Symbol,,[Symbol.asyncIterator],dir[Symbol.asyncIterator],"<p>Asynchronously iterates over the directory until all entries have
been read. Refer to the POSIX <a href=""http://man7.org/linux/man-pages/man3/readdir.3.html""><code>readdir(3)</code></a> documentation for more detail.</p>
<p>Entries returned by the async iterator are always an <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a>.
The <code>null</code> case from <code>dir.read()</code> is handled internally.</p>
<p>See <a href=""fs.html#class-fsdir"" class=""type"">&lt;fs.Dir&gt;</a> for an example.</p>
<p>Directory entries returned by this iterator are in no particular order as
provided by the operating system's underlying directory mechanisms.
Entries added or removed while iterating over the directory might not be
included in the iteration results.</p>",0,Others,
529,dirent,,isBlockDevice,dirent.isBlockDevice,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a block device.</p>",0,Others,
530,dirent,,isCharacterDevice,dirent.isCharacterDevice,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a character device.</p>",0,Others,
531,dirent,,isDirectory,dirent.isDirectory,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a file system
directory.</p>",0,Others,
532,dirent,,isFIFO,dirent.isFIFO,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a first-in-first-out
(FIFO) pipe.</p>",0,Others,
533,dirent,,isFile,dirent.isFile,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a regular file.</p>",0,Others,
534,dirent,,isSocket,dirent.isSocket,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a socket.</p>",0,Others,
535,dirent,,isSymbolicLink,dirent.isSymbolicLink,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsdirent"" class=""type"">&lt;fs.Dirent&gt;</a> object describes a symbolic link.</p>",0,Others,
536,watcher,,close,watcher.close,"<p>Stop watching for changes on the given <a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a>. Once stopped, the
<a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a> object is no longer usable.</p>",0,Others,
537,watcher,,ref,watcher.ref,"<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the
<a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a> is active. Calling <code>watcher.ref()</code> multiple times will have
no effect.</p>
<p>By default, all <a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a> objects are ""ref'ed"", making it normally
unnecessary to call <code>watcher.ref()</code> unless <code>watcher.unref()</code> had been
called previously.</p>",0,Others,
538,watcher,,unref,watcher.unref,"<p>When called, the active <a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a> object will not require the Node.js
event loop to remain active. If there is no other activity keeping the
event loop running, the process may exit before the <a href=""fs.html#class-fsfswatcher"" class=""type"">&lt;fs.FSWatcher&gt;</a> object's
callback is invoked. Calling <code>watcher.unref()</code> multiple times will have
no effect.</p>",0,Others,
539,watcher,,ref,watcher.ref,"<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the
<a href=""fs.html#class-fsstatwatcher"" class=""type"">&lt;fs.StatWatcher&gt;</a> is active. Calling <code>watcher.ref()</code> multiple times will have
no effect.</p>
<p>By default, all <a href=""fs.html#class-fsstatwatcher"" class=""type"">&lt;fs.StatWatcher&gt;</a> objects are ""ref'ed"", making it normally
unnecessary to call <code>watcher.ref()</code> unless <code>watcher.unref()</code> had been
called previously.</p>",0,Others,
540,watcher,,unref,watcher.unref,"<p>When called, the active <a href=""fs.html#class-fsstatwatcher"" class=""type"">&lt;fs.StatWatcher&gt;</a> object will not require the Node.js
event loop to remain active. If there is no other activity keeping the
event loop running, the process may exit before the <a href=""fs.html#class-fsstatwatcher"" class=""type"">&lt;fs.StatWatcher&gt;</a> object's
callback is invoked. Calling <code>watcher.unref()</code> multiple times will have
no effect.</p>",0,Others,
541,stats,,isBlockDevice,stats.isBlockDevice,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a block device.</p>",0,3,
542,stats,,isCharacterDevice,stats.isCharacterDevice,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a character device.</p>",0,3,
543,stats,,isDirectory,stats.isDirectory,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a file system directory.</p>
<p>If the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object was obtained from <a href=""fs.html#fslstatpath-options-callback""><code>fs.lstat()</code></a>, this method will
always return <code>false</code>. This is because <a href=""fs.html#fslstatpath-options-callback""><code>fs.lstat()</code></a> returns information
about a symbolic link itself and not the path it resolves to.</p>",0,3,
544,stats,,isFIFO,stats.isFIFO,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a first-in-first-out (FIFO)
pipe.</p>",0,3,
545,stats,,isFile,stats.isFile,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a regular file.</p>",0,Others,
546,stats,,isSocket,stats.isSocket,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a socket.</p>",0,Others,
547,stats,,isSymbolicLink,stats.isSymbolicLink,"<p>Returns <code>true</code> if the <a href=""fs.html#class-fsstats"" class=""type"">&lt;fs.Stats&gt;</a> object describes a symbolic link.</p>
<p>This method is only valid when using <a href=""fs.html#fslstatpath-options-callback""><code>fs.lstat()</code></a>.</p>",0,3,
548,writeStream,,close,writeStream.close,"<p>Closes <code>writeStream</code>. Optionally accepts a
callback that will be executed once the <code>writeStream</code>
is closed.</p>",1,Others,
549,http,,createServer,http.createServer,"<p>Returns a new instance of <a href=""http.html#class-httpserver""><code>http.Server</code></a>.</p>
<p>The <code>requestListener</code> is a function which is automatically
added to the <a href=""http.html#event-request""><code>'request'</code></a> event.</p>
<pre><code class=""language-mjs"">import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
</code></pre>
<pre><code class=""language-cjs"">const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
</code></pre>
<pre><code class=""language-mjs"">import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
</code></pre>
<pre><code class=""language-cjs"">const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
</code></pre>",2,22,
550,http,,get,http.get,"<p>Since most requests are GET requests without bodies, Node.js provides this
convenience method. The only difference between this method and
<a href=""http.html#httprequestoptions-callback""><code>http.request()</code></a> is that it sets the method to GET by default and calls <code>req.end()</code>
automatically. The callback must take care to consume the response
data for reasons stated in <a href=""http.html#class-httpclientrequest""><code>http.ClientRequest</code></a> section.</p>
<p>The <code>callback</code> is invoked with a single argument that is an instance of
<a href=""http.html#class-httpincomingmessage""><code>http.IncomingMessage</code></a>.</p>
<p>JSON fetching example:</p>
<pre><code class=""language-js"">http.get('http://localhost:8000/', (res) => {
  const { statusCode } = res;
  const contentType = res.headers['content-type'];

  let error;
  // Any 2xx status code signals a successful response but
  // here we're only checking for 200.
  if (statusCode !== 200) {
    error = new Error('Request Failed.\n' +
                      `Status Code: ${statusCode}`);
  } else if (!/^application\/json/.test(contentType)) {
    error = new Error('Invalid content-type.\n' +
                      `Expected application/json but received ${contentType}`);
  }
  if (error) {
    console.error(error.message);
    // Consume response data to free up memory
    res.resume();
    return;
  }

  res.setEncoding('utf8');
  let rawData = '';
  res.on('data', (chunk) => { rawData += chunk; });
  res.on('end', () => {
    try {
      const parsedData = JSON.parse(rawData);
      console.log(parsedData);
    } catch (e) {
      console.error(e.message);
    }
  });
}).on('error', (e) => {
  console.error(`Got error: ${e.message}`);
});

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
</code></pre>",3,20,
552,http,,request,http.request,"create an HTTP request object, which you can then use to specify details about the request",3,22,
554,http,,validateHeaderName,http.validateHeaderName,"<p>Performs the low-level validations on the provided <code>name</code> that are done when
<code>res.setHeader(name, value)</code> is called.</p>
<p>Passing illegal value as <code>name</code> will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown,
identified by <code>code: 'ERR_INVALID_HTTP_TOKEN'</code>.</p>
<p>It is not necessary to use this method before passing headers to an HTTP request
or response. The HTTP module will automatically validate such headers.</p>
<p>Example:</p>
<pre><code class=""language-mjs"">import { validateHeaderName } from 'node:http';

try {
  validateHeaderName('');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'
  console.error(err.message); // --> 'Header name must be a valid HTTP token [""""]'
}
</code></pre>
<pre><code class=""language-cjs"">const { validateHeaderName } = require('node:http');

try {
  validateHeaderName('');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'
  console.error(err.message); // --> 'Header name must be a valid HTTP token [""""]'
}
</code></pre>",2,Others,
555,http,,validateHeaderValue,http.validateHeaderValue,"<p>Performs the low-level validations on the provided <code>value</code> that are done when
<code>res.setHeader(name, value)</code> is called.</p>
<p>Passing illegal value as <code>value</code> will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>
<ul>
<li>Undefined value error is identified by <code>code: 'ERR_HTTP_INVALID_HEADER_VALUE'</code>.</li>
<li>Invalid value character error is identified by <code>code: 'ERR_INVALID_CHAR'</code>.</li>
</ul>
<p>It is not necessary to use this method before passing headers to an HTTP request
or response. The HTTP module will automatically validate such headers.</p>
<p>Examples:</p>
<pre><code class=""language-mjs"">import { validateHeaderValue } from 'node:http';

try {
  validateHeaderValue('x-my-header', undefined);
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true
  console.error(err.message); // --> 'Invalid value ""undefined"" for header ""x-my-header""'
}

try {
  validateHeaderValue('x-my-header', 'oʊmɪɡə');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_INVALID_CHAR'); // --> true
  console.error(err.message); // --> 'Invalid character in header content [""x-my-header""]'
}
</code></pre>
<pre><code class=""language-cjs"">const { validateHeaderValue } = require('node:http');

try {
  validateHeaderValue('x-my-header', undefined);
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true
  console.error(err.message); // --> 'Invalid value ""undefined"" for header ""x-my-header""'
}

try {
  validateHeaderValue('x-my-header', 'oʊmɪɡə');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_INVALID_CHAR'); // --> true
  console.error(err.message); // --> 'Invalid character in header content [""x-my-header""]'
}
</code></pre>",2,Others,
556,http,,setMaxIdleHTTPParsers,http.setMaxIdleHTTPParsers,<p>Set the maximum number of idle HTTP parsers.</p>,1,25,
557,agent,,createConnection,agent.createConnection,"<p>Produces a socket/stream to be used for HTTP requests.</p>
<p>By default, this function is the same as <a href=""net.html#netcreateconnectionoptions-connectlistener""><code>net.createConnection()</code></a>. However,
custom agents may override this method in case greater flexibility is desired.</p>
<p>A socket/stream can be supplied in one of two ways: by returning the
socket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p>
<p>This method is guaranteed to return an instance of the <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a> class,
a subclass of <a href=""stream.html#class-streamduplex"" class=""type"">&lt;stream.Duplex&gt;</a>, unless the user specifies a socket
type other than <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a>.</p>
<p><code>callback</code> has a signature of <code>(err, stream)</code>.</p>",2,,
558,agent,,keepSocketAlive,agent.keepSocketAlive,"<p>Called when <code>socket</code> is detached from a request and could be persisted by the
<code>Agent</code>. Default behavior is to:</p>
<pre><code class=""language-js"">socket.setKeepAlive(true, this.keepAliveMsecs);
socket.unref();
return true;
</code></pre>
<p>This method can be overridden by a particular <code>Agent</code> subclass. If this
method returns a falsy value, the socket will be destroyed instead of persisting
it for use with the next request.</p>
<p>The <code>socket</code> argument can be an instance of <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a>, a subclass of
<a href=""stream.html#class-streamduplex"" class=""type"">&lt;stream.Duplex&gt;</a>.</p>",1,,
559,agent,,reuseSocket,agent.reuseSocket,"<p>Called when <code>socket</code> is attached to <code>request</code> after being persisted because of
the keep-alive options. Default behavior is to:</p>
<pre><code class=""language-js"">socket.ref();
</code></pre>
<p>This method can be overridden by a particular <code>Agent</code> subclass.</p>
<p>The <code>socket</code> argument can be an instance of <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a>, a subclass of
<a href=""stream.html#class-streamduplex"" class=""type"">&lt;stream.Duplex&gt;</a>.</p>",2,,
560,agent,,destroy,agent.destroy,"<p>Destroy any sockets that are currently in use by the agent.</p>
<p>It is usually not necessary to do this. However, if using an
agent with <code>keepAlive</code> enabled, then it is best to explicitly shut down
the agent when it is no longer needed. Otherwise,
sockets might stay open for quite a long time before the server
terminates them.</p>",0,,
561,agent,,getName,agent.getName,"<p>Get a unique name for a set of request options, to determine whether a
connection can be reused. For an HTTP agent, this returns
<code>host:port:localAddress</code> or <code>host:port:localAddress:family</code>. For an HTTPS agent,
the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options
that determine socket reusability.</p>",1,25,
562,request,,abort,request.abort,"<p>Marks the request as aborting. Calling this will cause remaining data
in the response to be dropped and the socket to be destroyed.</p>",0,Others,
563,request,,cork,request.cork,"<p>See <a href=""stream.html#writablecork""><code>writable.cork()</code></a>.</p>",0,Others,
564,request,,end,request.end,"<p>Finishes sending the request. If any parts of the body are
unsent, it will flush them to the stream. If the request is
chunked, this will send the terminating <code>'0\r\n\r\n'</code>.</p>
<p>If <code>data</code> is specified, it is equivalent to calling
<a href=""http.html#requestwritechunk-encoding-callback""><code>request.write(data, encoding)</code></a> followed by <code>request.end(callback)</code>.</p>
<p>If <code>callback</code> is specified, it will be called when the request stream
is finished.</p>",3,Others,
565,request,,destroy,request.destroy,"<p>Destroy the request. Optionally emit an <code>'error'</code> event,
and emit a <code>'close'</code> event. Calling this will cause remaining data
in the response to be dropped and the socket to be destroyed.</p>
<p>See <a href=""stream.html#writabledestroyerror""><code>writable.destroy()</code></a> for further details.</p>",1,Others,
566,request,,flushHeaders,request.flushHeaders,"<p>Flushes the request headers.</p>
<p>For efficiency reasons, Node.js normally buffers the request headers until
<code>request.end()</code> is called or the first chunk of request data is written. It
then tries to pack the request headers and data into a single TCP packet.</p>
<p>That's usually desired (it saves a TCP round-trip), but not when the first
data is not sent until possibly much later. <code>request.flushHeaders()</code> bypasses
the optimization and kickstarts the request.</p>",0,Others,
567,request,,getHeader,request.getHeader,"<p>Reads out a header on the request. The name is case-insensitive.
The type of the return value depends on the arguments provided to
<a href=""http.html#requestsetheadername-value""><code>request.setHeader()</code></a>.</p>
<pre><code class=""language-js"">request.setHeader('content-type', 'text/html');
request.setHeader('Content-Length', Buffer.byteLength(body));
request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
const contentType = request.getHeader('Content-Type');
// 'contentType' is 'text/html'
const contentLength = request.getHeader('Content-Length');
// 'contentLength' is of type number
const cookie = request.getHeader('Cookie');
// 'cookie' is of type string[]
</code></pre>",1,Others,
568,request,,getHeaderNames,request.getHeaderNames,"<p>Returns an array containing the unique names of the current outgoing headers.
All header names are lowercase.</p>
<pre><code class=""language-js"">request.setHeader('Foo', 'bar');
request.setHeader('Cookie', ['foo=bar', 'bar=baz']);

const headerNames = request.getHeaderNames();
// headerNames === ['foo', 'cookie']
</code></pre>",0,Others,
569,request,,getHeaders,request.getHeaders,"<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy
is used, array values may be mutated without additional calls to various
header-related http module methods. The keys of the returned object are the
header names and the values are the respective header values. All header names
are lowercase.</p>
<p>The object returned by the <code>request.getHeaders()</code> method <em>does not</em>
prototypically inherit from the JavaScript <code>Object</code>. This means that typical
<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others
are not defined and <em>will not work</em>.</p>
<pre><code class=""language-js"">request.setHeader('Foo', 'bar');
request.setHeader('Cookie', ['foo=bar', 'bar=baz']);

const headers = request.getHeaders();
// headers === { foo: 'bar', 'cookie': ['foo=bar', 'bar=baz'] }
</code></pre>",0,Others,
570,request,,getRawHeaderNames,request.getRawHeaderNames,"<p>Returns an array containing the unique names of the current outgoing raw
headers. Header names are returned with their exact casing being set.</p>
<pre><code class=""language-js"">request.setHeader('Foo', 'bar');
request.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = request.getRawHeaderNames();
// headerNames === ['Foo', 'Set-Cookie']
</code></pre>",0,Others,
571,request,,hasHeader,request.hasHeader,"<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the
outgoing headers. The header name matching is case-insensitive.</p>
<pre><code class=""language-js"">const hasContentType = request.hasHeader('content-type');
</code></pre>",1,Others,
572,request,,removeHeader,request.removeHeader,"<p>Removes a header that's already defined into headers object.</p>
<pre><code class=""language-js"">request.removeHeader('Content-Type');
</code></pre>",1,Others,
573,request,,setHeader,request.setHeader,"<p>Sets a single header value for headers object. If this header already exists in
the to-be-sent headers, its value will be replaced. Use an array of strings
here to send multiple headers with the same name. Non-string values will be
stored without modification. Therefore, <a href=""http.html#requestgetheadername""><code>request.getHeader()</code></a> may return
non-string values. However, the non-string values will be converted to strings
for network transmission.</p>
<pre><code class=""language-js"">request.setHeader('Content-Type', 'application/json');
</code></pre>
<p>or</p>
<pre><code class=""language-js"">request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
</code></pre>
<p>When the value is a string an exception will be thrown if it contains
characters outside the <code>latin1</code> encoding.</p>
<p>If you need to pass UTF-8 characters in the value please encode the value
using the <a href=""https://www.rfc-editor.org/rfc/rfc8187.txt"">RFC 8187</a> standard.</p>
<pre><code class=""language-js"">const filename = 'Rock 🎵.txt';
request.setHeader('Content-Disposition', `attachment; filename*=utf-8''${encodeURIComponent(filename)}`);
</code></pre>",2,Others,
574,request,,setNoDelay,request.setNoDelay,"<p>Once a socket is assigned to this request and is connected
<a href=""net.html#socketsetnodelaynodelay""><code>socket.setNoDelay()</code></a> will be called.</p>",1,Others,
575,request,,setSocketKeepAlive,request.setSocketKeepAlive,"<p>Once a socket is assigned to this request and is connected
<a href=""net.html#socketsetkeepaliveenable-initialdelay""><code>socket.setKeepAlive()</code></a> will be called.</p>",2,Others,
576,request,,setTimeout,request.setTimeout,"<p>Once a socket is assigned to this request and is connected
<a href=""net.html#socketsettimeouttimeout-callback""><code>socket.setTimeout()</code></a> will be called.</p>",2,Others,
577,request,,uncork,request.uncork,"<p>See <a href=""stream.html#writableuncork""><code>writable.uncork()</code></a>.</p>",0,Others,
578,request,,write,request.write,"<p>Sends a chunk of the body. This method can be called multiple times. If no
<code>Content-Length</code> is set, data will automatically be encoded in HTTP Chunked
transfer encoding, so that server knows when the data ends. The
<code>Transfer-Encoding: chunked</code> header is added. Calling <a href=""http.html#requestenddata-encoding-callback""><code>request.end()</code></a>
is necessary to finish sending the request.</p>
<p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.
Defaults to <code>'utf8'</code>.</p>
<p>The <code>callback</code> argument is optional and will be called when this chunk of data
is flushed, but only if the chunk is non-empty.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<code>'drain'</code> will be emitted when the buffer is free again.</p>
<p>When <code>write</code> function is called with empty string or buffer, it does
nothing and waits for more input.</p>",3,23,
579,server,,close,server.close,"<p>Stops the server from accepting new connections and closes all connections
connected to this server which are not sending a request or waiting for
a response.
See <a href=""net.html#serverclosecallback""><code>net.Server.close()</code></a>.</p>",1,Others,
580,server,,closeAllConnections,server.closeAllConnections,<p>Closes all connections connected to this server.</p>,0,Others,
581,server,,closeIdleConnections,server.closeIdleConnections,"<p>Closes all connections connected to this server which are not sending a request
or waiting for a response.</p>",0,Others,
582,server,,listen,server.listen,"<p>Starts the HTTP server listening for connections.
This method is identical to <a href=""net.html#serverlisten""><code>server.listen()</code></a> from <a href=""net.html#class-netserver""><code>net.Server</code></a>.</p>",0,27,
583,server,,setTimeout,server.setTimeout,"<p>Sets the timeout value for sockets, and emits a <code>'timeout'</code> event on
the Server object, passing the socket as an argument, if a timeout
occurs.</p>
<p>If there is a <code>'timeout'</code> event listener on the Server object, then it
will be called with the timed-out socket as an argument.</p>
<p>By default, the Server does not timeout sockets. However, if a callback
is assigned to the Server's <code>'timeout'</code> event, timeouts must be handled
explicitly.</p>",2,Others,
584,server[Symbol,,[Symbol.asyncDispose],server[Symbol.asyncDispose],"<p>Calls <a href=""http.html#serverclosecallback""><code>server.close()</code></a> and returns a promise that fulfills when the
server has closed.</p>",0,Others,
585,response,,addTrailers,response.addTrailers,"<p>This method adds HTTP trailing headers (a header but at the end of the
message) to the response.</p>
<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the
response; if it is not (e.g. if the request was HTTP/1.0), they will
be silently discarded.</p>
<p>HTTP requires the <code>Trailer</code> header to be sent in order to
emit trailers, with a list of the header fields in its value. E.g.,</p>
<pre><code class=""language-js"">response.writeHead(200, { 'Content-Type': 'text/plain',
                          'Trailer': 'Content-MD5' });
response.write(fileData);
response.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });
response.end();
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>",1,,
586,response,,cork,response.cork,"<p>See <a href=""stream.html#writablecork""><code>writable.cork()</code></a>.</p>",0,,
587,response,,end,response.end,"<p>This method signals to the server that all of the response headers and body
have been sent; that server should consider this message complete.
The method, <code>response.end()</code>, MUST be called on each response.</p>
<p>If <code>data</code> is specified, it is similar in effect to calling
<a href=""http.html#responsewritechunk-encoding-callback""><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>
<p>If <code>callback</code> is specified, it will be called when the response stream
is finished.</p>",3,Others,
588,response,,flushHeaders,response.flushHeaders,"<p>Flushes the response headers. See also: <a href=""http.html#requestflushheaders""><code>request.flushHeaders()</code></a>.</p>",0,,
589,response,,getHeader,response.getHeader,"<p>Reads out a header that's already been queued but not sent to the client.
The name is case-insensitive. The type of the return value depends
on the arguments provided to <a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a>.</p>
<pre><code class=""language-js"">response.setHeader('Content-Type', 'text/html');
response.setHeader('Content-Length', Buffer.byteLength(body));
response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
const contentType = response.getHeader('content-type');
// contentType is 'text/html'
const contentLength = response.getHeader('Content-Length');
// contentLength is of type number
const setCookie = response.getHeader('set-cookie');
// setCookie is of type string[]
</code></pre>",1,3,
590,response,,getHeaderNames,response.getHeaderNames,"<p>Returns an array containing the unique names of the current outgoing headers.
All header names are lowercase.</p>
<pre><code class=""language-js"">response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = response.getHeaderNames();
// headerNames === ['foo', 'set-cookie']
</code></pre>",0,,
591,response,,getHeaders,response.getHeaders,"<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy
is used, array values may be mutated without additional calls to various
header-related http module methods. The keys of the returned object are the
header names and the values are the respective header values. All header names
are lowercase.</p>
<p>The object returned by the <code>response.getHeaders()</code> method <em>does not</em>
prototypically inherit from the JavaScript <code>Object</code>. This means that typical
<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others
are not defined and <em>will not work</em>.</p>
<pre><code class=""language-js"">response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = response.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }
</code></pre>",0,,
592,response,,hasHeader,response.hasHeader,"<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the
outgoing headers. The header name matching is case-insensitive.</p>
<pre><code class=""language-js"">const hasContentType = response.hasHeader('content-type');
</code></pre>",1,,
593,response,,removeHeader,response.removeHeader,"<p>Removes a header that's queued for implicit sending.</p>
<pre><code class=""language-js"">response.removeHeader('Content-Encoding');
</code></pre>",1,,
594,response,,setHeader,response.setHeader,"<p>Returns the response object.</p>
<p>Sets a single header value for implicit headers. If this header already exists
in the to-be-sent headers, its value will be replaced. Use an array of strings
here to send multiple headers with the same name. Non-string values will be
stored without modification. Therefore, <a href=""http.html#responsegetheadername""><code>response.getHeader()</code></a> may return
non-string values. However, the non-string values will be converted to strings
for network transmission. The same response object is returned to the caller,
to enable call chaining.</p>
<pre><code class=""language-js"">response.setHeader('Content-Type', 'text/html');
</code></pre>
<p>or</p>
<pre><code class=""language-js"">response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>
<p>When headers have been set with <a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a>, they will be merged
with any headers passed to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>, with the headers passed
to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> given precedence.</p>
<pre><code class=""language-js"">// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
</code></pre>
<p>If <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> method is called and this method has not been
called, it will directly write the supplied header values onto the network
channel without caching internally, and the <a href=""http.html#responsegetheadername""><code>response.getHeader()</code></a> on the
header will not yield the expected result. If progressive population of headers
is desired with potential future retrieval and modification, use
<a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a> instead of <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>.</p>",2,Others,
595,response,,setTimeout,response.setTimeout,"<p>Sets the Socket's timeout value to <code>msecs</code>. If a callback is
provided, then it is added as a listener on the <code>'timeout'</code> event on
the response object.</p>
<p>If no <code>'timeout'</code> listener is added to the request, the response, or
the server, then sockets are destroyed when they time out. If a handler is
assigned to the request, the response, or the server's <code>'timeout'</code> events,
timed out sockets must be handled explicitly.</p>",2,,
596,response,,uncork,response.uncork,"<p>See <a href=""stream.html#writableuncork""><code>writable.uncork()</code></a>.</p>",0,,
597,response,,write,response.write,"<p>If this method is called and <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> has not been called,
it will switch to implicit header mode and flush the implicit headers.</p>
<p>This sends a chunk of the response body. This method may
be called multiple times to provide successive parts of the body.</p>
<p>Writing to the body is not allowed when the request method or response status
do not support content. If an attempt is made to write to the body for a
HEAD request or as part of a <code>204</code> or <code>304</code>response, a synchronous <code>Error</code>
with the code <code>ERR_HTTP_BODY_NOT_ALLOWED</code> is thrown.</p>
<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,
the second parameter specifies how to encode it into a byte stream.
<code>callback</code> will be called when this chunk of data is flushed.</p>
<p>This is the raw HTTP body and has nothing to do with higher-level multi-part
body encodings that may be used.</p>
<p>The first time <a href=""http.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> is called, it will send the buffered
header information and the first chunk of the body to the client. The second
time <a href=""http.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> is called, Node.js assumes data will be streamed,
and sends the new data separately. That is, the response is buffered up to the
first chunk of the body.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<code>'drain'</code> will be emitted when the buffer is free again.</p>",3,13,
598,response,,writeContinue,response.writeContinue,"<p>Sends an HTTP/1.1 100 Continue message to the client, indicating that
the request body should be sent. See the <a href=""http.html#event-checkcontinue""><code>'checkContinue'</code></a> event on
<code>Server</code>.</p>",0,,
599,response,,writeEarlyHints,response.writeEarlyHints,"<p>Sends an HTTP/1.1 103 Early Hints message to the client with a Link header,
indicating that the user agent can preload/preconnect the linked resources.
The <code>hints</code> is an object containing the values of headers to be sent with
early hints message. The optional <code>callback</code> argument will be called when
the response message has been written.</p>
<p><strong>Example</strong></p>
<pre><code class=""language-js"">const earlyHintsLink = '&#x3C;/styles.css>; rel=preload; as=style';
response.writeEarlyHints({
  'link': earlyHintsLink,
});

const earlyHintsLinks = [
  '&#x3C;/styles.css>; rel=preload; as=style',
  '&#x3C;/scripts.js>; rel=preload; as=script',
];
response.writeEarlyHints({
  'link': earlyHintsLinks,
  'x-trace-id': 'id for diagnostics',
});

const earlyHintsCallback = () => console.log('early hints message sent');
response.writeEarlyHints({
  'link': earlyHintsLinks,
}, earlyHintsCallback);
</code></pre>",2,,
600,response,,writeHead,response.writeHead,"<p>Sends a response header to the request. The status code is a 3-digit HTTP
status code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.
Optionally one can give a human-readable <code>statusMessage</code> as the second
argument.</p>
<p><code>headers</code> may be an <code>Array</code> where the keys and values are in the same list.
It is <em>not</em> a list of tuples. So, the even-numbered offsets are key values,
and the odd-numbered offsets are the associated values. The array is in the same
format as <code>request.rawHeaders</code>.</p>
<p>Returns a reference to the <code>ServerResponse</code>, so that calls can be chained.</p>
<pre><code class=""language-js"">const body = 'hello world';
response
  .writeHead(200, {
    'Content-Length': Buffer.byteLength(body),
    'Content-Type': 'text/plain',
  })
  .end(body);
</code></pre>
<p>This method must only be called once on a message and it must
be called before <a href=""http.html#responseenddata-encoding-callback""><code>response.end()</code></a> is called.</p>
<p>If <a href=""http.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> or <a href=""http.html#responseenddata-encoding-callback""><code>response.end()</code></a> are called before calling
this, the implicit/mutable headers will be calculated and call this function.</p>
<p>When headers have been set with <a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a>, they will be merged
with any headers passed to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>, with the headers passed
to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> given precedence.</p>
<p>If this method is called and <a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a> has not been called,
it will directly write the supplied header values onto the network channel
without caching internally, and the <a href=""http.html#responsegetheadername""><code>response.getHeader()</code></a> on the header
will not yield the expected result. If progressive population of headers is
desired with potential future retrieval and modification, use
<a href=""http.html#responsesetheadername-value""><code>response.setHeader()</code></a> instead.</p>
<pre><code class=""language-js"">// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
</code></pre>
<p><code>Content-Length</code> is read in bytes, not characters. Use
<a href=""buffer.html#static-method-bufferbytelengthstring-encoding""><code>Buffer.byteLength()</code></a> to determine the length of the body in bytes. Node.js
will check whether <code>Content-Length</code> and the length of the body which has
been transmitted are equal or not.</p>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a [<code>Error</code>][] being thrown.</p>",3,22,
601,response,,writeProcessing,response.writeProcessing,"<p>Sends a HTTP/1.1 102 Processing message to the client, indicating that
the request body should be sent.</p>",0,,
602,message,,destroy,message.destroy,"<p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>
is provided, an <code>'error'</code> event is emitted on the socket and <code>error</code> is passed
as an argument to any listeners on the event.</p>",1,,
603,message,,setTimeout,message.setTimeout,"<p>Calls <code>message.socket.setTimeout(msecs, callback)</code>.</p>",2,,
604,outgoingMessage,,addTrailers,outgoingMessage.addTrailers,"<p>Adds HTTP trailers (headers but at the end of the message) to the message.</p>
<p>Trailers will <strong>only</strong> be emitted if the message is chunked encoded. If not,
the trailers will be silently discarded.</p>
<p>HTTP requires the <code>Trailer</code> header to be sent to emit trailers,
with a list of header field names in its value, e.g.</p>
<pre><code class=""language-js"">message.writeHead(200, { 'Content-Type': 'text/plain',
                         'Trailer': 'Content-MD5' });
message.write(fileData);
message.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });
message.end();
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <code>TypeError</code> being thrown.</p>",1,,
605,outgoingMessage,,appendHeader,outgoingMessage.appendHeader,"<p>Append a single header value for the header object.</p>
<p>If the value is an array, this is equivalent of calling this method multiple
times.</p>
<p>If there were no previous value for the header, this is equivalent of calling
<a href=""http.html#outgoingmessagesetheadername-value""><code>outgoingMessage.setHeader(name, value)</code></a>.</p>
<p>Depending of the value of <code>options.uniqueHeaders</code> when the client request or the
server were created, this will end up in the header being sent multiple times or
a single time with values joined using <code>; </code>.</p>",2,,
606,outgoingMessage,,cork,outgoingMessage.cork,"<p>See <a href=""stream.html#writablecork""><code>writable.cork()</code></a>.</p>",0,,
607,outgoingMessage,,destroy,outgoingMessage.destroy,"<p>Destroys the message. Once a socket is associated with the message
and is connected, that socket will be destroyed as well.</p>",1,,
608,outgoingMessage,,end,outgoingMessage.end,"<p>Finishes the outgoing message. If any parts of the body are unsent, it will
flush them to the underlying system. If the message is chunked, it will
send the terminating chunk <code>0\r\n\r\n</code>, and send the trailers (if any).</p>
<p>If <code>chunk</code> is specified, it is equivalent to calling
<code>outgoingMessage.write(chunk, encoding)</code>, followed by
<code>outgoingMessage.end(callback)</code>.</p>
<p>If <code>callback</code> is provided, it will be called when the message is finished
(equivalent to a listener of the <code>'finish'</code> event).</p>",3,,
609,outgoingMessage,,flushHeaders,outgoingMessage.flushHeaders,"<p>Flushes the message headers.</p>
<p>For efficiency reason, Node.js normally buffers the message headers
until <code>outgoingMessage.end()</code> is called or the first chunk of message data
is written. It then tries to pack the headers and data into a single TCP
packet.</p>
<p>It is usually desired (it saves a TCP round-trip), but not when the first
data is not sent until possibly much later. <code>outgoingMessage.flushHeaders()</code>
bypasses the optimization and kickstarts the message.</p>",0,,
610,outgoingMessage,,getHeader,outgoingMessage.getHeader,"<p>Gets the value of the HTTP header with the given name. If that header is not
set, the returned value will be <code>undefined</code>.</p>",1,,
611,outgoingMessage,,getHeaderNames,outgoingMessage.getHeaderNames,"<p>Returns an array containing the unique names of the current outgoing headers.
All names are lowercase.</p>",0,,
612,outgoingMessage,,getHeaders,outgoingMessage.getHeaders,"<p>Returns a shallow copy of the current outgoing headers. Since a shallow
copy is used, array values may be mutated without additional calls to
various header-related HTTP module methods. The keys of the returned
object are the header names and the values are the respective header
values. All header names are lowercase.</p>
<p>The object returned by the <code>outgoingMessage.getHeaders()</code> method does
not prototypically inherit from the JavaScript <code>Object</code>. This means that
typical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>,
and others are not defined and will not work.</p>
<pre><code class=""language-js"">outgoingMessage.setHeader('Foo', 'bar');
outgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = outgoingMessage.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }
</code></pre>",0,,
613,outgoingMessage,,hasHeader,outgoingMessage.hasHeader,"<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the
outgoing headers. The header name is case-insensitive.</p>
<pre><code class=""language-js"">const hasContentType = outgoingMessage.hasHeader('content-type');
</code></pre>",1,,
614,outgoingMessage,,pipe,outgoingMessage.pipe,"<p>Overrides the <code>stream.pipe()</code> method inherited from the legacy <code>Stream</code> class
which is the parent class of <code>http.OutgoingMessage</code>.</p>
<p>Calling this method will throw an <code>Error</code> because <code>outgoingMessage</code> is a
write-only stream.</p>",0,,
615,outgoingMessage,,removeHeader,outgoingMessage.removeHeader,"<p>Removes a header that is queued for implicit sending.</p>
<pre><code class=""language-js"">outgoingMessage.removeHeader('Content-Encoding');
</code></pre>",1,,
616,outgoingMessage,,setHeader,outgoingMessage.setHeader,"<p>Sets a single header value. If the header already exists in the to-be-sent
headers, its value will be replaced. Use an array of strings to send multiple
headers with the same name.</p>",2,,
617,outgoingMessage,,setHeaders,outgoingMessage.setHeaders,"<p>Returns the response object.</p>
<p>Sets multiple header values for implicit headers.
<code>headers</code> must be an instance of <a href=""globals.html#class-headers""><code>Headers</code></a> or <code>Map</code>,
if a header already exists in the to-be-sent headers,
its value will be replaced.</p>
<pre><code class=""language-js"">const headers = new Headers({ foo: 'bar' });
response.setHeaders(headers);
</code></pre>
<p>or</p>
<pre><code class=""language-js"">const headers = new Map([['foo', 'bar']]);
res.setHeaders(headers);
</code></pre>
<p>When headers have been set with <a href=""http.html#outgoingmessagesetheadersheaders""><code>outgoingMessage.setHeaders()</code></a>,
they will be merged with any headers passed to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>,
with the headers passed to <a href=""http.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> given precedence.</p>
<pre><code class=""language-js"">// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  const headers = new Headers({ 'Content-Type': 'text/html' });
  res.setHeaders(headers);
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
</code></pre>",1,,
618,outgoingMessage,,setTimeout,outgoingMessage.setTimeout,"<p>Once a socket is associated with the message and is connected,
<a href=""net.html#socketsettimeouttimeout-callback""><code>socket.setTimeout()</code></a> will be called with <code>msecs</code> as the first parameter.</p>",2,,
619,outgoingMessage,,uncork,outgoingMessage.uncork,"<p>See <a href=""stream.html#writableuncork""><code>writable.uncork()</code></a></p>",0,,
620,outgoingMessage,,write,outgoingMessage.write,"<p>Sends a chunk of the body. This method can be called multiple times.</p>
<p>The <code>encoding</code> argument is only relevant when <code>chunk</code> is a string. Defaults to
<code>'utf8'</code>.</p>
<p>The <code>callback</code> argument is optional and will be called when this chunk of data
is flushed.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in the user
memory. The <code>'drain'</code> event will be emitted when the buffer is free again.</p>",3,,
621,http2,,createServer,http2.createServer,"<p>Returns a <code>net.Server</code> instance that creates and manages <code>Http2Session</code>
instances.</p>
<p>Since there are no browsers known that support
<a href=""https://http2.github.io/faq/#does-http2-require-encryption"">unencrypted HTTP/2</a>, the use of
<a href=""http2.html#http2createsecureserveroptions-onrequesthandler""><code>http2.createSecureServer()</code></a> is necessary when communicating
with browser clients.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');

// Create an unencrypted HTTP/2 server.
// Since there are no browsers known that support
// unencrypted HTTP/2, the use of `http2.createSecureServer()`
// is necessary when communicating with browser clients.
const server = http2.createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');
});

server.listen(8000);
</code></pre>",2,22,
622,http2,,createSecureServer,http2.createSecureServer,"<p>Returns a <code>tls.Server</code> instance that creates and manages <code>Http2Session</code>
instances.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem'),
};

// Create a secure HTTP/2 server
const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');
});

server.listen(8443);
</code></pre>",2,22,
623,http2,,connect,http2.connect,"<p>Returns a <code>ClientHttp2Session</code> instance.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const client = http2.connect('https://localhost:1234');

/* Use the client */

client.close();
</code></pre>",3,22,
624,http2,,getDefaultSettings,http2.getDefaultSettings,"<p>Returns an object containing the default settings for an <code>Http2Session</code>
instance. This method returns a new object instance every time it is called
so instances returned may be safely modified for use.</p>",0,26,
625,http2,,getPackedSettings,http2.getPackedSettings,"<p>Returns a <code>Buffer</code> instance containing serialized representation of the given
HTTP/2 settings as specified in the <a href=""https://tools.ietf.org/html/rfc7540"">HTTP/2</a> specification. This is intended
for use with the <code>HTTP2-Settings</code> header field.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');

const packed = http2.getPackedSettings({ enablePush: false });

console.log(packed.toString('base64'));
// Prints: AAIAAAAA
</code></pre>",1,26,
626,http2,,getUnpackedSettings,http2.getUnpackedSettings,"<p>Returns a <a href=""http2.html#settings-object"">HTTP/2 Settings Object</a> containing the deserialized settings from
the given <code>Buffer</code> as generated by <code>http2.getPackedSettings()</code>.</p>",1,Others,
627,http2session,,close,http2session.close,"<p>Gracefully closes the <code>Http2Session</code>, allowing any existing streams to
complete on their own and preventing new <code>Http2Stream</code> instances from being
created. Once closed, <code>http2session.destroy()</code> <em>might</em> be called if there
are no open <code>Http2Stream</code> instances.</p>
<p>If specified, the <code>callback</code> function is registered as a handler for the
<code>'close'</code> event.</p>",1,Others,
628,http2session,,destroy,http2session.destroy,"<p>Immediately terminates the <code>Http2Session</code> and the associated <code>net.Socket</code> or
<code>tls.TLSSocket</code>.</p>
<p>Once destroyed, the <code>Http2Session</code> will emit the <code>'close'</code> event. If <code>error</code>
is not undefined, an <code>'error'</code> event will be emitted immediately before the
<code>'close'</code> event.</p>
<p>If there are any remaining open <code>Http2Streams</code> associated with the
<code>Http2Session</code>, those will also be destroyed.</p>",2,Others,
629,http2session,,goaway,http2session.goaway,"<p>Transmits a <code>GOAWAY</code> frame to the connected peer <em>without</em> shutting down the
<code>Http2Session</code>.</p>",3,Others,
630,http2session,,ping,http2session.ping,"<p>Sends a <code>PING</code> frame to the connected HTTP/2 peer. A <code>callback</code> function must
be provided. The method will return <code>true</code> if the <code>PING</code> was sent, <code>false</code>
otherwise.</p>
<p>The maximum number of outstanding (unacknowledged) pings is determined by the
<code>maxOutstandingPings</code> configuration option. The default maximum is 10.</p>
<p>If provided, the <code>payload</code> must be a <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code>
containing 8 bytes of data that will be transmitted with the <code>PING</code> and
returned with the ping acknowledgment.</p>
<p>The callback will be invoked with three arguments: an error argument that will
be <code>null</code> if the <code>PING</code> was successfully acknowledged, a <code>duration</code> argument
that reports the number of milliseconds elapsed since the ping was sent and the
acknowledgment was received, and a <code>Buffer</code> containing the 8-byte <code>PING</code>
payload.</p>
<pre><code class=""language-js"">session.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {
  if (!err) {
    console.log(`Ping acknowledged in ${duration} milliseconds`);
    console.log(`With payload '${payload.toString()}'`);
  }
});
</code></pre>
<p>If the <code>payload</code> argument is not specified, the default payload will be the
64-bit timestamp (little endian) marking the start of the <code>PING</code> duration.</p>",2,23,
631,http2session,,ref,http2session.ref,"<p>Calls <a href=""net.html#socketref""><code>ref()</code></a> on this <code>Http2Session</code>
instance's underlying <a href=""net.html#class-netsocket""><code>net.Socket</code></a>.</p>",0,Others,
632,http2session,,setLocalWindowSize,http2session.setLocalWindowSize,"<p>Sets the local endpoint's window size.
The <code>windowSize</code> is the total window size to set, not
the delta.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');

const server = http2.createServer();
const expectedWindowSize = 2 ** 20;
server.on('connect', (session) => {

  // Set local window size to be 2 ** 20
  session.setLocalWindowSize(expectedWindowSize);
});
</code></pre>",1,Others,
633,http2session,,setTimeout,http2session.setTimeout,"<p>Used to set a callback function that is called when there is no activity on
the <code>Http2Session</code> after <code>msecs</code> milliseconds. The given <code>callback</code> is
registered as a listener on the <code>'timeout'</code> event.</p>",2,Others,
634,http2session,,settings,http2session.settings,"<p>Updates the current local settings for this <code>Http2Session</code> and sends a new
<code>SETTINGS</code> frame to the connected HTTP/2 peer.</p>
<p>Once called, the <code>http2session.pendingSettingsAck</code> property will be <code>true</code>
while the session is waiting for the remote peer to acknowledge the new
settings.</p>
<p>The new settings will not become effective until the <code>SETTINGS</code> acknowledgment
is received and the <code>'localSettings'</code> event is emitted. It is possible to send
multiple <code>SETTINGS</code> frames while acknowledgment is still pending.</p>",2,Others,
635,http2session,,unref,http2session.unref,"<p>Calls <a href=""net.html#socketunref""><code>unref()</code></a> on this <code>Http2Session</code>
instance's underlying <a href=""net.html#class-netsocket""><code>net.Socket</code></a>.</p>",0,Others,
636,serverhttp2session,,altsvc,serverhttp2session.altsvc,"<p>Submits an <code>ALTSVC</code> frame (as defined by <a href=""https://tools.ietf.org/html/rfc7838"">RFC 7838</a>) to the connected client.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');

const server = http2.createServer();
server.on('session', (session) => {
  // Set altsvc for origin https://example.org:80
  session.altsvc('h2="":8000""', 'https://example.org:80');
});

server.on('stream', (stream) => {
  // Set altsvc for a specific stream
  stream.session.altsvc('h2="":8000""', stream.id);
});
</code></pre>
<p>Sending an <code>ALTSVC</code> frame with a specific stream ID indicates that the alternate
service is associated with the origin of the given <code>Http2Stream</code>.</p>
<p>The <code>alt</code> and origin string <em>must</em> contain only ASCII bytes and are
strictly interpreted as a sequence of ASCII bytes. The special value <code>'clear'</code>
may be passed to clear any previously set alternative service for a given
domain.</p>
<p>When a string is passed for the <code>originOrStream</code> argument, it will be parsed as
a URL and the origin will be derived. For instance, the origin for the
HTTP URL <code>'https://example.org/foo/bar'</code> is the ASCII string
<code>'https://example.org'</code>. An error will be thrown if either the given string
cannot be parsed as a URL or if a valid origin cannot be derived.</p>
<p>A <code>URL</code> object, or any object with an <code>origin</code> property, may be passed as
<code>originOrStream</code>, in which case the value of the <code>origin</code> property will be
used. The value of the <code>origin</code> property <em>must</em> be a properly serialized
ASCII origin.</p>",2,Others,
637,serverhttp2session,,origin,serverhttp2session.origin,"<p>Submits an <code>ORIGIN</code> frame (as defined by <a href=""https://tools.ietf.org/html/rfc8336"">RFC 8336</a>) to the connected client
to advertise the set of origins for which the server is capable of providing
authoritative responses.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const options = getSecureOptionsSomehow();
const server = http2.createSecureServer(options);
server.on('stream', (stream) => {
  stream.respond();
  stream.end('ok');
});
server.on('session', (session) => {
  session.origin('https://example.com', 'https://example.org');
});
</code></pre>
<p>When a string is passed as an <code>origin</code>, it will be parsed as a URL and the
origin will be derived. For instance, the origin for the HTTP URL
<code>'https://example.org/foo/bar'</code> is the ASCII string
<code>'https://example.org'</code>. An error will be thrown if either the given string
cannot be parsed as a URL or if a valid origin cannot be derived.</p>
<p>A <code>URL</code> object, or any object with an <code>origin</code> property, may be passed as
an <code>origin</code>, in which case the value of the <code>origin</code> property will be
used. The value of the <code>origin</code> property <em>must</em> be a properly serialized
ASCII origin.</p>
<p>Alternatively, the <code>origins</code> option may be used when creating a new HTTP/2
server using the <code>http2.createSecureServer()</code> method:</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const options = getSecureOptionsSomehow();
options.origins = ['https://example.com', 'https://example.org'];
const server = http2.createSecureServer(options);
server.on('stream', (stream) => {
  stream.respond();
  stream.end('ok');
});
</code></pre>",1,Others,
638,clienthttp2session,,request,clienthttp2session.request,"<p>For HTTP/2 Client <code>Http2Session</code> instances only, the <code>http2session.request()</code>
creates and returns an <code>Http2Stream</code> instance that can be used to send an
HTTP/2 request to the connected server.</p>
<p>When a <code>ClientHttp2Session</code> is first created, the socket may not yet be
connected. if <code>clienthttp2session.request()</code> is called during this time, the
actual request will be deferred until the socket is ready to go.
If the <code>session</code> is closed before the actual request be executed, an
<code>ERR_HTTP2_GOAWAY_SESSION</code> is thrown.</p>
<p>This method is only available if <code>http2session.type</code> is equal to
<code>http2.constants.NGHTTP2_SESSION_CLIENT</code>.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const clientSession = http2.connect('https://localhost:1234');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
} = http2.constants;

const req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });
req.on('response', (headers) => {
  console.log(headers[HTTP2_HEADER_STATUS]);
  req.on('data', (chunk) => { /* .. */ });
  req.on('end', () => { /* .. */ });
});
</code></pre>
<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event
is emitted immediately after queuing the last chunk of payload data to be sent.
The <code>http2stream.sendTrailers()</code> method can then be called to send trailing
headers to the peer.</p>
<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically
close when the final <code>DATA</code> frame is transmitted. User code must call either
<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the
<code>Http2Stream</code>.</p>
<p>When <code>options.signal</code> is set with an <code>AbortSignal</code> and then <code>abort</code> on the
corresponding <code>AbortController</code> is called, the request will emit an <code>'error'</code>
event with an <code>AbortError</code> error.</p>
<p>The <code>:method</code> and <code>:path</code> pseudo-headers are not specified within <code>headers</code>,
they respectively default to:</p>
<ul>
<li><code>:method</code> = <code>'GET'</code></li>
<li><code>:path</code> = <code>/</code></li>
</ul>",2,22,
639,http2stream,,close,http2stream.close,"<p>Closes the <code>Http2Stream</code> instance by sending an <code>RST_STREAM</code> frame to the
connected HTTP/2 peer.</p>",2,Others,
640,http2stream,,priority,http2stream.priority,<p>Updates the priority for this <code>Http2Stream</code> instance.</p>,1,,
641,http2stream,,setTimeout,http2stream.setTimeout,"<pre><code class=""language-js"">const http2 = require('node:http2');
const client = http2.connect('http://example.org:8000');
const { NGHTTP2_CANCEL } = http2.constants;
const req = client.request({ ':path': '/' });

// Cancel the stream if there's no activity after 5 seconds
req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));
</code></pre>",2,,
642,http2stream,,sendTrailers,http2stream.sendTrailers,"<p>Sends a trailing <code>HEADERS</code> frame to the connected HTTP/2 peer. This method
will cause the <code>Http2Stream</code> to be immediately closed and must only be
called after the <code>'wantTrailers'</code> event has been emitted. When sending a
request or sending a response, the <code>options.waitForTrailers</code> option must be set
in order to keep the <code>Http2Stream</code> open after the final <code>DATA</code> frame so that
trailers can be sent.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond(undefined, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ xyz: 'abc' });
  });
  stream.end('Hello World');
});
</code></pre>
<p>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header
fields (e.g. <code>':method'</code>, <code>':path'</code>, etc).</p>",1,,
643,http2stream,,additionalHeaders,http2stream.additionalHeaders,<p>Sends an additional informational <code>HEADERS</code> frame to the connected HTTP/2 peer.</p>,1,,
644,http2stream,,pushStream,http2stream.pushStream,"<p>Initiates a push stream. The callback is invoked with the new <code>Http2Stream</code>
instance created for the push stream passed as the second argument, or an
<code>Error</code> passed as the first argument.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {
    if (err) throw err;
    pushStream.respond({ ':status': 200 });
    pushStream.end('some pushed data');
  });
  stream.end('some data');
});
</code></pre>
<p>Setting the weight of a push stream is not allowed in the <code>HEADERS</code> frame. Pass
a <code>weight</code> value to <code>http2stream.priority</code> with the <code>silent</code> option set to
<code>true</code> to enable server-side bandwidth balancing between concurrent streams.</p>
<p>Calling <code>http2stream.pushStream()</code> from within a pushed stream is not permitted
and will throw an error.</p>",3,,
645,http2stream,,respond,http2stream.respond,"<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.end('some data');
});
</code></pre>
<p>Initiates a response. When the <code>options.waitForTrailers</code> option is set, the
<code>'wantTrailers'</code> event will be emitted immediately after queuing the last chunk
of payload data to be sent. The <code>http2stream.sendTrailers()</code> method can then be
used to sent trailing header fields to the peer.</p>
<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically
close when the final <code>DATA</code> frame is transmitted. User code must call either
<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the
<code>Http2Stream</code>.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 }, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
  stream.end('some data');
});
</code></pre>",2,,
646,http2stream,,respondWithFD,http2stream.respondWithFD,"<p>Initiates a response whose data is read from the given file descriptor. No
validation is performed on the given file descriptor. If an error occurs while
attempting to read data using the file descriptor, the <code>Http2Stream</code> will be
closed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code> code.</p>
<p>When used, the <code>Http2Stream</code> object's <code>Duplex</code> interface will be closed
automatically.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const fs = require('node:fs');

const server = http2.createServer();
server.on('stream', (stream) => {
  const fd = fs.openSync('/some/file', 'r');

  const stat = fs.fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers);
  stream.on('close', () => fs.closeSync(fd));
});
</code></pre>
<p>The optional <code>options.statCheck</code> function may be specified to give user code
an opportunity to set additional content headers based on the <code>fs.Stat</code> details
of the given fd. If the <code>statCheck</code> function is provided, the
<code>http2stream.respondWithFD()</code> method will perform an <code>fs.fstat()</code> call to
collect details on the provided file descriptor.</p>
<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a
specific range subset. This can be used, for instance, to support HTTP Range
requests.</p>
<p>The file descriptor or <code>FileHandle</code> is not closed when the stream is closed,
so it will need to be closed manually once it is no longer needed.
Using the same file descriptor concurrently for multiple streams
is not supported and may result in data loss. Re-using a file descriptor
after a stream has finished is supported.</p>
<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event
will be emitted immediately after queuing the last chunk of payload data to be
sent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing
header fields to the peer.</p>
<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically
close when the final <code>DATA</code> frame is transmitted. User code <em>must</em> call either
<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the
<code>Http2Stream</code>.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const fs = require('node:fs');

const server = http2.createServer();
server.on('stream', (stream) => {
  const fd = fs.openSync('/some/file', 'r');

  const stat = fs.fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });

  stream.on('close', () => fs.closeSync(fd));
});
</code></pre>",3,,
647,http2stream,,respondWithFile,http2stream.respondWithFile,"<p>Sends a regular file as the response. The <code>path</code> must specify a regular file
or an <code>'error'</code> event will be emitted on the <code>Http2Stream</code> object.</p>
<p>When used, the <code>Http2Stream</code> object's <code>Duplex</code> interface will be closed
automatically.</p>
<p>The optional <code>options.statCheck</code> function may be specified to give user code
an opportunity to set additional content headers based on the <code>fs.Stat</code> details
of the given file:</p>
<p>If an error occurs while attempting to read the file data, the <code>Http2Stream</code>
will be closed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code>
code. If the <code>onError</code> callback is defined, then it will be called. Otherwise
the stream will be destroyed.</p>
<p>Example using a file path:</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    headers['last-modified'] = stat.mtime.toUTCString();
  }

  function onError(err) {
    // stream.respond() can throw if the stream has been destroyed by
    // the other side.
    try {
      if (err.code === 'ENOENT') {
        stream.respond({ ':status': 404 });
      } else {
        stream.respond({ ':status': 500 });
      }
    } catch (err) {
      // Perform actual error handling.
      console.error(err);
    }
    stream.end();
  }

  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck, onError });
});
</code></pre>
<p>The <code>options.statCheck</code> function may also be used to cancel the send operation
by returning <code>false</code>. For instance, a conditional request may check the stat
results to determine if the file has been modified to return an appropriate
<code>304</code> response:</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    // Check the stat here...
    stream.respond({ ':status': 304 });
    return false; // Cancel the send operation
  }
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck });
});
</code></pre>
<p>The <code>content-length</code> header field will be automatically set.</p>
<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a
specific range subset. This can be used, for instance, to support HTTP Range
requests.</p>
<p>The <code>options.onError</code> function may also be used to handle all the errors
that could happen before the delivery of the file is initiated. The
default behavior is to destroy the stream.</p>
<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event
will be emitted immediately after queuing the last chunk of payload data to be
sent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing
header fields to the peer.</p>
<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically
close when the final <code>DATA</code> frame is transmitted. User code must call either
<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the
<code>Http2Stream</code>.</p>
<pre><code class=""language-js"">const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
});
</code></pre>",3,,
648,server,,close,server.close,"<p>Stops the server from establishing new sessions. This does not prevent new
request streams from being created due to the persistent nature of HTTP/2
sessions. To gracefully shut down the server, call <a href=""http2.html#http2sessionclosecallback""><code>http2session.close()</code></a> on
all active sessions.</p>
<p>If <code>callback</code> is provided, it is not invoked until all active sessions have been
closed, although the server has already stopped allowing new sessions. See
<a href=""net.html#serverclosecallback""><code>net.Server.close()</code></a> for more details.</p>",1,Others,
649,server[Symbol,,[Symbol.asyncDispose],server[Symbol.asyncDispose],"<p>Calls <a href=""http2.html#serverclosecallback""><code>server.close()</code></a> and returns a promise that fulfills when the
server has closed.</p>",0,Others,
650,server,,setTimeout,server.setTimeout,"<p>Used to set the timeout value for http2 server requests,
and sets a callback function that is called when there is no activity
on the <code>Http2Server</code> after <code>msecs</code> milliseconds.</p>
<p>The given callback is registered as a listener on the <code>'timeout'</code> event.</p>
<p>In case if <code>callback</code> is not a function, a new <code>ERR_INVALID_ARG_TYPE</code>
error will be thrown.</p>",2,Others,
651,server,,updateSettings,server.updateSettings,"<p>Used to update the server with the provided settings.</p>
<p>Throws <code>ERR_HTTP2_INVALID_SETTING_VALUE</code> for invalid <code>settings</code> values.</p>
<p>Throws <code>ERR_INVALID_ARG_TYPE</code> for invalid <code>settings</code> argument.</p>",1,Others,
652,server,,close,server.close,"<p>Stops the server from establishing new sessions. This does not prevent new
request streams from being created due to the persistent nature of HTTP/2
sessions. To gracefully shut down the server, call <a href=""http2.html#http2sessionclosecallback""><code>http2session.close()</code></a> on
all active sessions.</p>
<p>If <code>callback</code> is provided, it is not invoked until all active sessions have been
closed, although the server has already stopped allowing new sessions. See
<a href=""tls.html#serverclosecallback""><code>tls.Server.close()</code></a> for more details.</p>",1,Others,
653,server,,setTimeout,server.setTimeout,"<p>Used to set the timeout value for http2 secure server requests,
and sets a callback function that is called when there is no activity
on the <code>Http2SecureServer</code> after <code>msecs</code> milliseconds.</p>
<p>The given callback is registered as a listener on the <code>'timeout'</code> event.</p>
<p>In case if <code>callback</code> is not a function, a new <code>ERR_INVALID_ARG_TYPE</code>
error will be thrown.</p>",2,Others,
654,server,,updateSettings,server.updateSettings,"<p>Used to update the server with the provided settings.</p>
<p>Throws <code>ERR_HTTP2_INVALID_SETTING_VALUE</code> for invalid <code>settings</code> values.</p>
<p>Throws <code>ERR_INVALID_ARG_TYPE</code> for invalid <code>settings</code> argument.</p>",1,Others,
655,request,,destroy,request.destroy,"<p>Calls <code>destroy()</code> on the <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a> that received
the <a href=""http2.html#class-http2http2serverrequest""><code>Http2ServerRequest</code></a>. If <code>error</code> is provided, an <code>'error'</code> event
is emitted and <code>error</code> is passed as an argument to any listeners on the event.</p>
<p>It does nothing if the stream was already destroyed.</p>",1,Others,
656,request,,setTimeout,request.setTimeout,"<p>Sets the <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a>'s timeout value to <code>msecs</code>. If a callback is
provided, then it is added as a listener on the <code>'timeout'</code> event on
the response object.</p>
<p>If no <code>'timeout'</code> listener is added to the request, the response, or
the server, then <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a>s are destroyed when they time out. If a
handler is assigned to the request, the response, or the server's <code>'timeout'</code>
events, timed out sockets must be handled explicitly.</p>",2,Others,
657,response,,addTrailers,response.addTrailers,"<p>This method adds HTTP trailing headers (a header but at the end of the
message) to the response.</p>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>",1,,
658,response,,createPushResponse,response.createPushResponse,"<p>Call <a href=""http2.html#http2streampushstreamheaders-options-callback""><code>http2stream.pushStream()</code></a> with the given headers, and wrap the
given <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a> on a newly created <code>Http2ServerResponse</code> as the callback
parameter if successful. When <code>Http2ServerRequest</code> is closed, the callback is
called with an error <code>ERR_HTTP2_INVALID_STREAM</code>.</p>",2,,
659,response,,end,response.end,"<p>This method signals to the server that all of the response headers and body
have been sent; that server should consider this message complete.
The method, <code>response.end()</code>, MUST be called on each response.</p>
<p>If <code>data</code> is specified, it is equivalent to calling
<a href=""http.html#responsewritechunk-encoding-callback""><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>
<p>If <code>callback</code> is specified, it will be called when the response stream
is finished.</p>",3,,
660,response,,getHeader,response.getHeader,"<p>Reads out a header that has already been queued but not sent to the client.
The name is case-insensitive.</p>
<pre><code class=""language-js"">const contentType = response.getHeader('content-type');
</code></pre>",1,,
661,response,,getHeaderNames,response.getHeaderNames,"<p>Returns an array containing the unique names of the current outgoing headers.
All header names are lowercase.</p>
<pre><code class=""language-js"">response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = response.getHeaderNames();
// headerNames === ['foo', 'set-cookie']
</code></pre>",0,,
662,response,,getHeaders,response.getHeaders,"<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy
is used, array values may be mutated without additional calls to various
header-related http module methods. The keys of the returned object are the
header names and the values are the respective header values. All header names
are lowercase.</p>
<p>The object returned by the <code>response.getHeaders()</code> method <em>does not</em>
prototypically inherit from the JavaScript <code>Object</code>. This means that typical
<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others
are not defined and <em>will not work</em>.</p>
<pre><code class=""language-js"">response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = response.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }
</code></pre>",0,,
663,response,,hasHeader,response.hasHeader,"<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the
outgoing headers. The header name matching is case-insensitive.</p>
<pre><code class=""language-js"">const hasContentType = response.hasHeader('content-type');
</code></pre>",1,,
664,response,,removeHeader,response.removeHeader,"<p>Removes a header that has been queued for implicit sending.</p>
<pre><code class=""language-js"">response.removeHeader('Content-Encoding');
</code></pre>",1,,
665,response,,setHeader,response.setHeader,"<p>Sets a single header value for implicit headers. If this header already exists
in the to-be-sent headers, its value will be replaced. Use an array of strings
here to send multiple headers with the same name.</p>
<pre><code class=""language-js"">response.setHeader('Content-Type', 'text/html; charset=utf-8');
</code></pre>
<p>or</p>
<pre><code class=""language-js"">response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>
<p>When headers have been set with <a href=""http2.html#responsesetheadername-value""><code>response.setHeader()</code></a>, they will be merged
with any headers passed to <a href=""http2.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>, with the headers passed
to <a href=""http2.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> given precedence.</p>
<pre><code class=""language-js"">// Returns content-type = text/plain
const server = http2.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
  res.end('ok');
});
</code></pre>",2,,
666,response,,setTimeout,response.setTimeout,"<p>Sets the <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a>'s timeout value to <code>msecs</code>. If a callback is
provided, then it is added as a listener on the <code>'timeout'</code> event on
the response object.</p>
<p>If no <code>'timeout'</code> listener is added to the request, the response, or
the server, then <a href=""http2.html#class-http2stream""><code>Http2Stream</code></a>s are destroyed when they time out. If a
handler is assigned to the request, the response, or the server's <code>'timeout'</code>
events, timed out sockets must be handled explicitly.</p>",2,,
667,response,,write,response.write,"<p>If this method is called and <a href=""http2.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> has not been called,
it will switch to implicit header mode and flush the implicit headers.</p>
<p>This sends a chunk of the response body. This method may
be called multiple times to provide successive parts of the body.</p>
<p>In the <code>node:http</code> module, the response body is omitted when the
request is a HEAD request. Similarly, the <code>204</code> and <code>304</code> responses
<em>must not</em> include a message body.</p>
<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,
the second parameter specifies how to encode it into a byte stream.
By default the <code>encoding</code> is <code>'utf8'</code>. <code>callback</code> will be called when this chunk
of data is flushed.</p>
<p>This is the raw HTTP body and has nothing to do with higher-level multi-part
body encodings that may be used.</p>
<p>The first time <a href=""http2.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> is called, it will send the buffered
header information and the first chunk of the body to the client. The second
time <a href=""http2.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> is called, Node.js assumes data will be streamed,
and sends the new data separately. That is, the response is buffered up to the
first chunk of the body.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<code>'drain'</code> will be emitted when the buffer is free again.</p>",3,,
668,response,,writeContinue,response.writeContinue,"<p>Sends a status <code>100 Continue</code> to the client, indicating that the request body
should be sent. See the <a href=""http2.html#event-checkcontinue""><code>'checkContinue'</code></a> event on <code>Http2Server</code> and
<code>Http2SecureServer</code>.</p>",0,,
669,response,,writeEarlyHints,response.writeEarlyHints,"<p>Sends a status <code>103 Early Hints</code> to the client with a Link header,
indicating that the user agent can preload/preconnect the linked resources.
The <code>hints</code> is an object containing the values of headers to be sent with
early hints message.</p>
<p><strong>Example</strong></p>
<pre><code class=""language-js"">const earlyHintsLink = '&#x3C;/styles.css>; rel=preload; as=style';
response.writeEarlyHints({
  'link': earlyHintsLink,
});

const earlyHintsLinks = [
  '&#x3C;/styles.css>; rel=preload; as=style',
  '&#x3C;/scripts.js>; rel=preload; as=script',
];
response.writeEarlyHints({
  'link': earlyHintsLinks,
});
</code></pre>",1,,
670,response,,writeHead,response.writeHead,"<p>Sends a response header to the request. The status code is a 3-digit HTTP
status code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.</p>
<p>Returns a reference to the <code>Http2ServerResponse</code>, so that calls can be chained.</p>
<p>For compatibility with <a href=""http.html"">HTTP/1</a>, a human-readable <code>statusMessage</code> may be
passed as the second argument. However, because the <code>statusMessage</code> has no
meaning within HTTP/2, the argument will have no effect and a process warning
will be emitted.</p>
<pre><code class=""language-js"">const body = 'hello world';
response.writeHead(200, {
  'Content-Length': Buffer.byteLength(body),
  'Content-Type': 'text/plain; charset=utf-8',
});
</code></pre>
<p><code>Content-Length</code> is given in bytes not characters. The
<code>Buffer.byteLength()</code> API may be used to determine the number of bytes in a
given encoding. On outbound messages, Node.js does not check if Content-Length
and the length of the body being transmitted are equal or not. However, when
receiving messages, Node.js will automatically reject messages when the
<code>Content-Length</code> does not match the actual payload size.</p>
<p>This method may be called at most one time on a message before
<a href=""http2.html#responseenddata-encoding-callback""><code>response.end()</code></a> is called.</p>
<p>If <a href=""http2.html#responsewritechunk-encoding-callback""><code>response.write()</code></a> or <a href=""http2.html#responseenddata-encoding-callback""><code>response.end()</code></a> are called before calling
this, the implicit/mutable headers will be calculated and call this function.</p>
<p>When headers have been set with <a href=""http2.html#responsesetheadername-value""><code>response.setHeader()</code></a>, they will be merged
with any headers passed to <a href=""http2.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a>, with the headers passed
to <a href=""http2.html#responsewriteheadstatuscode-statusmessage-headers""><code>response.writeHead()</code></a> given precedence.</p>
<pre><code class=""language-js"">// Returns content-type = text/plain
const server = http2.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
  res.end('ok');
});
</code></pre>
<p>Attempting to set a header field name or value that contains invalid characters
will result in a <a href=""errors.html#class-typeerror""><code>TypeError</code></a> being thrown.</p>",3,,
671,https,,createServer,https.createServer,"<pre><code class=""language-js"">// curl -k https://localhost:8000/
const https = require('node:https');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
</code></pre>
<p>Or</p>
<pre><code class=""language-js"">const https = require('node:https');
const fs = require('node:fs');

const options = {
  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),
  passphrase: 'sample',
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
</code></pre>",2,22,
673,https,,get,https.get,"<p>Like <a href=""http.html#httpgetoptions-callback""><code>http.get()</code></a> but for HTTPS.</p>
<p><code>options</code> can be an object, a string, or a <a href=""url.html#the-whatwg-url-api""><code>URL</code></a> object. If <code>options</code> is a
string, it is automatically parsed with <a href=""url.html#new-urlinput-base""><code>new URL()</code></a>. If it is a <a href=""url.html#the-whatwg-url-api""><code>URL</code></a>
object, it will be automatically converted to an ordinary <code>options</code> object.</p>
<pre><code class=""language-js"">const https = require('node:https');

https.get('https://encrypted.google.com/', (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });

}).on('error', (e) => {
  console.error(e);
});
</code></pre>",3,20,
675,https,,request,https.request,"<p>Makes a request to a secure web server.</p>
<p>The following additional <code>options</code> from <a href=""tls.html#tlsconnectoptions-callback""><code>tls.connect()</code></a> are also accepted:
<code>ca</code>, <code>cert</code>, <code>ciphers</code>, <code>clientCertEngine</code>, <code>crl</code>, <code>dhparam</code>, <code>ecdhCurve</code>,
<code>honorCipherOrder</code>, <code>key</code>, <code>passphrase</code>, <code>pfx</code>, <code>rejectUnauthorized</code>,
<code>secureOptions</code>, <code>secureProtocol</code>, <code>servername</code>, <code>sessionIdContext</code>,
<code>highWaterMark</code>.</p>
<p><code>options</code> can be an object, a string, or a <a href=""url.html#the-whatwg-url-api""><code>URL</code></a> object. If <code>options</code> is a
string, it is automatically parsed with <a href=""url.html#new-urlinput-base""><code>new URL()</code></a>. If it is a <a href=""url.html#the-whatwg-url-api""><code>URL</code></a>
object, it will be automatically converted to an ordinary <code>options</code> object.</p>
<p><code>https.request()</code> returns an instance of the <a href=""http.html#class-httpclientrequest""><code>http.ClientRequest</code></a>
class. The <code>ClientRequest</code> instance is a writable stream. If one needs to
upload a file with a POST request, then write to the <code>ClientRequest</code> object.</p>
<pre><code class=""language-js"">const https = require('node:https');

const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
};

const req = https.request(options, (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });
});

req.on('error', (e) => {
  console.error(e);
});
req.end();
</code></pre>
<p>Example using options from <a href=""tls.html#tlsconnectoptions-callback""><code>tls.connect()</code></a>:</p>
<pre><code class=""language-js"">const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),
};
options.agent = new https.Agent(options);

const req = https.request(options, (res) => {
  // ...
});
</code></pre>
<p>Alternatively, opt out of connection pooling by not using an <a href=""https.html#class-httpsagent""><code>Agent</code></a>.</p>
<pre><code class=""language-js"">const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),
  agent: false,
};

const req = https.request(options, (res) => {
  // ...
});
</code></pre>
<p>Example using a <a href=""url.html#the-whatwg-url-api""><code>URL</code></a> as <code>options</code>:</p>
<pre><code class=""language-js"">const options = new URL('https://abc:xyz@example.com');

const req = https.request(options, (res) => {
  // ...
});
</code></pre>
<p>Example pinning on certificate fingerprint, or the public key (similar to
<code>pin-sha256</code>):</p>
<pre><code class=""language-js"">const tls = require('node:tls');
const https = require('node:https');
const crypto = require('node:crypto');

function sha256(s) {
  return crypto.createHash('sha256').update(s).digest('base64');
}
const options = {
  hostname: 'github.com',
  port: 443,
  path: '/',
  method: 'GET',
  checkServerIdentity: function(host, cert) {
    // Make sure the certificate is issued to the host we are connected to
    const err = tls.checkServerIdentity(host, cert);
    if (err) {
      return err;
    }

    // Pin the public key, similar to HPKP pin-sha256 pinning
    const pubkey256 = 'pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=';
    if (sha256(cert.pubkey) !== pubkey256) {
      const msg = 'Certificate verification error: ' +
        `The public key of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // Pin the exact certificate, rather than the pub key
    const cert256 = '25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:' +
      'D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16';
    if (cert.fingerprint256 !== cert256) {
      const msg = 'Certificate verification error: ' +
        `The certificate of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // This loop is informational only.
    // Print the certificate and public key fingerprints of all certs in the
    // chain. Its common to pin the public key of the issuer on the public
    // internet, while pinning the public key of the service in sensitive
    // environments.
    do {
      console.log('Subject Common Name:', cert.subject.CN);
      console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);

      hash = crypto.createHash('sha256');
      console.log('  Public key ping-sha256:', sha256(cert.pubkey));

      lastprint256 = cert.fingerprint256;
      cert = cert.issuerCertificate;
    } while (cert.fingerprint256 !== lastprint256);

  },
};

options.agent = new https.Agent(options);
const req = https.request(options, (res) => {
  console.log('All OK. Server matched our pinned cert or public key');
  console.log('statusCode:', res.statusCode);
  // Print the HPKP values
  console.log('headers:', res.headers['public-key-pins']);

  res.on('data', (d) => {});
});

req.on('error', (e) => {
  console.error(e.message);
});
req.end();
</code></pre>
<p>Outputs for example:</p>
<pre><code class=""language-text"">Subject Common Name: github.com
  Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16
  Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=
Subject Common Name: DigiCert SHA2 Extended Validation Server CA
  Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A
  Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=
Subject Common Name: DigiCert High Assurance EV Root CA
  Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF
  Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=
All OK. Server matched our pinned cert or public key
statusCode: 200
headers: max-age=0; pin-sha256=""WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=""; pin-sha256=""RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=""; pin-sha256=""k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=""; pin-sha256=""K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=""; pin-sha256=""IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=""; pin-sha256=""iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=""; pin-sha256=""LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=""; includeSubDomains
</code></pre>",3,22,
676,server,,close,server.close,"<p>See <a href=""http.html#serverclosecallback""><code>server.close()</code></a> in the <code>node:http</code> module.</p>",1,Others,
677,server[Symbol,,[Symbol.asyncDispose],server[Symbol.asyncDispose],"<p>Calls <a href=""https.html#serverclosecallback""><code>server.close()</code></a> and returns a promise that
fulfills when the server has closed.</p>",0,,
678,server,,closeAllConnections,server.closeAllConnections,"<p>See <a href=""http.html#servercloseallconnections""><code>server.closeAllConnections()</code></a> in the <code>node:http</code> module.</p>",0,Others,
679,server,,closeIdleConnections,server.closeIdleConnections,"<p>See <a href=""http.html#servercloseidleconnections""><code>server.closeIdleConnections()</code></a> in the <code>node:http</code> module.</p>",0,Others,
680,server,,listen,server.listen,"<p>Starts the HTTPS server listening for encrypted connections.
This method is identical to <a href=""net.html#serverlisten""><code>server.listen()</code></a> from <a href=""net.html#class-netserver""><code>net.Server</code></a>.</p>",0,27,
681,server,,setTimeout,server.setTimeout,"<p>See <a href=""http.html#serversettimeoutmsecs-callback""><code>server.setTimeout()</code></a> in the <code>node:http</code> module.</p>",2,Others,
682,session,,connect,session.connect,<p>Connects a session to the inspector back-end.</p>,0,,
683,session,,connectToMainThread,session.connectToMainThread,"<p>Connects a session to the main thread inspector back-end. An exception will
be thrown if this API was not called on a Worker thread.</p>",0,,
684,session,,disconnect,session.disconnect,"<p>Immediately close the session. All pending message callbacks will be called
with an error. <a href=""inspector.html#sessionconnect""><code>session.connect()</code></a> will need to be called to be able to send
messages again. Reconnected session will lose all inspector state, such as
enabled agents or configured breakpoints.</p>",0,,
685,session,,post,session.post,"<p>Posts a message to the inspector back-end.</p>
<pre><code class=""language-mjs"">import { Session } from 'node:inspector/promises';
try {
  const session = new Session();
  session.connect();
  const result = await session.post('Runtime.evaluate', { expression: '2 + 2' });
  console.log(result);
} catch (error) {
  console.error(error);
}
// Output: { result: { type: 'number', value: 4, description: '4' } }
</code></pre>
<p>The latest version of the V8 inspector protocol is published on the
<a href=""https://chromedevtools.github.io/devtools-protocol/v8/"">Chrome DevTools Protocol Viewer</a>.</p>
<p>Node.js inspector supports all the Chrome DevTools Protocol domains declared
by V8. Chrome DevTools Protocol domain provides an interface for interacting
with one of the runtime agents used to inspect the application state and listen
to the run-time events.</p>
<h4>Example usage</h4>
<p>Apart from the debugger, various V8 Profilers are available through the DevTools
protocol.</p>",2,,
686,session,,connect,session.connect,<p>Connects a session to the inspector back-end.</p>,0,,
687,session,,connectToMainThread,session.connectToMainThread,"<p>Connects a session to the main thread inspector back-end. An exception will
be thrown if this API was not called on a Worker thread.</p>",0,,
688,session,,disconnect,session.disconnect,"<p>Immediately close the session. All pending message callbacks will be called
with an error. <a href=""inspector.html#sessionconnect""><code>session.connect()</code></a> will need to be called to be able to send
messages again. Reconnected session will lose all inspector state, such as
enabled agents or configured breakpoints.</p>",0,,
689,session,,post,session.post,"<p>Posts a message to the inspector back-end. <code>callback</code> will be notified when
a response is received. <code>callback</code> is a function that accepts two optional
arguments: error and message-specific result.</p>
<pre><code class=""language-js"">session.post('Runtime.evaluate', { expression: '2 + 2' },
             (error, { result }) => console.log(result));
// Output: { type: 'number', value: 4, description: '4' }
</code></pre>
<p>The latest version of the V8 inspector protocol is published on the
<a href=""https://chromedevtools.github.io/devtools-protocol/v8/"">Chrome DevTools Protocol Viewer</a>.</p>
<p>Node.js inspector supports all the Chrome DevTools Protocol domains declared
by V8. Chrome DevTools Protocol domain provides an interface for interacting
with one of the runtime agents used to inspect the application state and listen
to the run-time events.</p>
<p>You can not set <code>reportProgress</code> to <code>true</code> when sending a
<code>HeapProfiler.takeHeapSnapshot</code> or <code>HeapProfiler.stopTrackingHeapObjects</code>
command to V8.</p>
<h4>Example usage</h4>
<p>Apart from the debugger, various V8 Profilers are available through the DevTools
protocol.</p>",3,,
690,inspector,,close,inspector.close,"<p>Attempts to close all remaining connections, blocking the event loop until all
are closed. Once all connections are closed, deactivates the inspector.</p>",0,,
691,inspector,,open,inspector.open,"<p>Activate inspector on host and port. Equivalent to
<code>node --inspect=[[host:]port]</code>, but can be done programmatically after node has
started.</p>
<p>If wait is <code>true</code>, will block until a client has connected to the inspect port
and flow control has been passed to the debugger client.</p>
<p>See the <a href=""cli.html#warning-binding-inspector-to-a-public-ipport-combination-is-insecure"">security warning</a> regarding the <code>host</code>
parameter usage.</p>",3,28,
692,inspector,,url,inspector.url,"<p>Return the URL of the active inspector, or <code>undefined</code> if there is none.</p>
<pre><code class=""language-console"">$ node --inspect -p 'inspector.url()'
Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34
For help, see: https://nodejs.org/en/docs/inspector
ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34

$ node --inspect=localhost:3000 -p 'inspector.url()'
Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a
For help, see: https://nodejs.org/en/docs/inspector
ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a

$ node -p 'inspector.url()'
undefined
</code></pre>",0,,
693,inspector,,waitForDebugger,inspector.waitForDebugger,"<p>Blocks until a client (existing or connected later) has sent
<code>Runtime.runIfWaitingForDebugger</code> command.</p>
<p>An exception will be thrown if there is no active inspector.</p>",0,,
694,module,,createRequire,module.createRequire,"<pre><code class=""language-mjs"">import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);

// sibling-module.js is a CommonJS module.
const siblingModule = require('./sibling-module');
</code></pre>",1,Others,
695,module,,isBuiltin,module.isBuiltin,"<pre><code class=""language-mjs"">import { isBuiltin } from 'node:module';
isBuiltin('node:fs'); // true
isBuiltin('fs'); // true
isBuiltin('wss'); // false
</code></pre>",1,Others,
696,module,,register,module.register,"<p>Register a module that exports <a href=""module.html#customization-hooks"">hooks</a> that customize Node.js module
resolution and loading behavior. See <a href=""module.html#customization-hooks"">Customization hooks</a>.</p>",3,,
697,module,,syncBuiltinESMExports,module.syncBuiltinESMExports,"<p>The <code>module.syncBuiltinESMExports()</code> method updates all the live bindings for
builtin <a href=""esm.html"">ES Modules</a> to match the properties of the <a href=""modules.html"">CommonJS</a> exports. It
does not add or remove exported names from the <a href=""esm.html"">ES Modules</a>.</p>
<pre><code class=""language-js"">const fs = require('node:fs');
const assert = require('node:assert');
const { syncBuiltinESMExports } = require('node:module');

fs.readFile = newAPI;

delete fs.readFileSync;

function newAPI() {
  // ...
}

fs.newAPI = newAPI;

syncBuiltinESMExports();

import('node:fs').then((esmFS) => {
  // It syncs the existing readFile property with the new value
  assert.strictEqual(esmFS.readFile, newAPI);
  // readFileSync has been deleted from the required fs
  assert.strictEqual('readFileSync' in fs, false);
  // syncBuiltinESMExports() does not remove readFileSync from esmFS
  assert.strictEqual('readFileSync' in esmFS, true);
  // syncBuiltinESMExports() does not add names
  assert.strictEqual(esmFS.newAPI, undefined);
});
</code></pre>
<p><i id=""module_customization_hooks""></i></p>",0,,
698,module,,findSourceMap,module.findSourceMap,"<p><code>path</code> is the resolved path for the file for which a corresponding source map
should be fetched.</p>",1,,
699,sourceMap,,findEntry,sourceMap.findEntry,"<p>Given a line offset and column offset in the generated source
file, returns an object representing the SourceMap range in the
original file if found, or an empty object if not.</p>
<p>The object returned contains the following keys:</p>
<ul>
<li>generatedLine: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The line offset of the start of the
range in the generated source</li>
<li>generatedColumn: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The column offset of start of the
range in the generated source</li>
<li>originalSource: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The file name of the original source,
as reported in the SourceMap</li>
<li>originalLine: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The line offset of the start of the
range in the original source</li>
<li>originalColumn: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The column offset of start of the
range in the original source</li>
<li>name: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
</ul>
<p>The returned value represents the raw range as it appears in the
SourceMap, based on zero-indexed offsets, <em>not</em> 1-indexed line and
column numbers as they appear in Error messages and CallSite
objects.</p>
<p>To get the corresponding 1-indexed line and column numbers from a
lineNumber and columnNumber as they are reported by Error stacks
and CallSite objects, use <code>sourceMap.findOrigin(lineNumber, columnNumber)</code></p>",2,,
700,sourceMap,,findOrigin,sourceMap.findOrigin,"<p>Given a 1-indexed lineNumber and columnNumber from a call site in
the generated source, find the corresponding call site location
in the original source.</p>
<p>If the lineNumber and columnNumber provided are not found in any
source map, then an empty object is returned.  Otherwise, the
returned object contains the following keys:</p>
<ul>
<li>name: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type"" class=""type"">&lt;undefined&gt;</a> The name of the range in the
source map, if one was provided</li>
<li>fileName: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The file name of the original source, as
reported in the SourceMap</li>
<li>lineNumber: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The 1-indexed lineNumber of the
corresponding call site in the original source</li>
<li>columnNumber: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The 1-indexed columnNumber of the
corresponding call site in the original source</li>
</ul>",2,,
701,net,,connect,net.connect,"<p>Aliases to
<a href=""net.html#netcreateconnection""><code>net.createConnection()</code></a>.</p>
<p>Possible signatures:</p>
<ul>
<li><a href=""net.html#netconnectoptions-connectlistener""><code>net.connect(options[, connectListener])</code></a></li>
<li><a href=""net.html#netconnectpath-connectlistener""><code>net.connect(path[, connectListener])</code></a> for <a href=""net.html#ipc-support"">IPC</a>
connections.</li>
<li><a href=""net.html#netconnectport-host-connectlistener""><code>net.connect(port[, host][, connectListener])</code></a>
for TCP connections.</li>
</ul>",0,22,
702,net,,createConnection,net.createConnection,"<p>A factory function, which creates a new <a href=""net.html#class-netsocket""><code>net.Socket</code></a>,
immediately initiates connection with <a href=""net.html#socketconnect""><code>socket.connect()</code></a>,
then returns the <code>net.Socket</code> that starts the connection.</p>
<p>When the connection is established, a <a href=""net.html#event-connect""><code>'connect'</code></a> event will be emitted
on the returned socket. The last parameter <code>connectListener</code>, if supplied,
will be added as a listener for the <a href=""net.html#event-connect""><code>'connect'</code></a> event <strong>once</strong>.</p>
<p>Possible signatures:</p>
<ul>
<li><a href=""net.html#netcreateconnectionoptions-connectlistener""><code>net.createConnection(options[, connectListener])</code></a></li>
<li><a href=""net.html#netcreateconnectionpath-connectlistener""><code>net.createConnection(path[, connectListener])</code></a>
for <a href=""net.html#ipc-support"">IPC</a> connections.</li>
<li><a href=""net.html#netcreateconnectionport-host-connectlistener""><code>net.createConnection(port[, host][, connectListener])</code></a>
for TCP connections.</li>
</ul>
<p>The <a href=""net.html#netconnect""><code>net.connect()</code></a> function is an alias to this function.</p>",0,22,
703,net,,createServer,net.createServer,"<p>Creates a new TCP or <a href=""net.html#ipc-support"">IPC</a> server.</p>
<p>If <code>allowHalfOpen</code> is set to <code>true</code>, when the other end of the socket
signals the end of transmission, the server will only send back the end of
transmission when <a href=""net.html#socketenddata-encoding-callback""><code>socket.end()</code></a> is explicitly called. For example, in the
context of TCP, when a FIN packed is received, a FIN packed is sent
back only when <a href=""net.html#socketenddata-encoding-callback""><code>socket.end()</code></a> is explicitly called. Until then the
connection is half-closed (non-readable but still writable). See <a href=""net.html#event-end""><code>'end'</code></a>
event and <a href=""https://tools.ietf.org/html/rfc1122"">RFC 1122</a> (section 4.2.2.13) for more information.</p>
<p>If <code>pauseOnConnect</code> is set to <code>true</code>, then the socket associated with each
incoming connection will be paused, and no data will be read from its handle.
This allows connections to be passed between processes without any data being
read by the original process. To begin reading data from a paused socket, call
<a href=""net.html#socketresume""><code>socket.resume()</code></a>.</p>
<p>The server can be a TCP server or an <a href=""net.html#ipc-support"">IPC</a> server, depending on what it
<a href=""net.html#serverlisten""><code>listen()</code></a> to.</p>
<p>Here is an example of a TCP echo server which listens for connections
on port 8124:</p>
<pre><code class=""language-js"">const net = require('node:net');
const server = net.createServer((c) => {
  // 'connection' listener.
  console.log('client connected');
  c.on('end', () => {
    console.log('client disconnected');
  });
  c.write('hello\r\n');
  c.pipe(c);
});
server.on('error', (err) => {
  throw err;
});
server.listen(8124, () => {
  console.log('server bound');
});
</code></pre>
<p>Test this by using <code>telnet</code>:</p>
<pre><code class=""language-bash"">telnet localhost 8124
</code></pre>
<p>To listen on the socket <code>/tmp/echo.sock</code>:</p>
<pre><code class=""language-js"">server.listen('/tmp/echo.sock', () => {
  console.log('server bound');
});
</code></pre>
<p>Use <code>nc</code> to connect to a Unix domain socket server:</p>
<pre><code class=""language-bash"">nc -U /tmp/echo.sock
</code></pre>",2,22,
704,net,,getDefaultAutoSelectFamily,net.getDefaultAutoSelectFamily,"<p>Gets the current default value of the <code>autoSelectFamily</code> option of <a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options)</code></a>.
The initial default value is <code>true</code>, unless the command line option
<code>--no-network-family-autoselection</code> is provided.</p>
<ul>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> The current default value of the <code>autoSelectFamily</code> option.</li>
</ul>",0,Others,
705,net,,setDefaultAutoSelectFamily,net.setDefaultAutoSelectFamily,"<p>Sets the default value of the <code>autoSelectFamily</code> option of <a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options)</code></a>.</p>
<ul>
<li><code>value</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> The new default value. The initial default value is <code>false</code>.</li>
</ul>",0,Others,
706,net,,getDefaultAutoSelectFamilyAttemptTimeout,net.getDefaultAutoSelectFamilyAttemptTimeout,"<p>Gets the current default value of the <code>autoSelectFamilyAttemptTimeout</code> option of <a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options)</code></a>.
The initial default value is <code>250</code>.</p>
<ul>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The current default value of the <code>autoSelectFamilyAttemptTimeout</code> option.</li>
</ul>",0,Others,
707,net,,setDefaultAutoSelectFamilyAttemptTimeout,net.setDefaultAutoSelectFamilyAttemptTimeout,"<p>Sets the default value of the <code>autoSelectFamilyAttemptTimeout</code> option of <a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options)</code></a>.</p>
<ul>
<li><code>value</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The new default value, which must be a positive number. If the number is less than <code>10</code>,
the value <code>10</code> is used instead. The initial default value is <code>250</code>.</li>
</ul>",0,Others,
708,net,,isIP,net.isIP,"<p>Returns <code>6</code> if <code>input</code> is an IPv6 address. Returns <code>4</code> if <code>input</code> is an IPv4
address in <a href=""https://en.wikipedia.org/wiki/Dot-decimal_notation"">dot-decimal notation</a> with no leading zeroes. Otherwise, returns
<code>0</code>.</p>
<pre><code class=""language-js"">net.isIP('::1'); // returns 6
net.isIP('127.0.0.1'); // returns 4
net.isIP('127.000.000.001'); // returns 0
net.isIP('127.0.0.1/24'); // returns 0
net.isIP('fhqwhgads'); // returns 0
</code></pre>",1,Others,
709,net,,isIPv4,net.isIPv4,"<p>Returns <code>true</code> if <code>input</code> is an IPv4 address in <a href=""https://en.wikipedia.org/wiki/Dot-decimal_notation"">dot-decimal notation</a> with no
leading zeroes. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">net.isIPv4('127.0.0.1'); // returns true
net.isIPv4('127.000.000.001'); // returns false
net.isIPv4('127.0.0.1/24'); // returns false
net.isIPv4('fhqwhgads'); // returns false
</code></pre>",1,Others,
710,net,,isIPv6,net.isIPv6,"<p>Returns <code>true</code> if <code>input</code> is an IPv6 address. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">net.isIPv6('::1'); // returns true
net.isIPv6('fhqwhgads'); // returns false
</code></pre>",1,Others,
711,blockList,,addAddress,blockList.addAddress,<p>Adds a rule to block the given IP address.</p>,2,,
712,blockList,,addRange,blockList.addRange,"<p>Adds a rule to block a range of IP addresses from <code>start</code> (inclusive) to
<code>end</code> (inclusive).</p>",3,,
713,blockList,,addSubnet,blockList.addSubnet,<p>Adds a rule to block a range of IP addresses specified as a subnet mask.</p>,3,,
714,blockList,,check,blockList.check,"<p>Returns <code>true</code> if the given IP address matches any of the rules added to the
<code>BlockList</code>.</p>
<pre><code class=""language-js"">const blockList = new net.BlockList();
blockList.addAddress('123.123.123.123');
blockList.addRange('10.0.0.1', '10.0.0.10');
blockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');

console.log(blockList.check('123.123.123.123'));  // Prints: true
console.log(blockList.check('10.0.0.3'));  // Prints: true
console.log(blockList.check('222.111.111.222'));  // Prints: false

// IPv6 notation for IPv4 addresses works:
console.log(blockList.check('::ffff:7b7b:7b7b', 'ipv6')); // Prints: true
console.log(blockList.check('::ffff:123.123.123.123', 'ipv6')); // Prints: true
</code></pre>",2,,
715,server,,address,server.address,"<p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the server
as reported by the operating system if listening on an IP socket
(useful to find which port was assigned when getting an OS-assigned address):
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>.</p>
<p>For a server listening on a pipe or Unix domain socket, the name is returned
as a string.</p>
<pre><code class=""language-js"">const server = net.createServer((socket) => {
  socket.end('goodbye\n');
}).on('error', (err) => {
  // Handle errors here.
  throw err;
});

// Grab an arbitrary unused port.
server.listen(() => {
  console.log('opened server on', server.address());
});
</code></pre>
<p><code>server.address()</code> returns <code>null</code> before the <code>'listening'</code> event has been
emitted or after calling <code>server.close()</code>.</p>",0,Others,
716,server,,close,server.close,"<p>Stops the server from accepting new connections and keeps existing
connections. This function is asynchronous, the server is finally closed
when all connections are ended and the server emits a <a href=""net.html#event-close""><code>'close'</code></a> event.
The optional <code>callback</code> will be called once the <code>'close'</code> event occurs. Unlike
that event, it will be called with an <code>Error</code> as its only argument if the server
was not open when it was closed.</p>",1,Others,
717,server[Symbol,,[Symbol.asyncDispose],server[Symbol.asyncDispose],"<p>Calls <a href=""net.html#serverclosecallback""><code>server.close()</code></a> and returns a promise that fulfills when the
server has closed.</p>",0,,
718,server,,getConnections,server.getConnections,"<p>Asynchronously get the number of concurrent connections on the server. Works
when sockets were sent to forks.</p>
<p>Callback should take two arguments <code>err</code> and <code>count</code>.</p>",1,Others,
719,server,,listen,server.listen,"<p>Start a server listening for connections. A <code>net.Server</code> can be a TCP or
an <a href=""net.html#ipc-support"">IPC</a> server depending on what it listens to.</p>
<p>Possible signatures:</p>
<ul>
<li><a href=""net.html#serverlistenhandle-backlog-callback""><code>server.listen(handle[, backlog][, callback])</code></a></li>
<li><a href=""net.html#serverlistenoptions-callback""><code>server.listen(options[, callback])</code></a></li>
<li><a href=""net.html#serverlistenpath-backlog-callback""><code>server.listen(path[, backlog][, callback])</code></a>
for <a href=""net.html#ipc-support"">IPC</a> servers</li>
<li><a href=""net.html#serverlistenport-host-backlog-callback""><code>server.listen([port[, host[, backlog]]][, callback])</code></a>
for TCP servers</li>
</ul>
<p>This function is asynchronous. When the server starts listening, the
<a href=""net.html#event-listening""><code>'listening'</code></a> event will be emitted. The last parameter <code>callback</code>
will be added as a listener for the <a href=""net.html#event-listening""><code>'listening'</code></a> event.</p>
<p>All <code>listen()</code> methods can take a <code>backlog</code> parameter to specify the maximum
length of the queue of pending connections. The actual length will be determined
by the OS through sysctl settings such as <code>tcp_max_syn_backlog</code> and <code>somaxconn</code>
on Linux. The default value of this parameter is 511 (not 512).</p>
<p>All <a href=""net.html#class-netsocket""><code>net.Socket</code></a> are set to <code>SO_REUSEADDR</code> (see <a href=""https://man7.org/linux/man-pages/man7/socket.7.html""><code>socket(7)</code></a> for
details).</p>
<p>The <code>server.listen()</code> method can be called again if and only if there was an
error during the first <code>server.listen()</code> call or <code>server.close()</code> has been
called. Otherwise, an <code>ERR_SERVER_ALREADY_LISTEN</code> error will be thrown.</p>
<p>One of the most common errors raised when listening is <code>EADDRINUSE</code>.
This happens when another server is already listening on the requested
<code>port</code>/<code>path</code>/<code>handle</code>. One way to handle this would be to retry
after a certain amount of time:</p>
<pre><code class=""language-js"">server.on('error', (e) => {
  if (e.code === 'EADDRINUSE') {
    console.error('Address in use, retrying...');
    setTimeout(() => {
      server.close();
      server.listen(PORT, HOST);
    }, 1000);
  }
});
</code></pre>",0,27,
720,server,,ref,server.ref,"<p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref</code>ed server will
<em>not</em> let the program exit if it's the only server left (the default behavior).
If the server is <code>ref</code>ed calling <code>ref()</code> again will have no effect.</p>",0,Others,
721,server,,unref,server.unref,"<p>Calling <code>unref()</code> on a server will allow the program to exit if this is the only
active server in the event system. If the server is already <code>unref</code>ed calling
<code>unref()</code> again will have no effect.</p>",0,Others,
722,socket,,address,socket.address,"<p>Returns the bound <code>address</code>, the address <code>family</code> name and <code>port</code> of the
socket as reported by the operating system:
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p>",0,Others,
723,socket,,connect,socket.connect,"<p>Initiate a connection on a given socket.</p>
<p>Possible signatures:</p>
<ul>
<li><a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options[, connectListener])</code></a></li>
<li><a href=""net.html#socketconnectpath-connectlistener""><code>socket.connect(path[, connectListener])</code></a>
for <a href=""net.html#ipc-support"">IPC</a> connections.</li>
<li><a href=""net.html#socketconnectport-host-connectlistener""><code>socket.connect(port[, host][, connectListener])</code></a>
for TCP connections.</li>
<li>Returns: <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a> The socket itself.</li>
</ul>
<p>This function is asynchronous. When the connection is established, the
<a href=""net.html#event-connect""><code>'connect'</code></a> event will be emitted. If there is a problem connecting,
instead of a <a href=""net.html#event-connect""><code>'connect'</code></a> event, an <a href=""net.html#event-error_1""><code>'error'</code></a> event will be emitted with
the error passed to the <a href=""net.html#event-error_1""><code>'error'</code></a> listener.
The last parameter <code>connectListener</code>, if supplied, will be added as a listener
for the <a href=""net.html#event-connect""><code>'connect'</code></a> event <strong>once</strong>.</p>
<p>This function should only be used for reconnecting a socket after
<code>'close'</code> has been emitted or otherwise it may lead to undefined
behavior.</p>",0,27,
724,socket,,destroy,socket.destroy,"<p>Ensures that no more I/O activity happens on this socket.
Destroys the stream and closes the connection.</p>
<p>See <a href=""stream.html#writabledestroyerror""><code>writable.destroy()</code></a> for further details.</p>",1,Others,
725,socket,,destroySoon,socket.destroySoon,"<p>Destroys the socket after all data is written. If the <code>'finish'</code> event was
already emitted the socket is destroyed immediately. If the socket is still
writable it implicitly calls <code>socket.end()</code>.</p>",0,Others,
726,socket,,end,socket.end,"<p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the
server will still send some data.</p>
<p>See <a href=""stream.html#writableendchunk-encoding-callback""><code>writable.end()</code></a> for further details.</p>",3,Others,
727,socket,,pause,socket.pause,"<p>Pauses the reading of data. That is, <a href=""net.html#event-data""><code>'data'</code></a> events will not be emitted.
Useful to throttle back an upload.</p>",0,Others,
728,socket,,ref,socket.ref,"<p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref</code>ed socket will
<em>not</em> let the program exit if it's the only socket left (the default behavior).
If the socket is <code>ref</code>ed calling <code>ref</code> again will have no effect.</p>",0,Others,
729,socket,,resetAndDestroy,socket.resetAndDestroy,"<p>Close the TCP connection by sending an RST packet and destroy the stream.
If this TCP socket is in connecting status, it will send an RST packet and destroy this TCP socket once it is connected.
Otherwise, it will call <code>socket.destroy</code> with an <code>ERR_SOCKET_CLOSED</code> Error.
If this is not a TCP socket (for example, a pipe), calling this method will immediately throw an <code>ERR_INVALID_HANDLE_TYPE</code> Error.</p>",0,Others,
730,socket,,resume,socket.resume,"<p>Resumes reading after a call to <a href=""net.html#socketpause""><code>socket.pause()</code></a>.</p>",0,Others,
731,socket,,setEncoding,socket.setEncoding,"<p>Set the encoding for the socket as a <a href=""stream.html#class-streamreadable"">Readable Stream</a>. See
<a href=""stream.html#readablesetencodingencoding""><code>readable.setEncoding()</code></a> for more information.</p>",1,Others,
732,socket,,setKeepAlive,socket.setKeepAlive,"<p>Enable/disable keep-alive functionality, and optionally set the initial
delay before the first keepalive probe is sent on an idle socket.</p>
<p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last
data packet received and the first keepalive probe. Setting <code>0</code> for
<code>initialDelay</code> will leave the value unchanged from the default
(or previous) setting.</p>
<p>Enabling the keep-alive functionality will set the following socket options:</p>
<ul>
<li><code>SO_KEEPALIVE=1</code></li>
<li><code>TCP_KEEPIDLE=initialDelay</code></li>
<li><code>TCP_KEEPCNT=10</code></li>
<li><code>TCP_KEEPINTVL=1</code></li>
</ul>",2,Others,
733,socket,,setNoDelay,socket.setNoDelay,"<p>Enable/disable the use of Nagle's algorithm.</p>
<p>When a TCP connection is created, it will have Nagle's algorithm enabled.</p>
<p>Nagle's algorithm delays data before it is sent via the network. It attempts
to optimize throughput at the expense of latency.</p>
<p>Passing <code>true</code> for <code>noDelay</code> or not passing an argument will disable Nagle's
algorithm for the socket. Passing <code>false</code> for <code>noDelay</code> will enable Nagle's
algorithm.</p>",1,Others,
734,socket,,setTimeout,socket.setTimeout,"<p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on
the socket. By default <code>net.Socket</code> do not have a timeout.</p>
<p>When an idle timeout is triggered the socket will receive a <a href=""net.html#event-timeout""><code>'timeout'</code></a>
event but the connection will not be severed. The user must manually call
<a href=""net.html#socketenddata-encoding-callback""><code>socket.end()</code></a> or <a href=""net.html#socketdestroyerror""><code>socket.destroy()</code></a> to end the connection.</p>
<pre><code class=""language-js"">socket.setTimeout(3000);
socket.on('timeout', () => {
  console.log('socket timeout');
  socket.end();
});
</code></pre>
<p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p>
<p>The optional <code>callback</code> parameter will be added as a one-time listener for the
<a href=""net.html#event-timeout""><code>'timeout'</code></a> event.</p>",2,Others,
735,socket,,unref,socket.unref,"<p>Calling <code>unref()</code> on a socket will allow the program to exit if this is the only
active socket in the event system. If the socket is already <code>unref</code>ed calling
<code>unref()</code> again will have no effect.</p>",0,Others,
736,socket,,write,socket.write,"<p>Sends data on the socket. The second parameter specifies the encoding in the
case of a string. It defaults to UTF8 encoding.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<a href=""net.html#event-drain""><code>'drain'</code></a> will be emitted when the buffer is again free.</p>
<p>The optional <code>callback</code> parameter will be executed when the data is finally
written out, which may not be immediately.</p>
<p>See <code>Writable</code> stream <a href=""stream.html#writablewritechunk-encoding-callback""><code>write()</code></a> method for more
information.</p>",3,23,
737,os,,availableParallelism,os.availableParallelism,"<p>Returns an estimate of the default amount of parallelism a program should use.
Always returns a value greater than zero.</p>
<p>This function is a small wrapper about libuv's <a href=""https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism""><code>uv_available_parallelism()</code></a>.</p>",0,4,
738,os,,arch,os.arch,"<p>Returns the operating system CPU architecture for which the Node.js binary was
compiled. Possible values are <code>'arm'</code>, <code>'arm64'</code>, <code>'ia32'</code>, <code>'loong64'</code>,
<code>'mips'</code>, <code>'mipsel'</code>, <code>'ppc'</code>, <code>'ppc64'</code>, <code>'riscv64'</code>, <code>'s390'</code>, <code>'s390x'</code>,
and <code>'x64'</code>.</p>
<p>The return value is equivalent to <a href=""process.html#processarch""><code>process.arch</code></a>.</p>",0,4,
739,os,,cpus,os.cpus,"<p>Returns an array of objects containing information about each logical CPU core.
The array will be empty if no CPU information is available, such as if the
<code>/proc</code> file system is unavailable.</p>
<p>The properties included on each object include:</p>
<ul>
<li><code>model</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>speed</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> (in MHz)</li>
<li><code>times</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a>
<ul>
<li><code>user</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds the CPU has spent in user mode.</li>
<li><code>nice</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds the CPU has spent in nice mode.</li>
<li><code>sys</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds the CPU has spent in sys mode.</li>
<li><code>idle</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds the CPU has spent in idle mode.</li>
<li><code>irq</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds the CPU has spent in irq mode.</li>
</ul>
</li>
</ul>
<!-- eslint-disable semi -->
<pre><code class=""language-js"">[
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 252020,
      nice: 0,
      sys: 30340,
      idle: 1070356870,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 306960,
      nice: 0,
      sys: 26980,
      idle: 1071569080,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 248450,
      nice: 0,
      sys: 21750,
      idle: 1070919370,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 256880,
      nice: 0,
      sys: 19430,
      idle: 1070905480,
      irq: 20,
    },
  },
]
</code></pre>
<p><code>nice</code> values are POSIX-only. On Windows, the <code>nice</code> values of all processors
are always 0.</p>
<p><code>os.cpus().length</code> should not be used to calculate the amount of parallelism
available to an application. Use
<a href=""os.html#osavailableparallelism""><code>os.availableParallelism()</code></a> for this purpose.</p>",0,4,
740,os,,endianness,os.endianness,"<p>Returns a string identifying the endianness of the CPU for which the Node.js
binary was compiled.</p>
<p>Possible values are <code>'BE'</code> for big endian and <code>'LE'</code> for little endian.</p>",0,4,
741,os,,freemem,os.freemem,<p>Returns the amount of free system memory in bytes as an integer.</p>,0,4,
742,os,,getPriority,os.getPriority,"<p>Returns the scheduling priority for the process specified by <code>pid</code>. If <code>pid</code> is
not provided or is <code>0</code>, the priority of the current process is returned.</p>",1,Others,
743,os,,homedir,os.homedir,"<p>Returns the string path of the current user's home directory.</p>
<p>On POSIX, it uses the <code>$HOME</code> environment variable if defined. Otherwise it
uses the <a href=""https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID"">effective UID</a> to look up the user's home directory.</p>
<p>On Windows, it uses the <code>USERPROFILE</code> environment variable if defined.
Otherwise it uses the path to the profile directory of the current user.</p>",0,5,
744,os,,hostname,os.hostname,<p>Returns the host name of the operating system as a string.</p>,0,4,
745,os,,loadavg,os.loadavg,"<p>Returns an array containing the 1, 5, and 15 minute load averages.</p>
<p>The load average is a measure of system activity calculated by the operating
system and expressed as a fractional number.</p>
<p>The load average is a Unix-specific concept. On Windows, the return value is
always <code>[0, 0, 0]</code>.</p>",0,4,
746,os,,machine,os.machine,"<p>Returns the machine type as a string, such as <code>arm</code>, <code>arm64</code>, <code>aarch64</code>,
<code>mips</code>, <code>mips64</code>, <code>ppc64</code>, <code>ppc64le</code>, <code>s390</code>, <code>s390x</code>, <code>i386</code>, <code>i686</code>, <code>x86_64</code>.</p>
<p>On POSIX systems, the machine type is determined by calling
<a href=""https://linux.die.net/man/3/uname""><code>uname(3)</code></a>. On Windows, <code>RtlGetVersion()</code> is used, and if it is not
available, <code>GetVersionExW()</code> will be used. See
<a href=""https://en.wikipedia.org/wiki/Uname#Examples"">https://en.wikipedia.org/wiki/Uname#Examples</a> for more information.</p>",0,4,
747,os,,networkInterfaces,os.networkInterfaces,"<p>Returns an object containing network interfaces that have been assigned a
network address.</p>
<p>Each key on the returned object identifies a network interface. The associated
value is an array of objects that each describe an assigned network address.</p>
<p>The properties available on the assigned network address object include:</p>
<ul>
<li><code>address</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The assigned IPv4 or IPv6 address</li>
<li><code>netmask</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The IPv4 or IPv6 network mask</li>
<li><code>family</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Either <code>IPv4</code> or <code>IPv6</code></li>
<li><code>mac</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The MAC address of the network interface</li>
<li><code>internal</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> <code>true</code> if the network interface is a loopback or
similar interface that is not remotely accessible; otherwise <code>false</code></li>
<li><code>scopeid</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The numeric IPv6 scope ID (only specified when <code>family</code>
is <code>IPv6</code>)</li>
<li><code>cidr</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The assigned IPv4 or IPv6 address with the routing prefix
in CIDR notation. If the <code>netmask</code> is invalid, this property is set
to <code>null</code>.</li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  lo: [
    {
      address: '127.0.0.1',
      netmask: '255.0.0.0',
      family: 'IPv4',
      mac: '00:00:00:00:00:00',
      internal: true,
      cidr: '127.0.0.1/8'
    },
    {
      address: '::1',
      netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',
      family: 'IPv6',
      mac: '00:00:00:00:00:00',
      scopeid: 0,
      internal: true,
      cidr: '::1/128'
    }
  ],
  eth0: [
    {
      address: '192.168.1.108',
      netmask: '255.255.255.0',
      family: 'IPv4',
      mac: '01:02:03:0a:0b:0c',
      internal: false,
      cidr: '192.168.1.108/24'
    },
    {
      address: 'fe80::a00:27ff:fe4e:66a1',
      netmask: 'ffff:ffff:ffff:ffff::',
      family: 'IPv6',
      mac: '01:02:03:0a:0b:0c',
      scopeid: 1,
      internal: false,
      cidr: 'fe80::a00:27ff:fe4e:66a1/64'
    }
  ]
}
</code></pre>",0,26,
748,os,,platform,os.platform,"<p>Returns a string identifying the operating system platform for which
the Node.js binary was compiled. The value is set at compile time.
Possible values are <code>'aix'</code>, <code>'darwin'</code>, <code>'freebsd'</code>,<code>'linux'</code>,
<code>'openbsd'</code>, <code>'sunos'</code>, and <code>'win32'</code>.</p>
<p>The return value is equivalent to <a href=""process.html#processplatform""><code>process.platform</code></a>.</p>
<p>The value <code>'android'</code> may also be returned if Node.js is built on the Android
operating system. <a href=""https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os"">Android support is experimental</a>.</p>",0,4,
749,os,,release,os.release,"<p>Returns the operating system as a string.</p>
<p>On POSIX systems, the operating system release is determined by calling
<a href=""https://linux.die.net/man/3/uname""><code>uname(3)</code></a>. On Windows, <code>GetVersionExW()</code> is used. See
<a href=""https://en.wikipedia.org/wiki/Uname#Examples"">https://en.wikipedia.org/wiki/Uname#Examples</a> for more information.</p>",0,4,
750,os,,setPriority,os.setPriority,"<p>Attempts to set the scheduling priority for the process specified by <code>pid</code>. If
<code>pid</code> is not provided or is <code>0</code>, the process ID of the current process is used.</p>
<p>The <code>priority</code> input must be an integer between <code>-20</code> (high priority) and <code>19</code>
(low priority). Due to differences between Unix priority levels and Windows
priority classes, <code>priority</code> is mapped to one of six priority constants in
<code>os.constants.priority</code>. When retrieving a process priority level, this range
mapping may cause the return value to be slightly different on Windows. To avoid
confusion, set <code>priority</code> to one of the priority constants.</p>
<p>On Windows, setting priority to <code>PRIORITY_HIGHEST</code> requires elevated user
privileges. Otherwise the set priority will be silently reduced to
<code>PRIORITY_HIGH</code>.</p>",2,Others,
751,os,,tmpdir,os.tmpdir,"<p>Returns the operating system's default directory for temporary files as a
string.</p>",0,3,
752,os,,totalmem,os.totalmem,<p>Returns the total amount of system memory in bytes as an integer.</p>,0,4,
753,os,,type,os.type,"<p>Returns the operating system name as returned by <a href=""https://linux.die.net/man/3/uname""><code>uname(3)</code></a>. For example, it
returns <code>'Linux'</code> on Linux, <code>'Darwin'</code> on macOS, and <code>'Windows_NT'</code> on Windows.</p>
<p>See <a href=""https://en.wikipedia.org/wiki/Uname#Examples"">https://en.wikipedia.org/wiki/Uname#Examples</a> for additional information
about the output of running <a href=""https://linux.die.net/man/3/uname""><code>uname(3)</code></a> on various operating systems.</p>",0,4,
754,os,,uptime,os.uptime,<p>Returns the system uptime in number of seconds.</p>,0,4,
755,os,,userInfo,os.userInfo,"<p>Returns information about the currently effective user. On POSIX platforms,
this is typically a subset of the password file. The returned object includes
the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>. On Windows, the <code>uid</code> and
<code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p>
<p>The value of <code>homedir</code> returned by <code>os.userInfo()</code> is provided by the operating
system. This differs from the result of <code>os.homedir()</code>, which queries
environment variables for the home directory before falling back to the
operating system response.</p>
<p>Throws a <a href=""errors.html#class-systemerror""><code>SystemError</code></a> if a user has no <code>username</code> or <code>homedir</code>.</p>",1,5,
756,os,,version,os.version,"<p>Returns a string identifying the kernel version.</p>
<p>On POSIX systems, the operating system release is determined by calling
<a href=""https://linux.die.net/man/3/uname""><code>uname(3)</code></a>. On Windows, <code>RtlGetVersion()</code> is used, and if it is not
available, <code>GetVersionExW()</code> will be used. See
<a href=""https://en.wikipedia.org/wiki/Uname#Examples"">https://en.wikipedia.org/wiki/Uname#Examples</a> for more information.</p>",0,4,
757,path,,basename,path.basename,"<p>The <code>path.basename()</code> method returns the last portion of a <code>path</code>, similar to
the Unix <code>basename</code> command. Trailing <a href=""path.html#pathsep"">directory separators</a> are
ignored.</p>
<pre><code class=""language-js"">path.basename('/foo/bar/baz/asdf/quux.html');
// Returns: 'quux.html'

path.basename('/foo/bar/baz/asdf/quux.html', '.html');
// Returns: 'quux'
</code></pre>
<p>Although Windows usually treats file names, including file extensions, in a
case-insensitive manner, this function does not. For example, <code>C:\\foo.html</code> and
<code>C:\\foo.HTML</code> refer to the same file, but <code>basename</code> treats the extension as a
case-sensitive string:</p>
<pre><code class=""language-js"">path.win32.basename('C:\\foo.html', '.html');
// Returns: 'foo'

path.win32.basename('C:\\foo.HTML', '.html');
// Returns: 'foo.HTML'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string or if <code>suffix</code> is given
and is not a string.</p>",2,3,
758,path,,dirname,path.dirname,"<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to
the Unix <code>dirname</code> command. Trailing directory separators are ignored, see
<a href=""path.html#pathsep""><code>path.sep</code></a>.</p>
<pre><code class=""language-js"">path.dirname('/foo/bar/baz/asdf/quux');
// Returns: '/foo/bar/baz/asdf'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>",1,3,
759,path,,extname,path.extname,"<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last
occurrence of the <code>.</code> (period) character to end of string in the last portion of
the <code>path</code>. If there is no <code>.</code> in the last portion of the <code>path</code>, or if
there are no <code>.</code> characters other than the first character of
the basename of <code>path</code> (see <code>path.basename()</code>) , an empty string is returned.</p>
<pre><code class=""language-js"">path.extname('index.html');
// Returns: '.html'

path.extname('index.coffee.md');
// Returns: '.md'

path.extname('index.');
// Returns: '.'

path.extname('index');
// Returns: ''

path.extname('.index');
// Returns: ''

path.extname('.index.md');
// Returns: '.md'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>",1,3,
760,path,,format,path.format,"<p>The <code>path.format()</code> method returns a path string from an object. This is the
opposite of <a href=""path.html#pathparsepath""><code>path.parse()</code></a>.</p>
<p>When providing properties to the <code>pathObject</code> remember that there are
combinations where one property has priority over another:</p>
<ul>
<li><code>pathObject.root</code> is ignored if <code>pathObject.dir</code> is provided</li>
<li><code>pathObject.ext</code> and <code>pathObject.name</code> are ignored if <code>pathObject.base</code> exists</li>
</ul>
<p>For example, on POSIX:</p>
<pre><code class=""language-js"">// If `dir`, `root` and `base` are provided,
// `${dir}${path.sep}${base}`
// will be returned. `root` is ignored.
path.format({
  root: '/ignored',
  dir: '/home/user/dir',
  base: 'file.txt',
});
// Returns: '/home/user/dir/file.txt'

// `root` will be used if `dir` is not specified.
// If only `root` is provided or `dir` is equal to `root` then the
// platform separator will not be included. `ext` will be ignored.
path.format({
  root: '/',
  base: 'file.txt',
  ext: 'ignored',
});
// Returns: '/file.txt'

// `name` + `ext` will be used if `base` is not specified.
path.format({
  root: '/',
  name: 'file',
  ext: '.txt',
});
// Returns: '/file.txt'

// The dot will be added if it is not specified in `ext`.
path.format({
  root: '/',
  name: 'file',
  ext: 'txt',
});
// Returns: '/file.txt'
</code></pre>
<p>On Windows:</p>
<pre><code class=""language-js"">path.format({
  dir: 'C:\\path\\dir',
  base: 'file.txt',
});
// Returns: 'C:\\path\\dir\\file.txt'
</code></pre>",1,Others,
761,path,,isAbsolute,path.isAbsolute,"<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>
<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>
<p>For example, on POSIX:</p>
<pre><code class=""language-js"">path.isAbsolute('/foo/bar'); // true
path.isAbsolute('/baz/..');  // true
path.isAbsolute('qux/');     // false
path.isAbsolute('.');        // false
</code></pre>
<p>On Windows:</p>
<pre><code class=""language-js"">path.isAbsolute('//server');    // true
path.isAbsolute('\\\\server');  // true
path.isAbsolute('C:/foo/..');   // true
path.isAbsolute('C:\\foo\\..'); // true
path.isAbsolute('bar\\baz');    // false
path.isAbsolute('bar/baz');     // false
path.isAbsolute('.');           // false
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>",1,Others,
762,path,,join,path.join,"<p>The <code>path.join()</code> method joins all given <code>path</code> segments together using the
platform-specific separator as a delimiter, then normalizes the resulting path.</p>
<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a
zero-length string then <code>'.'</code> will be returned, representing the current
working directory.</p>
<pre><code class=""language-js"">path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');
// Returns: '/foo/bar/baz/asdf'

path.join('foo', {}, 'bar');
// Throws 'TypeError: Path must be a string. Received {}'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if any of the path segments is not a string.</p>",1,1,
763,path,,normalize,path.normalize,"<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>'..'</code> and
<code>'.'</code> segments.</p>
<p>When multiple, sequential path segment separation characters are found (e.g.
<code>/</code> on POSIX and either <code>\</code> or <code>/</code> on Windows), they are replaced by a single
instance of the platform-specific path segment separator (<code>/</code> on POSIX and
<code>\</code> on Windows). Trailing separators are preserved.</p>
<p>If the <code>path</code> is a zero-length string, <code>'.'</code> is returned, representing the
current working directory.</p>
<p>For example, on POSIX:</p>
<pre><code class=""language-js"">path.normalize('/foo/bar//baz/asdf/quux/..');
// Returns: '/foo/bar/baz/asdf'
</code></pre>
<p>On Windows:</p>
<pre><code class=""language-js"">path.normalize('C:\\temp\\\\foo\\bar\\..\\');
// Returns: 'C:\\temp\\foo\\'
</code></pre>
<p>Since Windows recognizes multiple path separators, both separators will be
replaced by instances of the Windows preferred separator (<code>\</code>):</p>
<pre><code class=""language-js"">path.win32.normalize('C:////temp\\\\/\\/\\/foo/bar');
// Returns: 'C:\\temp\\foo\\bar'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>",1,Others,
764,path,,parse,path.parse,"<p>The <code>path.parse()</code> method returns an object whose properties represent
significant elements of the <code>path</code>. Trailing directory separators are ignored,
see <a href=""path.html#pathsep""><code>path.sep</code></a>.</p>
<p>The returned object will have the following properties:</p>
<ul>
<li><code>dir</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>root</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>base</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>name</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>ext</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
</ul>
<p>For example, on POSIX:</p>
<pre><code class=""language-js"">path.parse('/home/user/dir/file.txt');
// Returns:
// { root: '/',
//   dir: '/home/user/dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
</code></pre>
<pre><code class=""language-text"">┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
""  /    home/user/dir / file  .txt ""
└──────┴──────────────┴──────┴─────┘
(All spaces in the """" line should be ignored. They are purely for formatting.)
</code></pre>
<p>On Windows:</p>
<pre><code class=""language-js"">path.parse('C:\\path\\dir\\file.txt');
// Returns:
// { root: 'C:\\',
//   dir: 'C:\\path\\dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
</code></pre>
<pre><code class=""language-text"">┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
"" C:\      path\dir   \ file  .txt ""
└──────┴──────────────┴──────┴─────┘
(All spaces in the """" line should be ignored. They are purely for formatting.)
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>",1,Others,
765,path,,relative,path.relative,"<p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code> based
on the current working directory. If <code>from</code> and <code>to</code> each resolve to the same
path (after calling <code>path.resolve()</code> on each), a zero-length string is returned.</p>
<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working
directory will be used instead of the zero-length strings.</p>
<p>For example, on POSIX:</p>
<pre><code class=""language-js"">path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb');
// Returns: '../../impl/bbb'
</code></pre>
<p>On Windows:</p>
<pre><code class=""language-js"">path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb');
// Returns: '..\\..\\impl\\bbb'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if either <code>from</code> or <code>to</code> is not a string.</p>",2,Others,
766,path,,resolve,path.resolve,"<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into
an absolute path.</p>
<p>The given sequence of paths is processed from right to left, with each
subsequent <code>path</code> prepended until an absolute path is constructed.
For instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,
calling <code>path.resolve('/foo', '/bar', 'baz')</code> would return <code>/bar/baz</code>
because <code>'baz'</code> is not an absolute path but <code>'/bar' + '/' + 'baz'</code> is.</p>
<p>If, after processing all given <code>path</code> segments, an absolute path has not yet
been generated, the current working directory is used.</p>
<p>The resulting path is normalized and trailing slashes are removed unless the
path is resolved to the root directory.</p>
<p>Zero-length <code>path</code> segments are ignored.</p>
<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path
of the current working directory.</p>
<pre><code class=""language-js"">path.resolve('/foo/bar', './baz');
// Returns: '/foo/bar/baz'

path.resolve('/foo/bar', '/tmp/file/');
// Returns: '/tmp/file'

path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif');
// If the current working directory is /home/myself/node,
// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'
</code></pre>
<p>A <a href=""errors.html#class-typeerror""><code>TypeError</code></a> is thrown if any of the arguments is not a string.</p>",1,1,
767,path,,toNamespacedPath,path.toNamespacedPath,"<p>On Windows systems only, returns an equivalent <a href=""https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces"">namespace-prefixed path</a> for
the given <code>path</code>. If <code>path</code> is not a string, <code>path</code> will be returned without
modifications.</p>
<p>This method is meaningful only on Windows systems. On POSIX systems, the
method is non-operational and always returns <code>path</code> without modifications.</p>",1,Others,
768,perf_hooks,,createHistogram,perf_hooks.createHistogram,"<p>Returns a <a href=""perf_hooks.html#class-recordablehistogram-extends-histogram"" class=""type"">&lt;RecordableHistogram&gt;</a>.</p>",1,,
769,perf_hooks,,monitorEventLoopDelay,perf_hooks.monitorEventLoopDelay,"<p><em>This property is an extension by Node.js. It is not available in Web browsers.</em></p>
<p>Creates an <code>IntervalHistogram</code> object that samples and reports the event loop
delay over time. The delays will be reported in nanoseconds.</p>
<p>Using a timer to detect approximate event loop delay works because the
execution of timers is tied specifically to the lifecycle of the libuv
event loop. That is, a delay in the loop will cause a delay in the execution
of the timer, and those delays are specifically what this API is intended to
detect.</p>
<pre><code class=""language-js"">const { monitorEventLoopDelay } = require('node:perf_hooks');
const h = monitorEventLoopDelay({ resolution: 20 });
h.enable();
// Do something.
h.disable();
console.log(h.min);
console.log(h.max);
console.log(h.mean);
console.log(h.stddev);
console.log(h.percentiles);
console.log(h.percentile(50));
console.log(h.percentile(99));
</code></pre>",1,,
770,performanceResourceTiming,,toJSON,performanceResourceTiming.toJSON,"<p>Returns a <code>object</code> that is the JSON representation of the
<code>PerformanceResourceTiming</code> object</p>",0,,
771,performanceObserver,,disconnect,performanceObserver.disconnect,<p>Disconnects the <code>PerformanceObserver</code> instance from all notifications.</p>,0,,
772,performanceObserver,,observe,performanceObserver.observe,"<p>Subscribes the <a href=""perf_hooks.html#class-performanceobserver"" class=""type"">&lt;PerformanceObserver&gt;</a> instance to notifications of new
<a href=""perf_hooks.html#class-performanceentry"" class=""type"">&lt;PerformanceEntry&gt;</a> instances identified either by <code>options.entryTypes</code>
or <code>options.type</code>:</p>
<pre><code class=""language-js"">const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((list, observer) => {
  // Called once asynchronously. `list` contains three items.
});
obs.observe({ type: 'mark' });

for (let n = 0; n &#x3C; 3; n++)
  performance.mark(`test${n}`);
</code></pre>",1,Others,
773,performanceObserverEntryList,,getEntries,performanceObserverEntryList.getEntries,"<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order
with respect to <code>performanceEntry.startTime</code>.</p>
<pre><code class=""language-js"">const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntries());
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 81.465639,
   *     duration: 0
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 81.860064,
   *     duration: 0
   *   }
   * ]
   */

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
</code></pre>",0,,
774,performanceObserverEntryList,,getEntriesByName,performanceObserverEntryList.getEntriesByName,"<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order
with respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.name</code> is
equal to <code>name</code>, and optionally, whose <code>performanceEntry.entryType</code> is equal to
<code>type</code>.</p>
<pre><code class=""language-js"">const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByName('meow'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 98.545991,
   *     duration: 0
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('nope')); // []

  console.log(perfObserverList.getEntriesByName('test', 'mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 63.518931,
   *     duration: 0
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('test', 'measure')); // []

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark', 'measure'] });

performance.mark('test');
performance.mark('meow');
</code></pre>",2,,
775,performanceObserverEntryList,,getEntriesByType,performanceObserverEntryList.getEntriesByType,"<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order
with respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.entryType</code>
is equal to <code>type</code>.</p>
<pre><code class=""language-js"">const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByType('mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 55.897834,
   *     duration: 0
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 56.350146,
   *     duration: 0
   *   }
   * ]
   */
  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
</code></pre>",1,,
776,histogram,,percentile,histogram.percentile,<p>Returns the value at the given percentile.</p>,1,,
777,histogram,,percentileBigInt,histogram.percentileBigInt,<p>Returns the value at the given percentile.</p>,1,,
778,histogram,,reset,histogram.reset,<p>Resets the collected histogram data.</p>,0,,
779,histogram,,disable,histogram.disable,"<p>Disables the update interval timer. Returns <code>true</code> if the timer was
stopped, <code>false</code> if it was already stopped.</p>",0,,
780,histogram,,enable,histogram.enable,"<p>Enables the update interval timer. Returns <code>true</code> if the timer was
started, <code>false</code> if it was already started.</p>",0,,
781,histogram,,add,histogram.add,<p>Adds the values from <code>other</code> to this histogram.</p>,1,,
782,histogram,,record,histogram.record,,1,,
783,histogram,,recordDelta,histogram.recordDelta,"<p>Calculates the amount of time (in nanoseconds) that has passed since the
previous call to <code>recordDelta()</code> and records that amount in the histogram.</p>
<h2>Examples</h2>",0,,
784,punycode,,decode,punycode.decode,"<p>The <code>punycode.decode()</code> method converts a <a href=""https://tools.ietf.org/html/rfc3492"">Punycode</a> string of ASCII-only
characters to the equivalent string of Unicode codepoints.</p>
<pre><code class=""language-js"">punycode.decode('maana-pta'); // 'mañana'
punycode.decode('--dqo34k'); // '☃-⌘'
</code></pre>",1,,
785,punycode,,encode,punycode.encode,"<p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a
<a href=""https://tools.ietf.org/html/rfc3492"">Punycode</a> string of ASCII-only characters.</p>
<pre><code class=""language-js"">punycode.encode('mañana'); // 'maana-pta'
punycode.encode('☃-⌘'); // '--dqo34k'
</code></pre>",1,,
786,punycode,,toASCII,punycode.toASCII,"<p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an
Internationalized Domain Name to <a href=""https://tools.ietf.org/html/rfc3492"">Punycode</a>. Only the non-ASCII parts of the
domain name will be converted. Calling <code>punycode.toASCII()</code> on a string that
already only contains ASCII characters will have no effect.</p>
<pre><code class=""language-js"">// encode domain names
punycode.toASCII('mañana.com');  // 'xn--maana-pta.com'
punycode.toASCII('☃-⌘.com');   // 'xn----dqo34k.com'
punycode.toASCII('example.com'); // 'example.com'
</code></pre>",1,27,
787,punycode,,toUnicode,punycode.toUnicode,"<p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name
containing <a href=""https://tools.ietf.org/html/rfc3492"">Punycode</a> encoded characters into Unicode. Only the <a href=""https://tools.ietf.org/html/rfc3492"">Punycode</a>
encoded parts of the domain name are be converted.</p>
<pre><code class=""language-js"">// decode domain names
punycode.toUnicode('xn--maana-pta.com'); // 'mañana.com'
punycode.toUnicode('xn----dqo34k.com');  // '☃-⌘.com'
punycode.toUnicode('example.com');       // 'example.com'
</code></pre>",1,30,
788,querystring,,decode,querystring.decode,<p>The <code>querystring.decode()</code> function is an alias for <code>querystring.parse()</code>.</p>,0,30,
789,querystring,,encode,querystring.encode,<p>The <code>querystring.encode()</code> function is an alias for <code>querystring.stringify()</code>.</p>,0,29,
790,querystring,,escape,querystring.escape,"<p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given
<code>str</code> in a manner that is optimized for the specific requirements of URL
query strings.</p>
<p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is
generally not expected to be used directly. It is exported primarily to allow
application code to provide a replacement percent-encoding implementation if
necessary by assigning <code>querystring.escape</code> to an alternative function.</p>",1,Others,
791,querystring,,parse,querystring.parse,"<p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a
collection of key and value pairs.</p>
<p>For example, the query string <code>'foo=bar&#x26;abc=xyz&#x26;abc=123'</code> is parsed into:</p>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  foo: 'bar',
  abc: ['xyz', '123']
}
</code></pre>
<p>The object returned by the <code>querystring.parse()</code> method <em>does not</em>
prototypically inherit from the JavaScript <code>Object</code>. This means that typical
<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others
are not defined and <em>will not work</em>.</p>
<p>By default, percent-encoded characters within the query string will be assumed
to use UTF-8 encoding. If an alternative character encoding is used, then an
alternative <code>decodeURIComponent</code> option will need to be specified:</p>
<pre><code class=""language-js"">// Assuming gbkDecodeURIComponent function already exists...

querystring.parse('w=%D6%D0%CE%C4&#x26;foo=bar', null, null,
                  { decodeURIComponent: gbkDecodeURIComponent });
</code></pre>",4,30,
792,querystring,,stringify,querystring.stringify,"<p>The <code>querystring.stringify()</code> method produces a URL query string from a
given <code>obj</code> by iterating through the object's ""own properties"".</p>
<p>It serializes the following types of values passed in <code>obj</code>:
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"" class=""type"">&lt;bigint&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number[]&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"" class=""type"">&lt;bigint[]&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean[]&gt;</a>
The numeric values must be finite. Any other input values will be coerced to
empty strings.</p>
<pre><code class=""language-js"">querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });
// Returns 'foo=bar&#x26;baz=qux&#x26;baz=quux&#x26;corge='

querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');
// Returns 'foo:bar;baz:qux'
</code></pre>
<p>By default, characters requiring percent-encoding within the query string will
be encoded as UTF-8. If an alternative encoding is required, then an alternative
<code>encodeURIComponent</code> option will need to be specified:</p>
<pre><code class=""language-js"">// Assuming gbkEncodeURIComponent function already exists,

querystring.stringify({ w: '中文', foo: 'bar' }, null, null,
                      { encodeURIComponent: gbkEncodeURIComponent });
</code></pre>",4,Others,
793,querystring,,unescape,querystring.unescape,"<p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded
characters on the given <code>str</code>.</p>
<p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is
generally not expected to be used directly. It is exported primarily to allow
application code to provide a replacement decoding implementation if
necessary by assigning <code>querystring.unescape</code> to an alternative function.</p>
<p>By default, the <code>querystring.unescape()</code> method will attempt to use the
JavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,
a safer equivalent that does not throw on malformed URLs will be used.</p>",1,Others,
794,readline,,emitKeypressEvents,readline.emitKeypressEvents,"<p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href=""stream.html#readable-streams"">Readable</a>
stream to begin emitting <code>'keypress'</code> events corresponding to received input.</p>
<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which
autocompletion is disabled when copy-pasted input is detected.</p>
<p>If the <code>stream</code> is a <a href=""tty.html"">TTY</a>, then it must be in raw mode.</p>
<p>This is automatically called by any readline instance on its <code>input</code> if the
<code>input</code> is a terminal. Closing the <code>readline</code> instance does not stop
the <code>input</code> from emitting <code>'keypress'</code> events.</p>
<pre><code class=""language-js"">readline.emitKeypressEvents(process.stdin);
if (process.stdin.isTTY)
  process.stdin.setRawMode(true);
</code></pre>
<h2>Example: Tiny CLI</h2>
<p>The following example illustrates the use of <code>readline.Interface</code> class to
implement a small command-line interface:</p>
<pre><code class=""language-js"">const readline = require('node:readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: 'OHAI> ',
});

rl.prompt();

rl.on('line', (line) => {
  switch (line.trim()) {
    case 'hello':
      console.log('world!');
      break;
    default:
      console.log(`Say what? I might have heard '${line.trim()}'`);
      break;
  }
  rl.prompt();
}).on('close', () => {
  console.log('Have a great day!');
  process.exit(0);
});
</code></pre>
<h2>Example: Read file stream line-by-Line</h2>
<p>A common use case for <code>readline</code> is to consume an input file one line at a
time. The easiest way to do so is leveraging the <a href=""fs.html#class-fsreadstream""><code>fs.ReadStream</code></a> API as
well as a <code>for await...of</code> loop:</p>
<pre><code class=""language-js"">const fs = require('node:fs');
const readline = require('node:readline');

async function processLineByLine() {
  const fileStream = fs.createReadStream('input.txt');

  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });
  // Note: we use the crlfDelay option to recognize all instances of CR LF
  // ('\r\n') in input.txt as a single line break.

  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    console.log(`Line from file: ${line}`);
  }
}

processLineByLine();
</code></pre>
<p>Alternatively, one could use the <a href=""readline.html#event-line""><code>'line'</code></a> event:</p>
<pre><code class=""language-js"">const fs = require('node:fs');
const readline = require('node:readline');

const rl = readline.createInterface({
  input: fs.createReadStream('sample.txt'),
  crlfDelay: Infinity,
});

rl.on('line', (line) => {
  console.log(`Line from file: ${line}`);
});
</code></pre>
<p>Currently, <code>for await...of</code> loop can be a bit slower. If <code>async</code> / <code>await</code>
flow and speed are both essential, a mixed approach can be applied:</p>
<pre><code class=""language-js"">const { once } = require('node:events');
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

(async function processLineByLine() {
  try {
    const rl = createInterface({
      input: createReadStream('big-file.txt'),
      crlfDelay: Infinity,
    });

    rl.on('line', (line) => {
      // Process the line.
    });

    await once(rl, 'close');

    console.log('File processed.');
  } catch (err) {
    console.error(err);
  }
})();
</code></pre>",2,Others,
795,rl,,close,rl.close,"<p>The <code>rl.close()</code> method closes the <code>InterfaceConstructor</code> instance and
relinquishes control over the <code>input</code> and <code>output</code> streams. When called,
the <code>'close'</code> event will be emitted.</p>
<p>Calling <code>rl.close()</code> does not immediately stop other events (including <code>'line'</code>)
from being emitted by the <code>InterfaceConstructor</code> instance.</p>",0,Others,
796,rl,,pause,rl.pause,"<p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed
later if necessary.</p>
<p>Calling <code>rl.pause()</code> does not immediately pause other events (including
<code>'line'</code>) from being emitted by the <code>InterfaceConstructor</code> instance.</p>",0,,
797,rl,,prompt,rl.prompt,"<p>The <code>rl.prompt()</code> method writes the <code>InterfaceConstructor</code> instances configured
<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new
location at which to provide input.</p>
<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>InterfaceConstructor</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the prompt is not written.</p>",1,Others,
798,rl,,resume,rl.resume,<p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>,0,,
799,rl,,setPrompt,rl.setPrompt,"<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>
whenever <code>rl.prompt()</code> is called.</p>",1,,
800,rl,,getPrompt,rl.getPrompt,<p>The <code>rl.getPrompt()</code> method returns the current prompt used by <code>rl.prompt()</code>.</p>,0,Others,
801,rl,,write,rl.write,"<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence identified
by <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is
a <a href=""tty.html"">TTY</a> text terminal. See <a href=""readline.html#tty-keybindings"">TTY keybindings</a> for a list of key
combinations.</p>
<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>
<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>InterfaceConstructor</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>
<pre><code class=""language-js"">rl.write('Delete this!');
// Simulate Ctrl+U to delete the line written previously
rl.write(null, { ctrl: true, name: 'u' });
</code></pre>
<p>The <code>rl.write()</code> method will write the data to the <code>readline</code> <code>Interface</code>'s
<code>input</code> <em>as if it were provided by the user</em>.</p>",2,Others,
802,rl[Symbol,,[Symbol.asyncIterator],rl[Symbol.asyncIterator],"<p>Create an <code>AsyncIterator</code> object that iterates through each line in the input
stream as a string. This method allows asynchronous iteration of
<code>InterfaceConstructor</code> objects through <code>for await...of</code> loops.</p>
<p>Errors in the input stream are not forwarded.</p>
<p>If the loop is terminated with <code>break</code>, <code>throw</code>, or <code>return</code>,
<a href=""readline.html#rlclose""><code>rl.close()</code></a> will be called. In other words, iterating over a
<code>InterfaceConstructor</code> will always consume the input stream fully.</p>
<p>Performance is not on par with the traditional <code>'line'</code> event API. Use <code>'line'</code>
instead for performance-sensitive applications.</p>
<pre><code class=""language-js"">async function processLineByLine() {
  const rl = readline.createInterface({
    // ...
  });

  for await (const line of rl) {
    // Each line in the readline input will be successively available here as
    // `line`.
  }
}
</code></pre>
<p><code>readline.createInterface()</code> will start to consume the input stream once
invoked. Having asynchronous operations between interface creation and
asynchronous iteration may result in missed lines.</p>",0,,
803,rl,,getCursorPos,rl.getCursorPos,"<p>Returns the real position of the cursor in relation to the input
prompt + string. Long input (wrapping) strings, as well as multiple
line prompts are included in the calculations.</p>",0,,
804,readlinePromises,,createInterface,readlinePromises.createInterface,"<p>The <code>readlinePromises.createInterface()</code> method creates a new <code>readlinePromises.Interface</code>
instance.</p>
<pre><code class=""language-js"">const readlinePromises = require('node:readline/promises');
const rl = readlinePromises.createInterface({
  input: process.stdin,
  output: process.stdout,
});
</code></pre>
<p>Once the <code>readlinePromises.Interface</code> instance is created, the most common case
is to listen for the <code>'line'</code> event:</p>
<pre><code class=""language-js"">rl.on('line', (line) => {
  console.log(`Received: ${line}`);
});
</code></pre>
<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get
the best compatibility if it defines an <code>output.columns</code> property and emits
a <code>'resize'</code> event on the <code>output</code> if or when the columns ever change
(<a href=""process.html#processstdout""><code>process.stdout</code></a> does this automatically when it is a TTY).</p>",1,,
805,rl,,question,rl.question,"<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,
waits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>
function passing the provided input as the first argument.</p>
<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>readlinePromises.Interface</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the <code>query</code> is not written.</p>
<p>If the question is called after <code>rl.close()</code>, it returns a rejected promise.</p>
<p>Example usage:</p>
<pre><code class=""language-mjs"">const answer = await rl.question('What is your favorite food? ');
console.log(`Oh, so your favorite food is ${answer}`);
</code></pre>
<p>Using an <code>AbortSignal</code> to cancel a question.</p>
<pre><code class=""language-mjs"">const signal = AbortSignal.timeout(10_000);

signal.addEventListener('abort', () => {
  console.log('The food question timed out');
}, { once: true });

const answer = await rl.question('What is your favorite food? ', { signal });
console.log(`Oh, so your favorite food is ${answer}`);
</code></pre>",2,Others,
806,rl,,clearLine,rl.clearLine,"<p>The <code>rl.clearLine()</code> method adds to the internal list of pending action an
action that clears current line of the associated <code>stream</code> in a specified
direction identified by <code>dir</code>.
Call <code>rl.commit()</code> to see the effect of this method, unless <code>autoCommit: true</code>
was passed to the constructor.</p>",1,,
807,rl,,clearScreenDown,rl.clearScreenDown,"<p>The <code>rl.clearScreenDown()</code> method adds to the internal list of pending action an
action that clears the associated stream from the current position of the
cursor down.
Call <code>rl.commit()</code> to see the effect of this method, unless <code>autoCommit: true</code>
was passed to the constructor.</p>",0,,
808,rl,,commit,rl.commit,"<p>The <code>rl.commit()</code> method sends all the pending actions to the associated
<code>stream</code> and clears the internal list of pending actions.</p>",0,,
809,rl,,cursorTo,rl.cursorTo,"<p>The <code>rl.cursorTo()</code> method adds to the internal list of pending action an action
that moves cursor to the specified position in the associated <code>stream</code>.
Call <code>rl.commit()</code> to see the effect of this method, unless <code>autoCommit: true</code>
was passed to the constructor.</p>",2,,
810,rl,,moveCursor,rl.moveCursor,"<p>The <code>rl.moveCursor()</code> method adds to the internal list of pending action an
action that moves the cursor <em>relative</em> to its current position in the
associated <code>stream</code>.
Call <code>rl.commit()</code> to see the effect of this method, unless <code>autoCommit: true</code>
was passed to the constructor.</p>",2,,
811,rl,,rollback,rl.rollback,"<p>The <code>rl.rollback</code> methods clears the internal list of pending actions without
sending it to the associated <code>stream</code>.</p>",0,,
812,readline,,clearLine,readline.clearLine,"<p>The <code>readline.clearLine()</code> method clears current line of given <a href=""tty.html"">TTY</a> stream
in a specified direction identified by <code>dir</code>.</p>",3,Others,
813,readline,,clearScreenDown,readline.clearScreenDown,"<p>The <code>readline.clearScreenDown()</code> method clears the given <a href=""tty.html"">TTY</a> stream from
the current position of the cursor down.</p>",2,38,
814,readline,,createInterface,readline.createInterface,"<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>
instance.</p>
<pre><code class=""language-js"">const readline = require('node:readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
</code></pre>
<p>Once the <code>readline.Interface</code> instance is created, the most common case is to
listen for the <code>'line'</code> event:</p>
<pre><code class=""language-js"">rl.on('line', (line) => {
  console.log(`Received: ${line}`);
});
</code></pre>
<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get
the best compatibility if it defines an <code>output.columns</code> property and emits
a <code>'resize'</code> event on the <code>output</code> if or when the columns ever change
(<a href=""process.html#processstdout""><code>process.stdout</code></a> does this automatically when it is a TTY).</p>
<p>When creating a <code>readline.Interface</code> using <code>stdin</code> as input, the program
will not terminate until it receives an <a href=""https://en.wikipedia.org/wiki/End-of-file#EOF_character"">EOF character</a>. To exit without
waiting for user input, call <code>process.stdin.unref()</code>.</p>",1,Others,
815,readline,,cursorTo,readline.cursorTo,"<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a
given <a href=""tty.html"">TTY</a> <code>stream</code>.</p>",4,Others,
816,readline,,moveCursor,readline.moveCursor,"<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current
position in a given <a href=""tty.html"">TTY</a> <code>stream</code>.</p>",4,,
817,rl,,question,rl.question,"<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,
waits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>
function passing the provided input as the first argument.</p>
<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been
paused.</p>
<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or
<code>undefined</code> the <code>query</code> is not written.</p>
<p>The <code>callback</code> function passed to <code>rl.question()</code> does not follow the typical
pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.
The <code>callback</code> is called with the provided answer as the only argument.</p>
<p>An error will be thrown if calling <code>rl.question()</code> after <code>rl.close()</code>.</p>
<p>Example usage:</p>
<pre><code class=""language-js"">rl.question('What is your favorite food? ', (answer) => {
  console.log(`Oh, so your favorite food is ${answer}`);
});
</code></pre>
<p>Using an <code>AbortController</code> to cancel a question.</p>
<pre><code class=""language-js"">const ac = new AbortController();
const signal = ac.signal;

rl.question('What is your favorite food? ', { signal }, (answer) => {
  console.log(`Oh, so your favorite food is ${answer}`);
});

signal.addEventListener('abort', () => {
  console.log('The food question timed out');
}, { once: true });

setTimeout(() => ac.abort(), 10000);
</code></pre>",3,,
818,repl,,start,repl.start,"<p>The <code>repl.start()</code> method creates and starts a <a href=""repl.html#class-replserver""><code>repl.REPLServer</code></a> instance.</p>
<p>If <code>options</code> is a string, then it specifies the input prompt:</p>
<pre><code class=""language-js"">const repl = require('node:repl');

// a Unix style prompt
repl.start('$ ');
</code></pre>",1,Others,
819,replServer,,defineCommand,replServer.defineCommand,"<p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands
to the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the
<code>keyword</code>. The <code>cmd</code> is either a <code>Function</code> or an <code>Object</code> with the following
properties:</p>
<ul>
<li><code>help</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Help text to be displayed when <code>.help</code> is entered (Optional).</li>
<li><code>action</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a> The function to execute, optionally accepting a single
string argument.</li>
</ul>
<p>The following example shows two new commands added to the REPL instance:</p>
<pre><code class=""language-js"">const repl = require('node:repl');

const replServer = repl.start({ prompt: '> ' });
replServer.defineCommand('sayhello', {
  help: 'Say hello',
  action(name) {
    this.clearBufferedCommand();
    console.log(`Hello, ${name}!`);
    this.displayPrompt();
  },
});
replServer.defineCommand('saybye', function saybye() {
  console.log('Goodbye!');
  this.close();
});
</code></pre>
<p>The new commands can then be used from within the REPL instance:</p>
<pre><code class=""language-console"">> .sayhello Node.js User
Hello, Node.js User!
> .saybye
Goodbye!
</code></pre>",2,,
820,replServer,,displayPrompt,replServer.displayPrompt,"<p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input
from the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>
and resuming the <code>input</code> to accept new input.</p>
<p>When multi-line input is being entered, an ellipsis is printed rather than the
'prompt'.</p>
<p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p>
<p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from
within the action function for commands registered using the
<code>replServer.defineCommand()</code> method.</p>",1,,
821,replServer,,clearBufferedCommand,replServer.clearBufferedCommand,"<p>The <code>replServer.clearBufferedCommand()</code> method clears any command that has been
buffered but not yet executed. This method is primarily intended to be
called from within the action function for commands registered using the
<code>replServer.defineCommand()</code> method.</p>",0,,
822,replServer,,parseREPLKeyword,replServer.parseREPLKeyword,"<p>An internal method used to parse and execute <code>REPLServer</code> keywords.
Returns <code>true</code> if <code>keyword</code> is a valid keyword, otherwise <code>false</code>.</p>",2,,
823,replServer,,setupHistory,replServer.setupHistory,"<p>Initializes a history log file for the REPL instance. When executing the
Node.js binary and using the command-line REPL, a history file is initialized
by default. However, this is not the case when creating a REPL
programmatically. Use this method to initialize a history log file when working
with REPL instances programmatically.</p>",2,,
824,stream,,finished,stream.finished,"<p>A readable and/or writable stream/webstream.</p>
<ul>
<li>
<p><code>options</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a></p>
<ul>
<li><code>error</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> If set to <code>false</code>, then a call to <code>emit('error', err)</code> is
not treated as finished. <strong>Default:</strong> <code>true</code>.</li>
<li><code>readable</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> When set to <code>false</code>, the callback will be called when
the stream ends even though the stream might still be readable.
<strong>Default:</strong> <code>true</code>.</li>
<li><code>writable</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> When set to <code>false</code>, the callback will be called when
the stream ends even though the stream might still be writable.
<strong>Default:</strong> <code>true</code>.</li>
<li><code>signal</code> <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> allows aborting the wait for the stream finish. The
underlying stream will <em>not</em> be aborted if the signal is aborted. The
callback will get called with an <code>AbortError</code>. All registered
listeners added by this function will also be removed.</li>
<li><code>cleanup</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> remove all registered stream listeners.
<strong>Default:</strong> <code>false</code>.</li>
</ul>
</li>
<li>
<p><code>callback</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a> A callback function that takes an optional error
argument.</p>
</li>
<li>
<p>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"" class=""type"">&lt;Function&gt;</a> A cleanup function which removes all registered
listeners.</p>
</li>
</ul>
<p>A function to get notified when a stream is no longer readable, writable
or has experienced an error or a premature close event.</p>
<pre><code class=""language-js"">const { finished } = require('node:stream');
const fs = require('node:fs');

const rs = fs.createReadStream('archive.tar');

finished(rs, (err) => {
  if (err) {
    console.error('Stream failed.', err);
  } else {
    console.log('Stream is done reading.');
  }
});

rs.resume(); // Drain the stream.
</code></pre>
<p>Especially useful in error handling scenarios where a stream is destroyed
prematurely (like an aborted HTTP request), and will not emit <code>'end'</code>
or <code>'finish'</code>.</p>
<p>The <code>finished</code> API provides <a href=""stream.html#streamfinishedstream-options"">promise version</a>.</p>
<p><code>stream.finished()</code> leaves dangling event listeners (in particular
<code>'error'</code>, <code>'end'</code>, <code>'finish'</code> and <code>'close'</code>) after <code>callback</code> has been
invoked. The reason for this is so that unexpected <code>'error'</code> events (due to
incorrect stream implementations) do not cause unexpected crashes.
If this is unwanted behavior then the returned cleanup function needs to be
invoked in the callback:</p>
<pre><code class=""language-js"">const cleanup = finished(rs, (err) => {
  cleanup();
  // ...
});
</code></pre>",1,Others,
825,stream,,pipeline,stream.pipeline,"<p>A module method to pipe between streams and generators forwarding errors and
properly cleaning up and provide a callback when the pipeline is complete.</p>
<pre><code class=""language-js"">const { pipeline } = require('node:stream');
const fs = require('node:fs');
const zlib = require('node:zlib');

// Use the pipeline API to easily pipe a series of streams
// together and get notified when the pipeline is fully done.

// A pipeline to gzip a potentially huge tar file efficiently:

pipeline(
  fs.createReadStream('archive.tar'),
  zlib.createGzip(),
  fs.createWriteStream('archive.tar.gz'),
  (err) => {
    if (err) {
      console.error('Pipeline failed.', err);
    } else {
      console.log('Pipeline succeeded.');
    }
  },
);
</code></pre>
<p>The <code>pipeline</code> API provides a <a href=""stream.html#streampipelinesource-transforms-destination-options"">promise version</a>.</p>
<p><code>stream.pipeline()</code> will call <code>stream.destroy(err)</code> on all streams except:</p>
<ul>
<li><code>Readable</code> streams which have emitted <code>'end'</code> or <code>'close'</code>.</li>
<li><code>Writable</code> streams which have emitted <code>'finish'</code> or <code>'close'</code>.</li>
</ul>
<p><code>stream.pipeline()</code> leaves dangling event listeners on the streams
after the <code>callback</code> has been invoked. In the case of reuse of streams after
failure, this can cause event listener leaks and swallowed errors. If the last
stream is readable, dangling event listeners will be removed so that the last
stream can be consumed later.</p>
<p><code>stream.pipeline()</code> closes all the streams when an error is raised.
The <code>IncomingRequest</code> usage with <code>pipeline</code> could lead to an unexpected behavior
once it would destroy the socket without sending the expected response.
See the example below:</p>
<pre><code class=""language-js"">const fs = require('node:fs');
const http = require('node:http');
const { pipeline } = require('node:stream');

const server = http.createServer((req, res) => {
  const fileStream = fs.createReadStream('./fileNotExist.txt');
  pipeline(fileStream, res, (err) => {
    if (err) {
      console.log(err); // No such file
      // this message can't be sent once `pipeline` already destroyed the socket
      return res.end('error!!!');
    }
  });
});
</code></pre>",5,38,
826,stream,,pipeline,stream.pipeline,"<p>A module method to pipe between streams and generators forwarding errors and
properly cleaning up and provide a callback when the pipeline is complete.</p>
<pre><code class=""language-js"">const { pipeline } = require('node:stream');
const fs = require('node:fs');
const zlib = require('node:zlib');

// Use the pipeline API to easily pipe a series of streams
// together and get notified when the pipeline is fully done.

// A pipeline to gzip a potentially huge tar file efficiently:

pipeline(
  fs.createReadStream('archive.tar'),
  zlib.createGzip(),
  fs.createWriteStream('archive.tar.gz'),
  (err) => {
    if (err) {
      console.error('Pipeline failed.', err);
    } else {
      console.log('Pipeline succeeded.');
    }
  },
);
</code></pre>
<p>The <code>pipeline</code> API provides a <a href=""stream.html#streampipelinesource-transforms-destination-options"">promise version</a>.</p>
<p><code>stream.pipeline()</code> will call <code>stream.destroy(err)</code> on all streams except:</p>
<ul>
<li><code>Readable</code> streams which have emitted <code>'end'</code> or <code>'close'</code>.</li>
<li><code>Writable</code> streams which have emitted <code>'finish'</code> or <code>'close'</code>.</li>
</ul>
<p><code>stream.pipeline()</code> leaves dangling event listeners on the streams
after the <code>callback</code> has been invoked. In the case of reuse of streams after
failure, this can cause event listener leaks and swallowed errors. If the last
stream is readable, dangling event listeners will be removed so that the last
stream can be consumed later.</p>
<p><code>stream.pipeline()</code> closes all the streams when an error is raised.
The <code>IncomingRequest</code> usage with <code>pipeline</code> could lead to an unexpected behavior
once it would destroy the socket without sending the expected response.
See the example below:</p>
<pre><code class=""language-js"">const fs = require('node:fs');
const http = require('node:http');
const { pipeline } = require('node:stream');

const server = http.createServer((req, res) => {
  const fileStream = fs.createReadStream('./fileNotExist.txt');
  pipeline(fileStream, res, (err) => {
    if (err) {
      console.log(err); // No such file
      // this message can't be sent once `pipeline` already destroyed the socket
      return res.end('error!!!');
    }
  });
});
</code></pre>",5,,
827,stream,,compose,stream.compose,"<p>Combines two or more streams into a <code>Duplex</code> stream that writes to the
first stream and reads from the last. Each provided stream is piped into
the next, using <code>stream.pipeline</code>. If any of the streams error then all
are destroyed, including the outer <code>Duplex</code> stream.</p>
<p>Because <code>stream.compose</code> returns a new stream that in turn can (and
should) be piped into other streams, it enables composition. In contrast,
when passing streams to <code>stream.pipeline</code>, typically the first stream is
a readable stream and the last a writable stream, forming a closed
circuit.</p>
<p>If passed a <code>Function</code> it must be a factory method taking a <code>source</code>
<code>Iterable</code>.</p>
<pre><code class=""language-mjs"">import { compose, Transform } from 'node:stream';

const removeSpaces = new Transform({
  transform(chunk, encoding, callback) {
    callback(null, String(chunk).replace(' ', ''));
  },
});

async function* toUpper(source) {
  for await (const chunk of source) {
    yield String(chunk).toUpperCase();
  }
}

let res = '';
for await (const buf of compose(removeSpaces, toUpper).end('hello world')) {
  res += buf;
}

console.log(res); // prints 'HELLOWORLD'
</code></pre>
<p><code>stream.compose</code> can be used to convert async iterables, generators and
functions into streams.</p>
<ul>
<li><code>AsyncIterable</code> converts into a readable <code>Duplex</code>. Cannot yield
<code>null</code>.</li>
<li><code>AsyncGeneratorFunction</code> converts into a readable/writable transform <code>Duplex</code>.
Must take a source <code>AsyncIterable</code> as first parameter. Cannot yield
<code>null</code>.</li>
<li><code>AsyncFunction</code> converts into a writable <code>Duplex</code>. Must return
either <code>null</code> or <code>undefined</code>.</li>
</ul>
<pre><code class=""language-mjs"">import { compose } from 'node:stream';
import { finished } from 'node:stream/promises';

// Convert AsyncIterable into readable Duplex.
const s1 = compose(async function*() {
  yield 'Hello';
  yield 'World';
}());

// Convert AsyncGenerator into transform Duplex.
const s2 = compose(async function*(source) {
  for await (const chunk of source) {
    yield String(chunk).toUpperCase();
  }
});

let res = '';

// Convert AsyncFunction into writable Duplex.
const s3 = compose(async function(source) {
  for await (const chunk of source) {
    res += chunk;
  }
});

await finished(compose(s1, s2, s3));

console.log(res); // prints 'HELLOWORLD'
</code></pre>
<p>See <a href=""stream.html#readablecomposestream-options""><code>readable.compose(stream)</code></a> for <code>stream.compose</code> as operator.</p>",1,,
828,stream,,from,stream.Readable.from,"<p>A utility method for creating readable streams out of iterators.</p>
<pre><code class=""language-js"">const { Readable } = require('node:stream');

async function * generate() {
  yield 'hello';
  yield 'streams';
}

const readable = Readable.from(generate());

readable.on('data', (chunk) => {
  console.log(chunk);
});
</code></pre>
<p>Calling <code>Readable.from(string)</code> or <code>Readable.from(buffer)</code> will not have
the strings or buffers be iterated to match the other streams semantics
for performance reasons.</p>
<p>If an <code>Iterable</code> object containing promises is passed as an argument,
it might result in unhandled rejection.</p>
<pre><code class=""language-js"">const { Readable } = require('node:stream');

Readable.from([
  new Promise((resolve) => setTimeout(resolve('1'), 1500)),
  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection
]);
</code></pre>",2,,
829,stream,,fromWeb,stream.Readable.fromWeb,,2,,
830,stream,,isDisturbed,stream.Readable.isDisturbed,<p>Returns whether the stream has been read from or cancelled.</p>,1,,
831,stream,,isErrored,stream.isErrored,<p>Returns whether the stream has encountered an error.</p>,1,,
832,stream,,isReadable,stream.isReadable,<p>Returns whether the stream is readable.</p>,1,,
833,stream,,toWeb,stream.Readable.toWeb,,2,,
834,stream,,fromWeb,stream.Writable.fromWeb,,2,,
835,stream,,toWeb,stream.Writable.toWeb,,1,,
836,stream,,from,stream.Duplex.from,"<p>A utility method for creating duplex streams.</p>
<ul>
<li><code>Stream</code> converts writable stream into writable <code>Duplex</code> and readable stream
to <code>Duplex</code>.</li>
<li><code>Blob</code> converts into readable <code>Duplex</code>.</li>
<li><code>string</code> converts into readable <code>Duplex</code>.</li>
<li><code>ArrayBuffer</code> converts into readable <code>Duplex</code>.</li>
<li><code>AsyncIterable</code> converts into a readable <code>Duplex</code>. Cannot yield
<code>null</code>.</li>
<li><code>AsyncGeneratorFunction</code> converts into a readable/writable transform
<code>Duplex</code>. Must take a source <code>AsyncIterable</code> as first parameter. Cannot yield
<code>null</code>.</li>
<li><code>AsyncFunction</code> converts into a writable <code>Duplex</code>. Must return
either <code>null</code> or <code>undefined</code></li>
<li><code>Object ({ writable, readable })</code> converts <code>readable</code> and
<code>writable</code> into <code>Stream</code> and then combines them into <code>Duplex</code> where the
<code>Duplex</code> will write to the <code>writable</code> and read from the <code>readable</code>.</li>
<li><code>Promise</code> converts into readable <code>Duplex</code>. Value <code>null</code> is ignored.</li>
<li><code>ReadableStream</code> converts into readable <code>Duplex</code>.</li>
<li><code>WritableStream</code> converts into writable <code>Duplex</code>.</li>
<li>Returns: <a href=""stream.html#class-streamduplex"" class=""type"">&lt;stream.Duplex&gt;</a></li>
</ul>
<p>If an <code>Iterable</code> object containing promises is passed as an argument,
it might result in unhandled rejection.</p>
<pre><code class=""language-js"">const { Duplex } = require('node:stream');

Duplex.from([
  new Promise((resolve) => setTimeout(resolve('1'), 1500)),
  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection
]);
</code></pre>",1,,
837,stream,,fromWeb,stream.Duplex.fromWeb,"<pre><code class=""language-mjs"">import { Duplex } from 'node:stream';
import {
  ReadableStream,
  WritableStream,
} from 'node:stream/web';

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');

for await (const chunk of duplex) {
  console.log('readable', chunk);
}
</code></pre>
<pre><code class=""language-cjs"">const { Duplex } = require('node:stream');
const {
  ReadableStream,
  WritableStream,
} = require('node:stream/web');

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');
duplex.once('readable', () => console.log('readable', duplex.read()));
</code></pre>",2,,
838,stream,,toWeb,stream.Duplex.toWeb,"<pre><code class=""language-mjs"">import { Duplex } from 'node:stream';

const duplex = Duplex({
  objectMode: true,
  read() {
    this.push('world');
    this.push(null);
  },
  write(chunk, encoding, callback) {
    console.log('writable', chunk);
    callback();
  },
});

const { readable, writable } = Duplex.toWeb(duplex);
writable.getWriter().write('hello');

const { value } = await readable.getReader().read();
console.log('readable', value);
</code></pre>
<pre><code class=""language-cjs"">const { Duplex } = require('node:stream');

const duplex = Duplex({
  objectMode: true,
  read() {
    this.push('world');
    this.push(null);
  },
  write(chunk, encoding, callback) {
    console.log('writable', chunk);
    callback();
  },
});

const { readable, writable } = Duplex.toWeb(duplex);
writable.getWriter().write('hello');

readable.getReader().read().then((result) => {
  console.log('readable', result.value);
});
</code></pre>",1,,
839,stream,,addAbortSignal,stream.addAbortSignal,"<p>A stream to attach a signal to.</p>
<p>Attaches an AbortSignal to a readable or writeable stream. This lets code
control stream destruction using an <code>AbortController</code>.</p>
<p>Calling <code>abort</code> on the <code>AbortController</code> corresponding to the passed
<code>AbortSignal</code> will behave the same way as calling <code>.destroy(new AbortError())</code>
on the stream, and <code>controller.error(new AbortError())</code> for webstreams.</p>
<pre><code class=""language-js"">const fs = require('node:fs');

const controller = new AbortController();
const read = addAbortSignal(
  controller.signal,
  fs.createReadStream(('object.json')),
);
// Later, abort the operation closing the stream
controller.abort();
</code></pre>
<p>Or using an <code>AbortSignal</code> with a readable stream as an async iterable:</p>
<pre><code class=""language-js"">const controller = new AbortController();
setTimeout(() => controller.abort(), 10_000); // set a timeout
const stream = addAbortSignal(
  controller.signal,
  fs.createReadStream(('object.json')),
);
(async () => {
  try {
    for await (const chunk of stream) {
      await process(chunk);
    }
  } catch (e) {
    if (e.name === 'AbortError') {
      // The operation was cancelled
    } else {
      throw e;
    }
  }
})();
</code></pre>
<p>Or using an <code>AbortSignal</code> with a ReadableStream:</p>
<pre><code class=""language-js"">const controller = new AbortController();
const rs = new ReadableStream({
  start(controller) {
    controller.enqueue('hello');
    controller.enqueue('world');
    controller.close();
  },
});

addAbortSignal(controller.signal, rs);

finished(rs, (err) => {
  if (err) {
    if (err.name === 'AbortError') {
      // The operation was cancelled
    }
  }
});

const reader = rs.getReader();

reader.read().then(({ value, done }) => {
  console.log(value); // hello
  console.log(done); // false
  controller.abort();
});
</code></pre>",2,,
840,stream,,getDefaultHighWaterMark,stream.getDefaultHighWaterMark,"<p>Returns the default highWaterMark used by streams.
Defaults to <code>16384</code> (16 KiB), or <code>16</code> for <code>objectMode</code>.</p>",1,,
841,stream,,setDefaultHighWaterMark,stream.setDefaultHighWaterMark,<p>Sets the default highWaterMark used by streams.</p>,2,,
842,readable,,read,readable.read,"<p>There are some cases where it is necessary to trigger a refresh of the
underlying readable stream mechanisms, without actually consuming any
data. In such cases, it is possible to call <code>readable.read(0)</code>, which will
always return <code>null</code>.</p>
<p>If the internal read buffer is below the <code>highWaterMark</code>, and the
stream is not currently reading, then calling <code>stream.read(0)</code> will trigger
a low-level <a href=""stream.html#readable_readsize""><code>stream._read()</code></a> call.</p>
<p>While most applications will almost never need to do this, there are
situations within Node.js where this is done, particularly in the
<code>Readable</code> stream class internals.</p>",0,11,
843,readable,,push,readable.push,"<p>Use of <code>readable.push('')</code> is not recommended.</p>
<p>Pushing a zero-byte string, <code>Buffer</code>, or <code>Uint8Array</code> to a stream that is not in
object mode has an interesting side effect. Because it <em>is</em> a call to
<a href=""stream.html#readablepushchunk-encoding""><code>readable.push()</code></a>, the call will end the reading process.
However, because the argument is an empty string, no data is added to the
readable buffer so there is nothing for a user to consume.</p>",0,,
844,stream,,pipeline,stream.pipeline,"<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

await pipeline(
  createReadStream('archive.tar'),
  createGzip(),
  createWriteStream('archive.tar.gz'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>To use an <code>AbortSignal</code>, pass it inside an options object, as the last argument.
When the signal is aborted, <code>destroy</code> will be called on the underlying pipeline,
with an <code>AbortError</code>.</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  const ac = new AbortController();
  const signal = ac.signal;

  setImmediate(() => ac.abort());
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
    { signal },
  );
}

run().catch(console.error); // AbortError
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

const ac = new AbortController();
const { signal } = ac;
setImmediate(() => ac.abort());
try {
  await pipeline(
    createReadStream('archive.tar'),
    createGzip(),
    createWriteStream('archive.tar.gz'),
    { signal },
  );
} catch (err) {
  console.error(err); // AbortError
}
</code></pre>
<p>The <code>pipeline</code> API also supports async generators:</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    fs.createReadStream('lowercase.txt'),
    async function* (source, { signal }) {
      source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
      for await (const chunk of source) {
        yield await processChunk(chunk, { signal });
      }
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';

await pipeline(
  createReadStream('lowercase.txt'),
  async function* (source, { signal }) {
    source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
    for await (const chunk of source) {
      yield await processChunk(chunk, { signal });
    }
  },
  createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>Remember to handle the <code>signal</code> argument passed into the async generator.
Especially in the case where the async generator is the source for the
pipeline (i.e. first argument) or the pipeline will never complete.</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    async function* ({ signal }) {
      await someLongRunningfn({ signal });
      yield 'asd';
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import fs from 'node:fs';
await pipeline(
  async function* ({ signal }) {
    await someLongRunningfn({ signal });
    yield 'asd';
  },
  fs.createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>The <code>pipeline</code> API provides <a href=""stream.html#streampipelinesource-transforms-destination-callback"">callback version</a>:</p>",5,,
845,stream,,pipeline,stream.pipeline,"<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

await pipeline(
  createReadStream('archive.tar'),
  createGzip(),
  createWriteStream('archive.tar.gz'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>To use an <code>AbortSignal</code>, pass it inside an options object, as the last argument.
When the signal is aborted, <code>destroy</code> will be called on the underlying pipeline,
with an <code>AbortError</code>.</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  const ac = new AbortController();
  const signal = ac.signal;

  setImmediate(() => ac.abort());
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
    { signal },
  );
}

run().catch(console.error); // AbortError
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

const ac = new AbortController();
const { signal } = ac;
setImmediate(() => ac.abort());
try {
  await pipeline(
    createReadStream('archive.tar'),
    createGzip(),
    createWriteStream('archive.tar.gz'),
    { signal },
  );
} catch (err) {
  console.error(err); // AbortError
}
</code></pre>
<p>The <code>pipeline</code> API also supports async generators:</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    fs.createReadStream('lowercase.txt'),
    async function* (source, { signal }) {
      source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
      for await (const chunk of source) {
        yield await processChunk(chunk, { signal });
      }
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';

await pipeline(
  createReadStream('lowercase.txt'),
  async function* (source, { signal }) {
    source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
    for await (const chunk of source) {
      yield await processChunk(chunk, { signal });
    }
  },
  createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>Remember to handle the <code>signal</code> argument passed into the async generator.
Especially in the case where the async generator is the source for the
pipeline (i.e. first argument) or the pipeline will never complete.</p>
<pre><code class=""language-cjs"">const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    async function* ({ signal }) {
      await someLongRunningfn({ signal });
      yield 'asd';
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
</code></pre>
<pre><code class=""language-mjs"">import { pipeline } from 'node:stream/promises';
import fs from 'node:fs';
await pipeline(
  async function* ({ signal }) {
    await someLongRunningfn({ signal });
    yield 'asd';
  },
  fs.createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
</code></pre>
<p>The <code>pipeline</code> API provides <a href=""stream.html#streampipelinesource-transforms-destination-callback"">callback version</a>:</p>",5,,
846,stream,,finished,stream.finished,"<pre><code class=""language-cjs"">const { finished } = require('node:stream/promises');
const fs = require('node:fs');

const rs = fs.createReadStream('archive.tar');

async function run() {
  await finished(rs);
  console.log('Stream is done reading.');
}

run().catch(console.error);
rs.resume(); // Drain the stream.
</code></pre>
<pre><code class=""language-mjs"">import { finished } from 'node:stream/promises';
import { createReadStream } from 'node:fs';

const rs = createReadStream('archive.tar');

async function run() {
  await finished(rs);
  console.log('Stream is done reading.');
}

run().catch(console.error);
rs.resume(); // Drain the stream.
</code></pre>
<p>The <code>finished</code> API also provides a <a href=""stream.html#streamfinishedstream-options-callback"">callback version</a>.</p>",2,,
847,stringDecoder,,end,stringDecoder.end,"<p>Returns any remaining input stored in the internal buffer as a string. Bytes
representing incomplete UTF-8 and UTF-16 characters will be replaced with
substitution characters appropriate for the character encoding.</p>
<p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>
is performed before returning the remaining input.
After <code>end()</code> is called, the <code>stringDecoder</code> object can be reused for new input.</p>",1,,
848,stringDecoder,,write,stringDecoder.write,"<p>Returns a decoded string, ensuring that any incomplete multibyte characters at
the end of the <code>Buffer</code>, or <code>TypedArray</code>, or <code>DataView</code> are omitted from the
returned string and stored in an internal buffer for the next call to
<code>stringDecoder.write()</code> or <code>stringDecoder.end()</code>.</p>",1,,
849,run,,run,run,"<pre><code class=""language-mjs"">import { tap } from 'node:test/reporters';
import { run } from 'node:test';
import process from 'node:process';
import path from 'node:path';

run({ files: [path.resolve('./tests/test.js')] })
  .compose(tap)
  .pipe(process.stdout);
</code></pre>
<pre><code class=""language-cjs"">const { tap } = require('node:test/reporters');
const { run } = require('node:test');
const path = require('node:path');

run({ files: [path.resolve('./tests/test.js')] })
  .compose(tap)
  .pipe(process.stdout);
</code></pre>",1,35,
850,test,,test,test,"<p>The <code>test()</code> function is the value imported from the <code>test</code> module. Each
invocation of this function results in reporting the test to the <a href=""test.html#class-testsstream"" class=""type"">&lt;TestsStream&gt;</a>.</p>
<p>The <code>TestContext</code> object passed to the <code>fn</code> argument can be used to perform
actions related to the current test. Examples include skipping the test, adding
additional diagnostic information, or creating subtests.</p>
<p><code>test()</code> returns a <code>Promise</code> that fulfills once the test completes.
if <code>test()</code> is called within a <code>describe()</code> block, it fulfills immediately.
The return value can usually be discarded for top level tests.
However, the return value from subtests should be used to prevent the parent
test from finishing first and cancelling the subtest
as shown in the following example.</p>
<pre><code class=""language-js"">test('top level test', async (t) => {
  // The setTimeout() in the following subtest would cause it to outlive its
  // parent test if 'await' is removed on the next line. Once the parent test
  // completes, it will cancel any outstanding subtests.
  await t.test('longer running subtest', async (t) => {
    return new Promise((resolve, reject) => {
      setTimeout(resolve, 1000);
    });
  });
});
</code></pre>
<p>The <code>timeout</code> option can be used to fail the test if it takes longer than
<code>timeout</code> milliseconds to complete. However, it is not a reliable mechanism for
canceling tests because a running test might block the application thread and
thus prevent the scheduled cancellation.</p>",3,Others,
851,test,,skip,test.skip,"<p>Shorthand for skipping a test,
same as <a href=""test.html#testname-options-fn""><code>test([name], { skip: true }[, fn])</code></a>.</p>",0,,
852,test,,todo,test.todo,"<p>Shorthand for marking a test as <code>TODO</code>,
same as <a href=""test.html#testname-options-fn""><code>test([name], { todo: true }[, fn])</code></a>.</p>",0,,
853,test,,only,test.only,"<p>Shorthand for marking a test as <code>only</code>,
same as <a href=""test.html#testname-options-fn""><code>test([name], { only: true }[, fn])</code></a>.</p>",0,,
854,describe,,describe,describe,"<p>The <code>describe()</code> function imported from the <code>node:test</code> module. Each
invocation of this function results in the creation of a Subtest.
After invocation of top level <code>describe</code> functions,
all top level tests and suites will execute.</p>",3,Others,
855,describe,,skip,describe.skip,"<p>Shorthand for skipping a suite, same as <a href=""test.html#describename-options-fn""><code>describe([name], { skip: true }[, fn])</code></a>.</p>",0,,
856,describe,,todo,describe.todo,"<p>Shorthand for marking a suite as <code>TODO</code>, same as
<a href=""test.html#describename-options-fn""><code>describe([name], { todo: true }[, fn])</code></a>.</p>",0,,
857,describe,,only,describe.only,"<p>Shorthand for marking a suite as <code>only</code>, same as
<a href=""test.html#describename-options-fn""><code>describe([name], { only: true }[, fn])</code></a>.</p>",0,,
858,it,,it,it,"<p>Shorthand for <a href=""test.html#testname-options-fn""><code>test()</code></a>.</p>
<p>The <code>it()</code> function is imported from the <code>node:test</code> module.</p>",0,Others,
859,it,,skip,it.skip,"<p>Shorthand for skipping a test,
same as <a href=""test.html#testname-options-fn""><code>it([name], { skip: true }[, fn])</code></a>.</p>",0,,
860,it,,todo,it.todo,"<p>Shorthand for marking a test as <code>TODO</code>,
same as <a href=""test.html#testname-options-fn""><code>it([name], { todo: true }[, fn])</code></a>.</p>",0,,
861,it,,only,it.only,"<p>Shorthand for marking a test as <code>only</code>,
same as <a href=""test.html#testname-options-fn""><code>it([name], { only: true }[, fn])</code></a>.</p>",0,,
862,before,,before,before,"<p>This function is used to create a hook running before running a suite.</p>
<pre><code class=""language-js"">describe('tests', async () => {
  before(() => console.log('about to run some test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
</code></pre>",2,40,
863,after,,after,after,"<p>This function is used to create a hook running after  running a suite.</p>
<pre><code class=""language-js"">describe('tests', async () => {
  after(() => console.log('finished running tests'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
</code></pre>",2,40,
864,beforeEach,,beforeEach,beforeEach,"<p>This function is used to create a hook running
before each subtest of the current suite.</p>
<pre><code class=""language-js"">describe('tests', async () => {
  beforeEach(() => console.log('about to run a test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
</code></pre>",2,40,
865,afterEach,,afterEach,afterEach,"<p>This function is used to create a hook running
after each subtest of the current test.</p>
<pre><code class=""language-js"">describe('tests', async () => {
  afterEach(() => console.log('finished running a test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
</code></pre>",2,38,
866,ctx,,callCount,ctx.callCount,"<p>This function returns the number of times that this mock has been invoked. This
function is more efficient than checking <code>ctx.calls.length</code> because <code>ctx.calls</code>
is a getter that creates a copy of the internal call tracking array.</p>",0,,
867,ctx,,mockImplementation,ctx.mockImplementation,"<p>This function is used to change the behavior of an existing mock.</p>
<p>The following example creates a mock function using <code>t.mock.fn()</code>, calls the
mock function, and then changes the mock implementation to a different function.</p>
<pre><code class=""language-js"">test('changes a mock behavior', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne);

  assert.strictEqual(fn(), 1);
  fn.mock.mockImplementation(addTwo);
  assert.strictEqual(fn(), 3);
  assert.strictEqual(fn(), 5);
});
</code></pre>",1,,
868,ctx,,mockImplementationOnce,ctx.mockImplementationOnce,"<p>This function is used to change the behavior of an existing mock for a single
invocation. Once invocation <code>onCall</code> has occurred, the mock will revert to
whatever behavior it would have used had <code>mockImplementationOnce()</code> not been
called.</p>
<p>The following example creates a mock function using <code>t.mock.fn()</code>, calls the
mock function, changes the mock implementation to a different function for the
next invocation, and then resumes its previous behavior.</p>
<pre><code class=""language-js"">test('changes a mock behavior once', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne);

  assert.strictEqual(fn(), 1);
  fn.mock.mockImplementationOnce(addTwo);
  assert.strictEqual(fn(), 3);
  assert.strictEqual(fn(), 4);
});
</code></pre>",2,,
869,ctx,,resetCalls,ctx.resetCalls,<p>Resets the call history of the mock function.</p>,0,,
870,ctx,,restore,ctx.restore,"<p>Resets the implementation of the mock function to its original behavior. The
mock can still be used after calling this function.</p>",0,Others,
871,mock,,fn,mock.fn,"<p>This function is used to create a mock function.</p>
<p>The following example creates a mock function that increments a counter by one
on each invocation. The <code>times</code> option is used to modify the mock behavior such
that the first two invocations add two to the counter instead of one.</p>
<pre><code class=""language-js"">test('mocks a counting function', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne, addTwo, { times: 2 });

  assert.strictEqual(fn(), 2);
  assert.strictEqual(fn(), 4);
  assert.strictEqual(fn(), 5);
  assert.strictEqual(fn(), 6);
});
</code></pre>",3,,
872,mock,,getter,mock.getter,"<p>This function is syntax sugar for <a href=""test.html#mockmethodobject-methodname-implementation-options""><code>MockTracker.method</code></a> with <code>options.getter</code>
set to <code>true</code>.</p>",0,,
873,mock,,method,mock.method,"<p>This function is used to create a mock on an existing object method. The
following example demonstrates how a mock is created on an existing object
method.</p>
<pre><code class=""language-js"">test('spies on an object method', (t) => {
  const number = {
    value: 5,
    subtract(a) {
      return this.value - a;
    },
  };

  t.mock.method(number, 'subtract');
  assert.strictEqual(number.subtract.mock.calls.length, 0);
  assert.strictEqual(number.subtract(3), 2);
  assert.strictEqual(number.subtract.mock.calls.length, 1);

  const call = number.subtract.mock.calls[0];

  assert.deepStrictEqual(call.arguments, [3]);
  assert.strictEqual(call.result, 2);
  assert.strictEqual(call.error, undefined);
  assert.strictEqual(call.target, undefined);
  assert.strictEqual(call.this, number);
});
</code></pre>",4,,
874,mock,,reset,mock.reset,"<p>This function restores the default behavior of all mocks that were previously
created by this <code>MockTracker</code> and disassociates the mocks from the
<code>MockTracker</code> instance. Once disassociated, the mocks can still be used, but the
<code>MockTracker</code> instance can no longer be used to reset their behavior or
otherwise interact with them.</p>
<p>After each test completes, this function is called on the test context's
<code>MockTracker</code>. If the global <code>MockTracker</code> is used extensively, calling this
function manually is recommended.</p>",0,,
875,mock,,restoreAll,mock.restoreAll,"<p>This function restores the default behavior of all mocks that were previously
created by this <code>MockTracker</code>. Unlike <code>mock.reset()</code>, <code>mock.restoreAll()</code> does
not disassociate the mocks from the <code>MockTracker</code> instance.</p>",0,,
876,mock,,setter,mock.setter,"<p>This function is syntax sugar for <a href=""test.html#mockmethodobject-methodname-implementation-options""><code>MockTracker.method</code></a> with <code>options.setter</code>
set to <code>true</code>.</p>",0,,
877,timers,,enable,timers.enable,"<p>Enables timer mocking for the specified timers.</p>
<ul>
<li><code>enableOptions</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> Optional configuration options for enabling timer
mocking. The following properties are supported:
<ul>
<li><code>apis</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" class=""type"">&lt;Array&gt;</a> An optional array containing the timers to mock.
The currently supported timer values are <code>'setInterval'</code>, <code>'setTimeout'</code>, <code>'setImmediate'</code>,
and <code>'Date'</code>. <strong>Default:</strong> <code>['setInterval', 'setTimeout', 'setImmediate', 'Date']</code>.
If no array is provided, all time related APIs (<code>'setInterval'</code>, <code>'clearInterval'</code>,
<code>'setTimeout'</code>, <code>'clearTimeout'</code>, and <code>'Date'</code>) will be mocked by default.</li>
<li><code>now</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"" class=""type"">&lt;Date&gt;</a> An optional number or Date object representing the
initial time (in milliseconds) to use as the value
for <code>Date.now()</code>. <strong>Default:</strong> <code>0</code>.</li>
</ul>
</li>
</ul>
<p><strong>Note:</strong> When you enable mocking for a specific timer, its associated
clear function will also be implicitly mocked.</p>
<p><strong>Note:</strong> Mocking <code>Date</code> will affect the behavior of the mocked timers
as they use the same internal clock.</p>
<p>Example usage without setting initial time:</p>
<pre><code class=""language-mjs"">import { mock } from 'node:test';
mock.timers.enable({ apis: ['setInterval'] });
</code></pre>
<pre><code class=""language-cjs"">const { mock } = require('node:test');
mock.timers.enable({ apis: ['setInterval'] });
</code></pre>
<p>The above example enables mocking for the <code>setInterval</code> timer and
implicitly mocks the <code>clearInterval</code> function. Only the <code>setInterval</code>
and <code>clearInterval</code> functions from <a href=""./timers.html"">node:timers</a>,
<a href=""./timers.html#timers-promises-api"">node:timers/promises</a>, and
<code>globalThis</code> will be mocked.</p>
<p>Example usage with initial time set</p>
<pre><code class=""language-mjs"">import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: 1000 });
</code></pre>
<pre><code class=""language-cjs"">const { mock } = require('node:test');
mock.timers.enable({ apis: ['Date'], now: 1000 });
</code></pre>
<p>Example usage with initial Date object as time set</p>
<pre><code class=""language-mjs"">import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: new Date() });
</code></pre>
<pre><code class=""language-cjs"">const { mock } = require('node:test');
mock.timers.enable({ apis: ['Date'], now: new Date() });
</code></pre>
<p>Alternatively, if you call <code>mock.timers.enable()</code> without any parameters:</p>
<p>All timers (<code>'setInterval'</code>, <code>'clearInterval'</code>, <code>'setTimeout'</code>, and <code>'clearTimeout'</code>)
will be mocked. The <code>setInterval</code>, <code>clearInterval</code>, <code>setTimeout</code>, and <code>clearTimeout</code>
functions from <code>node:timers</code>, <code>node:timers/promises</code>,
and <code>globalThis</code> will be mocked. As well as the global <code>Date</code> object.</p>",0,,
878,timers,,reset,timers.reset,"<p>This function restores the default behavior of all mocks that were previously
created by this  <code>MockTimers</code> instance and disassociates the mocks
from the  <code>MockTracker</code> instance.</p>
<p><strong>Note:</strong> After each test completes, this function is called on
the test context's  <code>MockTracker</code>.</p>
<pre><code class=""language-mjs"">import { mock } from 'node:test';
mock.timers.reset();
</code></pre>
<pre><code class=""language-cjs"">const { mock } = require('node:test');
mock.timers.reset();
</code></pre>",0,,
880,timers,,tick,timers.tick,"<p>Advances time for all mocked timers.</p>
<ul>
<li><code>milliseconds</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The amount of time, in milliseconds,
to advance the timers.</li>
</ul>
<p><strong>Note:</strong> This diverges from how <code>setTimeout</code> in Node.js behaves and accepts
only positive numbers. In Node.js, <code>setTimeout</code> with negative numbers is
only supported for web compatibility reasons.</p>
<p>The following example mocks a <code>setTimeout</code> function and
by using <code>.tick</code> advances in
time triggering all pending timers.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  context.mock.timers.enable({ apis: ['setTimeout'] });

  setTimeout(fn, 9999);

  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);

  assert.strictEqual(fn.mock.callCount(), 1);
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });

  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);

  assert.strictEqual(fn.mock.callCount(), 1);
});
</code></pre>
<p>Alternativelly, the <code>.tick</code> function can be called many times</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const twoSeconds = 3000;
  context.mock.timers.tick(twoSeconds);
  context.mock.timers.tick(twoSeconds);
  context.mock.timers.tick(twoSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const twoSeconds = 3000;
  context.mock.timers.tick(twoSeconds);
  context.mock.timers.tick(twoSeconds);
  context.mock.timers.tick(twoSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
</code></pre>
<p>Advancing time using <code>.tick</code> will also advance the time for any <code>Date</code> object
created after the mock was enabled (if <code>Date</code> was also set to be mocked).</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  setTimeout(fn, 9999);

  assert.strictEqual(fn.mock.callCount(), 0);
  assert.strictEqual(Date.now(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
  assert.strictEqual(Date.now(), 9999);
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });

  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);
  assert.strictEqual(Date.now(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
  assert.strictEqual(Date.now(), 9999);
});
</code></pre>",0,,
881,timers,,runAll,timers.runAll,"<p>Triggers all pending mocked timers immediately. If the <code>Date</code> object is also
mocked, it will also advance the <code>Date</code> object to the furthest timer's time.</p>
<p>The example below triggers all pending timers immediately,
causing them to execute without any delay.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');
const { test } = require('node:test');

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
</code></pre>
<p><strong>Note:</strong> The <code>runAll()</code> function is specifically designed for
triggering timers in the context of timer mocking.
It does not have any effect on real-time system
clocks or actual timers outside of the mocking environment.</p>",0,,
882,timers,,setTime,timers.setTime,"<p>Sets the current Unix timestamp that will be used as reference for any mocked
<code>Date</code> objects.</p>
<pre><code class=""language-mjs"">import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
</code></pre>
<pre><code class=""language-cjs"">const assert = require('node:assert');
const { test } = require('node:test');

test('setTime replaces current time', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
</code></pre>",0,,
883,context,,before,context.before,"<p>This function is used to create a hook running before
subtest of the current test.</p>",2,,
884,context,,beforeEach,context.beforeEach,"<p>This function is used to create a hook running
before each subtest of the current test.</p>
<pre><code class=""language-js"">test('top level test', async (t) => {
  t.beforeEach((t) => t.diagnostic(`about to run ${t.name}`));
  await t.test(
    'This is a subtest',
    (t) => {
      assert.ok('some relevant assertion here');
    },
  );
});
</code></pre>",2,,
885,context,,after,context.after,"<p>This function is used to create a hook that runs after the current test
finishes.</p>
<pre><code class=""language-js"">test('top level test', async (t) => {
  t.after((t) => t.diagnostic(`finished running ${t.name}`));
  assert.ok('some relevant assertion here');
});
</code></pre>",2,,
886,context,,afterEach,context.afterEach,"<p>This function is used to create a hook running
after each subtest of the current test.</p>
<pre><code class=""language-js"">test('top level test', async (t) => {
  t.afterEach((t) => t.diagnostic(`finished running ${t.name}`));
  await t.test(
    'This is a subtest',
    (t) => {
      assert.ok('some relevant assertion here');
    },
  );
});
</code></pre>",2,,
887,context,,diagnostic,context.diagnostic,"<p>This function is used to write diagnostics to the output. Any diagnostic
information is included at the end of the test's results. This function does
not return a value.</p>
<pre><code class=""language-js"">test('top level test', (t) => {
  t.diagnostic('A diagnostic message');
});
</code></pre>",1,,
888,context,,runOnly,context.runOnly,"<p>If <code>shouldRunOnlyTests</code> is truthy, the test context will only run tests that
have the <code>only</code> option set. Otherwise, all tests are run. If Node.js was not
started with the <a href=""cli.html#--test-only""><code>--test-only</code></a> command-line option, this function is a
no-op.</p>
<pre><code class=""language-js"">test('top level test', (t) => {
  // The test context can be set to run subtests with the 'only' option.
  t.runOnly(true);
  return Promise.all([
    t.test('this subtest is now skipped'),
    t.test('this subtest is run', { only: true }),
  ]);
});
</code></pre>",1,,
889,context,,skip,context.skip,"<p>This function causes the test's output to indicate the test as skipped. If
<code>message</code> is provided, it is included in the output. Calling <code>skip()</code> does
not terminate execution of the test function. This function does not return a
value.</p>
<pre><code class=""language-js"">test('top level test', (t) => {
  // Make sure to return here as well if the test contains additional logic.
  t.skip('this is skipped');
});
</code></pre>",1,,
890,context,,todo,context.todo,"<p>This function adds a <code>TODO</code> directive to the test's output. If <code>message</code> is
provided, it is included in the output. Calling <code>todo()</code> does not terminate
execution of the test function. This function does not return a value.</p>
<pre><code class=""language-js"">test('top level test', (t) => {
  // This test is marked as `TODO`
  t.todo('this is a todo');
});
</code></pre>",1,,
891,context,,test,context.test,"<p>This function is used to create subtests under the current test. This function
behaves in the same fashion as the top level <a href=""test.html#testname-options-fn""><code>test()</code></a> function.</p>
<pre><code class=""language-js"">test('top level test', async (t) => {
  await t.test(
    'This is a subtest',
    { only: false, skip: false, concurrency: 1, todo: false },
    (t) => {
      assert.ok('some relevant assertion here');
    },
  );
});
</code></pre>",3,,
892,immediate,,hasRef,immediate.hasRef,"<p>If true, the <code>Immediate</code> object will keep the Node.js event loop active.</p>",0,,
893,immediate,,ref,immediate.ref,"<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the
<code>Immediate</code> is active. Calling <code>immediate.ref()</code> multiple times will have no
effect.</p>
<p>By default, all <code>Immediate</code> objects are ""ref'ed"", making it normally unnecessary
to call <code>immediate.ref()</code> unless <code>immediate.unref()</code> had been called previously.</p>",0,,
894,immediate,,unref,immediate.unref,"<p>When called, the active <code>Immediate</code> object will not require the Node.js event
loop to remain active. If there is no other activity keeping the event loop
running, the process may exit before the <code>Immediate</code> object's callback is
invoked. Calling <code>immediate.unref()</code> multiple times will have no effect.</p>",0,,
896,timeout,,close,timeout.close,<p>Cancels the timeout.</p>,0,Others,
897,timeout,,hasRef,timeout.hasRef,"<p>If true, the <code>Timeout</code> object will keep the Node.js event loop active.</p>",0,,
898,timeout,,ref,timeout.ref,"<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the
<code>Timeout</code> is active. Calling <code>timeout.ref()</code> multiple times will have no effect.</p>
<p>By default, all <code>Timeout</code> objects are ""ref'ed"", making it normally unnecessary
to call <code>timeout.ref()</code> unless <code>timeout.unref()</code> had been called previously.</p>",0,,
899,timeout,,refresh,timeout.refresh,"<p>Sets the timer's start time to the current time, and reschedules the timer to
call its callback at the previously specified duration adjusted to the current
time. This is useful for refreshing a timer without allocating a new
JavaScript object.</p>
<p>Using this on a timer that has already called its callback will reactivate the
timer.</p>",0,,
900,timeout,,unref,timeout.unref,"<p>When called, the active <code>Timeout</code> object will not require the Node.js event loop
to remain active. If there is no other activity keeping the event loop running,
the process may exit before the <code>Timeout</code> object's callback is invoked. Calling
<code>timeout.unref()</code> multiple times will have no effect.</p>",0,,
906,clearImmediate,,clearImmediate,clearImmediate,"<p>Cancels an <code>Immediate</code> object created by <a href=""timers.html#setimmediatecallback-args""><code>setImmediate()</code></a>.</p>",1,35,
907,clearInterval,,clearInterval,clearInterval,"<p>Cancels a <code>Timeout</code> object created by <a href=""timers.html#setintervalcallback-delay-args""><code>setInterval()</code></a>.</p>",1,30,
908,clearTimeout,,clearTimeout,clearTimeout,"<p>Cancels a <code>Timeout</code> object created by <a href=""timers.html#settimeoutcallback-delay-args""><code>setTimeout()</code></a>.</p>",1,Others,
909,timersPromises,,setTimeout,timersPromises.setTimeout,"<pre><code class=""language-mjs"">import {
  setTimeout,
} from 'timers/promises';

const res = await setTimeout(100, 'result');

console.log(res);  // Prints 'result'
</code></pre>
<pre><code class=""language-cjs"">const {
  setTimeout,
} = require('node:timers/promises');

setTimeout(100, 'result').then((res) => {
  console.log(res);  // Prints 'result'
});
</code></pre>",3,,
910,timersPromises,,setImmediate,timersPromises.setImmediate,"<pre><code class=""language-mjs"">import {
  setImmediate,
} from 'timers/promises';

const res = await setImmediate('result');

console.log(res);  // Prints 'result'
</code></pre>
<pre><code class=""language-cjs"">const {
  setImmediate,
} = require('node:timers/promises');

setImmediate('result').then((res) => {
  console.log(res);  // Prints 'result'
});
</code></pre>",2,,
911,timersPromises,,setInterval,timersPromises.setInterval,"<p>Returns an async iterator that generates values in an interval of <code>delay</code> ms.
If <code>ref</code> is <code>true</code>, you need to call <code>next()</code> of async iterator explicitly
or implicitly to keep the event loop alive.</p>
<ul>
<li><code>delay</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> The number of milliseconds to wait between iterations.
<strong>Default:</strong> <code>1</code>.</li>
<li><code>value</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types"" class=""type"">&lt;any&gt;</a> A value with which the iterator returns.</li>
<li><code>options</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a>
<ul>
<li><code>ref</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a> Set to <code>false</code> to indicate that the scheduled <code>Timeout</code>
between iterations should not require the Node.js event loop to
remain active.
<strong>Default:</strong> <code>true</code>.</li>
<li><code>signal</code> <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> An optional <code>AbortSignal</code> that can be used to
cancel the scheduled <code>Timeout</code> between operations.</li>
</ul>
</li>
</ul>
<pre><code class=""language-mjs"">import {
  setInterval,
} from 'timers/promises';

const interval = 100;
for await (const startTime of setInterval(interval, Date.now())) {
  const now = Date.now();
  console.log(now);
  if ((now - startTime) > 1000)
    break;
}
console.log(Date.now());
</code></pre>
<pre><code class=""language-cjs"">const {
  setInterval,
} = require('node:timers/promises');
const interval = 100;

(async function() {
  for await (const startTime of setInterval(interval, Date.now())) {
    const now = Date.now();
    console.log(now);
    if ((now - startTime) > 1000)
      break;
  }
  console.log(Date.now());
})();
</code></pre>",0,,
912,timersPromises,,wait,timersPromises.scheduler.wait,"<p>An experimental API defined by the <a href=""https://github.com/WICG/scheduling-apis"">Scheduling APIs</a> draft specification
being developed as a standard Web Platform API.</p>
<p>Calling <code>timersPromises.scheduler.wait(delay, options)</code> is roughly equivalent
to calling <code>timersPromises.setTimeout(delay, undefined, options)</code> except that
the <code>ref</code> option is not supported.</p>
<pre><code class=""language-mjs"">import { scheduler } from 'node:timers/promises';

await scheduler.wait(1000); // Wait one second before continuing
</code></pre>",2,,
913,timersPromises,,yield,timersPromises.scheduler.yield,"<p>An experimental API defined by the <a href=""https://github.com/WICG/scheduling-apis"">Scheduling APIs</a> draft specification
being developed as a standard Web Platform API.</p>
<p>Calling <code>timersPromises.scheduler.yield()</code> is equivalent to calling
<code>timersPromises.setImmediate()</code> with no arguments.</p>",0,,
914,tls,,checkServerIdentity,tls.checkServerIdentity,"<p>Verifies the certificate <code>cert</code> is issued to <code>hostname</code>.</p>
<p>Returns <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"" class=""type"">&lt;Error&gt;</a> object, populating it with <code>reason</code>, <code>host</code>, and <code>cert</code> on
failure. On success, returns <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type"" class=""type"">&lt;undefined&gt;</a>.</p>
<p>This function is intended to be used in combination with the
<code>checkServerIdentity</code> option that can be passed to <a href=""tls.html#tlsconnectoptions-callback""><code>tls.connect()</code></a> and as
such operates on a <a href=""tls.html#certificate-object"">certificate object</a>. For other purposes, consider using
<a href=""crypto.html#x509checkhostname-options""><code>x509.checkHost()</code></a> instead.</p>
<p>This function can be overwritten by providing an alternative function as the
<code>options.checkServerIdentity</code> option that is passed to <code>tls.connect()</code>. The
overwriting function can call <code>tls.checkServerIdentity()</code> of course, to augment
the checks done with additional verification.</p>
<p>This function is only called if the certificate passed all other checks, such as
being issued by trusted CA (<code>options.ca</code>).</p>
<p>Earlier versions of Node.js incorrectly accepted certificates for a given
<code>hostname</code> if a matching <code>uniformResourceIdentifier</code> subject alternative name
was present (see <a href=""https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44531"">CVE-2021-44531</a>). Applications that wish to accept
<code>uniformResourceIdentifier</code> subject alternative names can use a custom
<code>options.checkServerIdentity</code> function that implements the desired behavior.</p>",2,Others,
915,tls,,connect,tls.connect,"<p>The <code>callback</code> function, if specified, will be added as a listener for the
<a href=""tls.html#event-secureconnect""><code>'secureConnect'</code></a> event.</p>
<p><code>tls.connect()</code> returns a <a href=""tls.html#class-tlstlssocket""><code>tls.TLSSocket</code></a> object.</p>
<p>Unlike the <code>https</code> API, <code>tls.connect()</code> does not enable the
SNI (Server Name Indication) extension by default, which may cause some
servers to return an incorrect certificate or reject the connection
altogether. To enable SNI, set the <code>servername</code> option in addition
to <code>host</code>.</p>
<p>The following illustrates a client for the echo server example from
<a href=""tls.html#tlscreateserveroptions-secureconnectionlistener""><code>tls.createServer()</code></a>:</p>
<pre><code class=""language-js"">// Assumes an echo server that is listening on port 8000.
const tls = require('node:tls');
const fs = require('node:fs');

const options = {
  // Necessary only if the server requires client certificate authentication.
  key: fs.readFileSync('client-key.pem'),
  cert: fs.readFileSync('client-cert.pem'),

  // Necessary only if the server uses a self-signed certificate.
  ca: [ fs.readFileSync('server-cert.pem') ],

  // Necessary only if the server's cert isn't for ""localhost"".
  checkServerIdentity: () => { return null; },
};

const socket = tls.connect(8000, options, () => {
  console.log('client connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  process.stdin.pipe(socket);
  process.stdin.resume();
});
socket.setEncoding('utf8');
socket.on('data', (data) => {
  console.log(data);
});
socket.on('end', () => {
  console.log('server ends connection');
});
</code></pre>",2,22,
918,tls,,createSecureContext,tls.createSecureContext,"<p><a href=""tls.html#tlscreateserveroptions-secureconnectionlistener""><code>tls.createServer()</code></a> sets the default value of the <code>honorCipherOrder</code> option
to <code>true</code>, other APIs that create secure contexts leave it unset.</p>
<p><a href=""tls.html#tlscreateserveroptions-secureconnectionlistener""><code>tls.createServer()</code></a> uses a 128 bit truncated SHA1 hash value generated
from <code>process.argv</code> as the default value of the <code>sessionIdContext</code> option, other
APIs that create secure contexts have no default value.</p>
<p>The <code>tls.createSecureContext()</code> method creates a <code>SecureContext</code> object. It is
usable as an argument to several <code>tls</code> APIs, such as <a href=""tls.html#serveraddcontexthostname-context""><code>server.addContext()</code></a>,
but has no public methods. The <a href=""tls.html#class-tlsserver""><code>tls.Server</code></a> constructor and the
<a href=""tls.html#tlscreateserveroptions-secureconnectionlistener""><code>tls.createServer()</code></a> method do not support the <code>secureContext</code> option.</p>
<p>A key is <em>required</em> for ciphers that use certificates. Either <code>key</code> or
<code>pfx</code> can be used to provide it.</p>
<p>If the <code>ca</code> option is not given, then Node.js will default to using
<a href=""https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt"">Mozilla's publicly trusted list of CAs</a>.</p>
<p>Custom DHE parameters are discouraged in favor of the new <code>dhparam: 'auto'</code>
option. When set to <code>'auto'</code>, well-known DHE parameters of sufficient strength
will be selected automatically. Otherwise, if necessary, <code>openssl dhparam</code> can
be used to create custom parameters. The key length must be greater than or
equal to 1024 bits or else an error will be thrown. Although 1024 bits is
permissible, use 2048 bits or larger for stronger security.</p>",1,Ohters,
919,tls,,createSecurePair,tls.createSecurePair,"<p>Creates a new secure pair object with two streams, one of which reads and writes
the encrypted data and the other of which reads and writes the cleartext data.
Generally, the encrypted stream is piped to/from an incoming encrypted data
stream and the cleartext one is used as a replacement for the initial encrypted
stream.</p>
<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and
<code>encrypted</code> stream properties.</p>
<p>Using <code>cleartext</code> has the same API as <a href=""tls.html#class-tlstlssocket""><code>tls.TLSSocket</code></a>.</p>
<p>The <code>tls.createSecurePair()</code> method is now deprecated in favor of
<code>tls.TLSSocket()</code>. For example, the code:</p>
<pre><code class=""language-js"">pair = tls.createSecurePair(/* ... */);
pair.encrypted.pipe(socket);
socket.pipe(pair.encrypted);
</code></pre>
<p>can be replaced by:</p>
<pre><code class=""language-js"">secureSocket = tls.TLSSocket(socket, options);
</code></pre>
<p>where <code>secureSocket</code> has the same API as <code>pair.cleartext</code>.</p>",5,Others,
920,tls,,createServer,tls.createServer,"<p>Creates a new <a href=""tls.html#class-tlsserver""><code>tls.Server</code></a>. The <code>secureConnectionListener</code>, if provided, is
automatically set as a listener for the <a href=""tls.html#event-secureconnection""><code>'secureConnection'</code></a> event.</p>
<p>The <code>ticketKeys</code> options is automatically shared between <code>node:cluster</code> module
workers.</p>
<p>The following illustrates a simple echo server:</p>
<pre><code class=""language-js"">const tls = require('node:tls');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem'),

  // This is necessary only if using client certificate authentication.
  requestCert: true,

  // This is necessary only if the client uses a self-signed certificate.
  ca: [ fs.readFileSync('client-cert.pem') ],
};

const server = tls.createServer(options, (socket) => {
  console.log('server connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  socket.write('welcome!\n');
  socket.setEncoding('utf8');
  socket.pipe(socket);
});
server.listen(8000, () => {
  console.log('server bound');
});
</code></pre>
<p>The server can be tested by connecting to it using the example client from
<a href=""tls.html#tlsconnectoptions-callback""><code>tls.connect()</code></a>.</p>",2,22,
921,tls,,getCiphers,tls.getCiphers,"<p>Returns an array with the names of the supported TLS ciphers. The names are
lower-case for historical reasons, but must be uppercased to be used in
the <code>ciphers</code> option of <a href=""tls.html#tlscreatesecurecontextoptions""><code>tls.createSecureContext()</code></a>.</p>
<p>Not all supported ciphers are enabled by default. See
<a href=""tls.html#modifying-the-default-tls-cipher-suite"">Modifying the default TLS cipher suite</a>.</p>
<p>Cipher names that start with <code>'tls_'</code> are for TLSv1.3, all the others are for
TLSv1.2 and below.</p>
<pre><code class=""language-js"">console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]
</code></pre>",0,Others,
922,server,,addContext,server.addContext,"<p>The <code>server.addContext()</code> method adds a secure context that will be used if
the client request's SNI name matches the supplied <code>hostname</code> (or wildcard).</p>
<p>When there are multiple matching contexts, the most recently added one is
used.</p>",2,Others,
923,server,,address,server.address,"<p>Returns the bound address, the address family name, and port of the
server as reported by the operating system. See <a href=""net.html#serveraddress""><code>net.Server.address()</code></a> for
more information.</p>",0,26,
924,server,,close,server.close,"<p>The <code>server.close()</code> method stops the server from accepting new connections.</p>
<p>This function operates asynchronously. The <code>'close'</code> event will be emitted
when the server has no more open connections.</p>",1,Others,
925,server,,getTicketKeys,server.getTicketKeys,"<p>Returns the session ticket keys.</p>
<p>See <a href=""tls.html#session-resumption"">Session Resumption</a> for more information.</p>",0,Others,
926,server,,listen,server.listen,"<p>Starts the server listening for encrypted connections.
This method is identical to <a href=""net.html#serverlisten""><code>server.listen()</code></a> from <a href=""net.html#class-netserver""><code>net.Server</code></a>.</p>",0,27,
927,server,,setSecureContext,server.setSecureContext,"<p>The <code>server.setSecureContext()</code> method replaces the secure context of an
existing server. Existing connections to the server are not interrupted.</p>",1,Others,
928,server,,setTicketKeys,server.setTicketKeys,"<p>Sets the session ticket keys.</p>
<p>Changes to the ticket keys are effective only for future server connections.
Existing or currently pending server connections will use the previous keys.</p>
<p>See <a href=""tls.html#session-resumption"">Session Resumption</a> for more information.</p>",1,Others,
929,tlsSocket,,address,tlsSocket.address,"<p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the
underlying socket as reported by the operating system:
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>.</p>",0,Others,
930,tlsSocket,,disableRenegotiation,tlsSocket.disableRenegotiation,"<p>Disables TLS renegotiation for this <code>TLSSocket</code> instance. Once called, attempts
to renegotiate will trigger an <code>'error'</code> event on the <code>TLSSocket</code>.</p>",0,Others,
931,tlsSocket,,enableTrace,tlsSocket.enableTrace,"<p>When enabled, TLS packet trace information is written to <code>stderr</code>. This can be
used to debug TLS connection problems.</p>
<p>The format of the output is identical to the output of
<code>openssl s_client -trace</code> or <code>openssl s_server -trace</code>. While it is produced by
OpenSSL's <code>SSL_trace()</code> function, the format is undocumented, can change
without notice, and should not be relied on.</p>",0,Others,
932,tlsSocket,,exportKeyingMaterial,tlsSocket.exportKeyingMaterial,"<p>Keying material is used for validations to prevent different kind of attacks in
network protocols, for example in the specifications of IEEE 802.1X.</p>
<p>Example</p>
<pre><code class=""language-js"">const keyingMaterial = tlsSocket.exportKeyingMaterial(
  128,
  'client finished');

/*
 Example return value of keyingMaterial:
 &#x3C;Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9
    12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91
    74 ef 2c ... 78 more bytes>
*/
</code></pre>
<p>See the OpenSSL <a href=""https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html""><code>SSL_export_keying_material</code></a> documentation for more
information.</p>",3,Others,
933,tlsSocket,,getCertificate,tlsSocket.getCertificate,"<p>Returns an object representing the local certificate. The returned object has
some properties corresponding to the fields of the certificate.</p>
<p>See <a href=""tls.html#tlssocketgetpeercertificatedetailed""><code>tls.TLSSocket.getPeerCertificate()</code></a> for an example of the certificate
structure.</p>
<p>If there is no local certificate, an empty object will be returned. If the
socket has been destroyed, <code>null</code> will be returned.</p>",0,Others,
934,tlsSocket,,getCipher,tlsSocket.getCipher,"<p>Returns an object containing information on the negotiated cipher suite.</p>
<p>For example, a TLSv1.2 protocol with AES256-SHA cipher:</p>
<pre><code class=""language-json"">{
    ""name"": ""AES256-SHA"",
    ""standardName"": ""TLS_RSA_WITH_AES_256_CBC_SHA"",
    ""version"": ""SSLv3""
}
</code></pre>
<p>See
<a href=""https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name.html"">SSL_CIPHER_get_name</a>
for more information.</p>",0,Others,
935,tlsSocket,,getEphemeralKeyInfo,tlsSocket.getEphemeralKeyInfo,"<p>Returns an object representing the type, name, and size of parameter of
an ephemeral key exchange in <a href=""tls.html#perfect-forward-secrecy"">perfect forward secrecy</a> on a client
connection. It returns an empty object when the key exchange is not
ephemeral. As this is only supported on a client socket; <code>null</code> is returned
if called on a server socket. The supported types are <code>'DH'</code> and <code>'ECDH'</code>. The
<code>name</code> property is available only when type is <code>'ECDH'</code>.</p>
<p>For example: <code>{ type: 'ECDH', name: 'prime256v1', size: 256 }</code>.</p>",0,Others,
936,tlsSocket,,getFinished,tlsSocket.getFinished,"<p>As the <code>Finished</code> messages are message digests of the complete handshake
(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can
be used for external authentication procedures when the authentication
provided by SSL/TLS is not desired or is not enough.</p>
<p>Corresponds to the <code>SSL_get_finished</code> routine in OpenSSL and may be used
to implement the <code>tls-unique</code> channel binding from <a href=""https://tools.ietf.org/html/rfc5929"">RFC 5929</a>.</p>",0,Others,
937,tlsSocket,,getPeerCertificate,tlsSocket.getPeerCertificate,"<p>Returns an object representing the peer's certificate. If the peer does not
provide a certificate, an empty object will be returned. If the socket has been
destroyed, <code>null</code> will be returned.</p>
<p>If the full certificate chain was requested, each certificate will include an
<code>issuerCertificate</code> property containing an object representing its issuer's
certificate.</p>",1,Others,
938,tlsSocket,,getPeerFinished,tlsSocket.getPeerFinished,"<p>As the <code>Finished</code> messages are message digests of the complete handshake
(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can
be used for external authentication procedures when the authentication
provided by SSL/TLS is not desired or is not enough.</p>
<p>Corresponds to the <code>SSL_get_peer_finished</code> routine in OpenSSL and may be used
to implement the <code>tls-unique</code> channel binding from <a href=""https://tools.ietf.org/html/rfc5929"">RFC 5929</a>.</p>",0,Others,
939,tlsSocket,,getPeerX509Certificate,tlsSocket.getPeerX509Certificate,"<p>Returns the peer certificate as an <a href=""crypto.html#class-x509certificate"" class=""type"">&lt;X509Certificate&gt;</a> object.</p>
<p>If there is no peer certificate, or the socket has been destroyed,
<code>undefined</code> will be returned.</p>",0,Others,
940,tlsSocket,,getProtocol,tlsSocket.getProtocol,"<p>Returns a string containing the negotiated SSL/TLS protocol version of the
current connection. The value <code>'unknown'</code> will be returned for connected
sockets that have not completed the handshaking process. The value <code>null</code> will
be returned for server sockets or disconnected client sockets.</p>
<p>Protocol versions are:</p>
<ul>
<li><code>'SSLv3'</code></li>
<li><code>'TLSv1'</code></li>
<li><code>'TLSv1.1'</code></li>
<li><code>'TLSv1.2'</code></li>
<li><code>'TLSv1.3'</code></li>
</ul>
<p>See the OpenSSL <a href=""https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html""><code>SSL_get_version</code></a> documentation for more information.</p>",0,Others,
941,tlsSocket,,getSession,tlsSocket.getSession,"<p>Returns the TLS session data or <code>undefined</code> if no session was
negotiated. On the client, the data can be provided to the <code>session</code> option of
<a href=""tls.html#tlsconnectoptions-callback""><code>tls.connect()</code></a> to resume the connection. On the server, it may be useful
for debugging.</p>
<p>See <a href=""tls.html#session-resumption"">Session Resumption</a> for more information.</p>
<p>Note: <code>getSession()</code> works only for TLSv1.2 and below. For TLSv1.3, applications
must use the <a href=""tls.html#event-session""><code>'session'</code></a> event (it also works for TLSv1.2 and below).</p>",1,Others,
942,tlsSocket,,getSharedSigalgs,tlsSocket.getSharedSigalgs,"<p>See
<a href=""https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs.html"">SSL_get_shared_sigalgs</a>
for more information.</p>",0,Others,
943,tlsSocket,,getTLSTicket,tlsSocket.getTLSTicket,"<p>For a client, returns the TLS session ticket if one is available, or
<code>undefined</code>. For a server, always returns <code>undefined</code>.</p>
<p>It may be useful for debugging.</p>
<p>See <a href=""tls.html#session-resumption"">Session Resumption</a> for more information.</p>",1,Others,
944,tlsSocket,,getX509Certificate,tlsSocket.getX509Certificate,"<p>Returns the local certificate as an <a href=""crypto.html#class-x509certificate"" class=""type"">&lt;X509Certificate&gt;</a> object.</p>
<p>If there is no local certificate, or the socket has been destroyed,
<code>undefined</code> will be returned.</p>",0,Others,
945,tlsSocket,,isSessionReused,tlsSocket.isSessionReused,"<p>See <a href=""tls.html#session-resumption"">Session Resumption</a> for more information.</p>",0,Others,
946,tlsSocket,,renegotiate,tlsSocket.renegotiate,"<p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.
Upon completion, the <code>callback</code> function will be passed a single argument
that is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>
<p>This method can be used to request a peer's certificate after the secure
connection has been established.</p>
<p>When running as the server, the socket will be destroyed with an error after
<code>handshakeTimeout</code> timeout.</p>
<p>For TLSv1.3, renegotiation cannot be initiated, it is not supported by the
protocol.</p>",2,Others,
947,tlsSocket,,setMaxSendFragment,tlsSocket.setMaxSendFragment,"<p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.
Returns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>
<p>Smaller fragment sizes decrease the buffering latency on the client: larger
fragments are buffered by the TLS layer until the entire fragment is received
and its integrity is verified; large fragments can span multiple roundtrips
and their processing can be delayed due to packet loss or reordering. However,
smaller fragments add extra TLS framing bytes and CPU overhead, which may
decrease overall server throughput.</p>",1,Others,
948,trace_events,,createTracing,trace_events.createTracing,"<p>Creates and returns a <code>Tracing</code> object for the given set of <code>categories</code>.</p>
<pre><code class=""language-js"">const trace_events = require('node:trace_events');
const categories = ['node.perf', 'node.async_hooks'];
const tracing = trace_events.createTracing({ categories });
tracing.enable();
// do stuff
tracing.disable();
</code></pre>",1,Others,
949,trace_events,,getEnabledCategories,trace_events.getEnabledCategories,"<p>Returns a comma-separated list of all currently-enabled trace event
categories. The current set of enabled trace event categories is determined
by the <em>union</em> of all currently-enabled <code>Tracing</code> objects and any categories
enabled using the <code>--trace-event-categories</code> flag.</p>
<p>Given the file <code>test.js</code> below, the command
<code>node --trace-event-categories node.perf test.js</code> will print
<code>'node.async_hooks,node.perf'</code> to the console.</p>
<pre><code class=""language-js"">const trace_events = require('node:trace_events');
const t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });
const t2 = trace_events.createTracing({ categories: ['node.perf'] });
const t3 = trace_events.createTracing({ categories: ['v8'] });

t1.enable();
t2.enable();

console.log(trace_events.getEnabledCategories());
</code></pre>
<h2>Examples</h2>",0,Others,
950,tracing,,disable,tracing.disable,"<p>Disables this <code>Tracing</code> object.</p>
<p>Only trace event categories <em>not</em> covered by other enabled <code>Tracing</code> objects
and <em>not</em> specified by the <code>--trace-event-categories</code> flag will be disabled.</p>
<pre><code class=""language-js"">const trace_events = require('node:trace_events');
const t1 = trace_events.createTracing({ categories: ['node', 'v8'] });
const t2 = trace_events.createTracing({ categories: ['node.perf', 'node'] });
t1.enable();
t2.enable();

// Prints 'node,node.perf,v8'
console.log(trace_events.getEnabledCategories());

t2.disable(); // Will only disable emission of the 'node.perf' category

// Prints 'node,v8'
console.log(trace_events.getEnabledCategories());
</code></pre>",0,,
951,tracing,,enable,tracing.enable,"<p>Enables this <code>Tracing</code> object for the set of categories covered by the
<code>Tracing</code> object.</p>",0,,
952,tty,,isatty,tty.isatty,"<p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with
a TTY and <code>false</code> if it is not, including whenever <code>fd</code> is not a non-negative
integer.</p>",1,Others,
953,readStream,,setRawMode,readStream.setRawMode,"<p>Allows configuration of <code>tty.ReadStream</code> so that it operates as a raw device.</p>
<p>When in raw mode, input is always available character-by-character, not
including modifiers. Additionally, all special processing of characters by the
terminal is disabled, including echoing input
characters. <kbd>Ctrl</kbd>+<kbd>C</kbd> will no longer cause a <code>SIGINT</code> when
in this mode.</p>",1,Others,
954,writeStream,,clearLine,writeStream.clearLine,"<p><code>writeStream.clearLine()</code> clears the current line of this <code>WriteStream</code> in a
direction identified by <code>dir</code>.</p>",2,Others,
955,writeStream,,clearScreenDown,writeStream.clearScreenDown,"<p><code>writeStream.clearScreenDown()</code> clears this <code>WriteStream</code> from the current
cursor down.</p>",1,Others,
956,writeStream,,cursorTo,writeStream.cursorTo,"<p><code>writeStream.cursorTo()</code> moves this <code>WriteStream</code>'s cursor to the specified
position.</p>",3,Others,
957,writeStream,,getColorDepth,writeStream.getColorDepth,"<p>Returns:</p>
<ul>
<li><code>1</code> for 2,</li>
<li><code>4</code> for 16,</li>
<li><code>8</code> for 256,</li>
<li><code>24</code> for 16,777,216 colors supported.</li>
</ul>
<p>Use this to determine what colors the terminal supports. Due to the nature of
colors in terminals it is possible to either have false positives or false
negatives. It depends on process information and the environment variables that
may lie about what terminal is used.
It is possible to pass in an <code>env</code> object to simulate the usage of a specific
terminal. This can be useful to check how specific environment settings behave.</p>
<p>To enforce a specific color support, use one of the below environment settings.</p>
<ul>
<li>2 colors: <code>FORCE_COLOR = 0</code> (Disables colors)</li>
<li>16 colors: <code>FORCE_COLOR = 1</code></li>
<li>256 colors: <code>FORCE_COLOR = 2</code></li>
<li>16,777,216 colors: <code>FORCE_COLOR = 3</code></li>
</ul>
<p>Disabling color support is also possible by using the <code>NO_COLOR</code> and
<code>NODE_DISABLE_COLORS</code> environment variables.</p>",1,Others,
958,writeStream,,getWindowSize,writeStream.getWindowSize,"<p><code>writeStream.getWindowSize()</code> returns the size of the TTY
corresponding to this <code>WriteStream</code>. The array is of the type
<code>[numColumns, numRows]</code> where <code>numColumns</code> and <code>numRows</code> represent the number
of columns and rows in the corresponding TTY.</p>",0,Others,
959,writeStream,,hasColors,writeStream.hasColors,"<p>Returns <code>true</code> if the <code>writeStream</code> supports at least as many colors as provided
in <code>count</code>. Minimum support is 2 (black and white).</p>
<p>This has the same false positives and negatives as described in
<a href=""tty.html#writestreamgetcolordepthenv""><code>writeStream.getColorDepth()</code></a>.</p>
<pre><code class=""language-js"">process.stdout.hasColors();
// Returns true or false depending on if `stdout` supports at least 16 colors.
process.stdout.hasColors(256);
// Returns true or false depending on if `stdout` supports at least 256 colors.
process.stdout.hasColors({ TMUX: '1' });
// Returns true.
process.stdout.hasColors(2 ** 24, { TMUX: '1' });
// Returns false (the environment setting pretends to support 2 ** 8 colors).
</code></pre>",2,Others,
960,writeStream,,moveCursor,writeStream.moveCursor,"<p><code>writeStream.moveCursor()</code> moves this <code>WriteStream</code>'s cursor <em>relative</em> to its
current position.</p>",3,Others,
961,socket,,addMembership,socket.addMembership,"<p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code> and
<code>multicastInterface</code> using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the
<code>multicastInterface</code> argument is not specified, the operating system will choose
one interface and will add membership to it. To add membership to every
available interface, call <code>addMembership</code> multiple times, once per interface.</p>
<p>When called on an unbound socket, this method will implicitly bind to a random
port, listening on all interfaces.</p>
<p>When sharing a UDP socket across multiple <code>cluster</code> workers, the
<code>socket.addMembership()</code> function must be called only once or an
<code>EADDRINUSE</code> error will occur:</p>
<pre><code class=""language-mjs"">import cluster from 'node:cluster';
import dgram from 'node:dgram';

if (cluster.isPrimary) {
  cluster.fork(); // Works ok.
  cluster.fork(); // Fails with EADDRINUSE.
} else {
  const s = dgram.createSocket('udp4');
  s.bind(1234, () => {
    s.addMembership('224.0.0.114');
  });
}
</code></pre>
<pre><code class=""language-cjs"">const cluster = require('node:cluster');
const dgram = require('node:dgram');

if (cluster.isPrimary) {
  cluster.fork(); // Works ok.
  cluster.fork(); // Fails with EADDRINUSE.
} else {
  const s = dgram.createSocket('udp4');
  s.bind(1234, () => {
    s.addMembership('224.0.0.114');
  });
}
</code></pre>",2,Others,
962,socket,,addSourceSpecificMembership,socket.addSourceSpecificMembership,"<p>Tells the kernel to join a source-specific multicast channel at the given
<code>sourceAddress</code> and <code>groupAddress</code>, using the <code>multicastInterface</code> with the
<code>IP_ADD_SOURCE_MEMBERSHIP</code> socket option. If the <code>multicastInterface</code> argument
is not specified, the operating system will choose one interface and will add
membership to it. To add membership to every available interface, call
<code>socket.addSourceSpecificMembership()</code> multiple times, once per interface.</p>
<p>When called on an unbound socket, this method will implicitly bind to a random
port, listening on all interfaces.</p>",3,Others,
963,socket,,address,socket.address,"<p>Returns an object containing the address information for a socket.
For UDP sockets, this object will contain <code>address</code>, <code>family</code>, and <code>port</code>
properties.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>",0,26,
964,socket,,bind,socket.bind,"<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram
messages on a named <code>port</code> and optional <code>address</code>. If <code>port</code> is not
specified or is <code>0</code>, the operating system will attempt to bind to a
random port. If <code>address</code> is not specified, the operating system will
attempt to listen on all addresses. Once binding is complete, a
<code>'listening'</code> event is emitted and the optional <code>callback</code> function is
called.</p>
<p>Specifying both a <code>'listening'</code> event listener and passing a
<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very
useful.</p>
<p>A bound datagram socket keeps the Node.js process running to receive
datagram messages.</p>
<p>If binding fails, an <code>'error'</code> event is generated. In rare case (e.g.
attempting to bind with a closed socket), an <a href=""errors.html#class-error""><code>Error</code></a> may be thrown.</p>
<p>Example of a UDP server listening on port 41234:</p>
<pre><code class=""language-mjs"">import dgram from 'node:dgram';

const server = dgram.createSocket('udp4');

server.on('error', (err) => {
  console.error(`server error:\n${err.stack}`);
  server.close();
});

server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});

server.on('listening', () => {
  const address = server.address();
  console.log(`server listening ${address.address}:${address.port}`);
});

server.bind(41234);
// Prints: server listening 0.0.0.0:41234
</code></pre>
<pre><code class=""language-cjs"">const dgram = require('node:dgram');
const server = dgram.createSocket('udp4');

server.on('error', (err) => {
  console.error(`server error:\n${err.stack}`);
  server.close();
});

server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});

server.on('listening', () => {
  const address = server.address();
  console.log(`server listening ${address.address}:${address.port}`);
});

server.bind(41234);
// Prints: server listening 0.0.0.0:41234
</code></pre>",3,27,
965,socket,,bind,socket.bind,"<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram
messages on a named <code>port</code> and optional <code>address</code> that are passed as
properties of an <code>options</code> object passed as the first argument. If
<code>port</code> is not specified or is <code>0</code>, the operating system will attempt
to bind to a random port. If <code>address</code> is not specified, the operating
system will attempt to listen on all addresses. Once binding is
complete, a <code>'listening'</code> event is emitted and the optional <code>callback</code>
function is called.</p>
<p>The <code>options</code> object may contain a <code>fd</code> property. When a <code>fd</code> greater
than <code>0</code> is set, it will wrap around an existing socket with the given
file descriptor. In this case, the properties of <code>port</code> and <code>address</code>
will be ignored.</p>
<p>Specifying both a <code>'listening'</code> event listener and passing a
<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very
useful.</p>
<p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is
used when using <code>dgram.Socket</code> objects with the <a href=""cluster.html""><code>cluster</code></a> module. When
<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same
underlying socket handle allowing connection handling duties to be shared.
When <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted
port sharing results in an error.</p>
<p>A bound datagram socket keeps the Node.js process running to receive
datagram messages.</p>
<p>If binding fails, an <code>'error'</code> event is generated. In rare case (e.g.
attempting to bind with a closed socket), an <a href=""errors.html#class-error""><code>Error</code></a> may be thrown.</p>
<p>An example socket listening on an exclusive port is shown below.</p>
<pre><code class=""language-js"">socket.bind({
  address: 'localhost',
  port: 8000,
  exclusive: true,
});
</code></pre>",2,27,
966,socket,,close,socket.close,"<p>Close the underlying socket and stop listening for data on it. If a callback is
provided, it is added as a listener for the <a href=""dgram.html#event-close""><code>'close'</code></a> event.</p>",1,Others,
967,socket[Symbol,,[Symbol.asyncDispose],socket[Symbol.asyncDispose],"<p>Calls <a href=""dgram.html#socketclosecallback""><code>socket.close()</code></a> and returns a promise that fulfills when the
socket has closed.</p>",0,,
968,socket,,connect,socket.connect,"<p>Associates the <code>dgram.Socket</code> to a remote address and port. Every
message sent by this handle is automatically sent to that destination. Also,
the socket will only receive messages from that remote peer.
Trying to call <code>connect()</code> on an already connected socket will result
in an <a href=""errors.html#err_socket_dgram_is_connected""><code>ERR_SOCKET_DGRAM_IS_CONNECTED</code></a> exception. If <code>address</code> is not
provided, <code>'127.0.0.1'</code> (for <code>udp4</code> sockets) or <code>'::1'</code> (for <code>udp6</code> sockets)
will be used by default. Once the connection is complete, a <code>'connect'</code> event
is emitted and the optional <code>callback</code> function is called. In case of failure,
the <code>callback</code> is called or, failing this, an <code>'error'</code> event is emitted.</p>",3,27,
969,socket,,disconnect,socket.disconnect,"<p>A synchronous function that disassociates a connected <code>dgram.Socket</code> from
its remote address. Trying to call <code>disconnect()</code> on an unbound or already
disconnected socket will result in an <a href=""errors.html#err_socket_dgram_not_connected""><code>ERR_SOCKET_DGRAM_NOT_CONNECTED</code></a>
exception.</p>",0,Others,
970,socket,,dropMembership,socket.dropMembership,"<p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the
<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the
kernel when the socket is closed or the process terminates, so most apps will
never have reason to call this.</p>
<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to
drop membership on all valid interfaces.</p>",2,Others,
971,socket,,dropSourceSpecificMembership,socket.dropSourceSpecificMembership,"<p>Instructs the kernel to leave a source-specific multicast channel at the given
<code>sourceAddress</code> and <code>groupAddress</code> using the <code>IP_DROP_SOURCE_MEMBERSHIP</code>
socket option. This method is automatically called by the kernel when the
socket is closed or the process terminates, so most apps will never have
reason to call this.</p>
<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to
drop membership on all valid interfaces.</p>",3,Others,
972,socket,,getRecvBufferSize,socket.getRecvBufferSize,"<p>This method throws <a href=""errors.html#err_socket_buffer_size""><code>ERR_SOCKET_BUFFER_SIZE</code></a> if called on an unbound socket.</p>",0,Others,
973,socket,,getSendBufferSize,socket.getSendBufferSize,"<p>This method throws <a href=""errors.html#err_socket_buffer_size""><code>ERR_SOCKET_BUFFER_SIZE</code></a> if called on an unbound socket.</p>",0,Others,
974,socket,,getSendQueueSize,socket.getSendQueueSize,,0,Others,
975,socket,,getSendQueueCount,socket.getSendQueueCount,,0,Others,
976,socket,,ref,socket.ref,"<p>By default, binding a socket will cause it to block the Node.js process from
exiting as long as the socket is open. The <code>socket.unref()</code> method can be used
to exclude the socket from the reference counting that keeps the Node.js
process active. The <code>socket.ref()</code> method adds the socket back to the reference
counting and restores the default behavior.</p>
<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>
<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be
chained.</p>",0,Others,
977,socket,,remoteAddress,socket.remoteAddress,"<p>Returns an object containing the <code>address</code>, <code>family</code>, and <code>port</code> of the remote
endpoint. This method throws an <a href=""errors.html#err_socket_dgram_not_connected""><code>ERR_SOCKET_DGRAM_NOT_CONNECTED</code></a> exception
if the socket is not connected.</p>",0,26,
978,socket,,send,socket.send,"<p>Broadcasts a datagram on the socket.
For connectionless sockets, the destination <code>port</code> and <code>address</code> must be
specified. Connected sockets, on the other hand, will use their associated
remote endpoint, so the <code>port</code> and <code>address</code> arguments must not be set.</p>
<p>The <code>msg</code> argument contains the message to be sent.
Depending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>,
any <code>TypedArray</code> or a <code>DataView</code>,
the <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the
message begins and the number of bytes in the message, respectively.
If <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>
with <code>'utf8'</code> encoding. With messages that
contain multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with
respect to <a href=""buffer.html#static-method-bufferbytelengthstring-encoding"">byte length</a> and not the character position.
If <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p>
<p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name,
DNS will be used to resolve the address of the host. If <code>address</code> is not
provided or otherwise nullish, <code>'127.0.0.1'</code> (for <code>udp4</code> sockets) or <code>'::1'</code>
(for <code>udp6</code> sockets) will be used by default.</p>
<p>If the socket has not been previously bound with a call to <code>bind</code>, the socket
is assigned a random port number and is bound to the ""all interfaces"" address
(<code>'0.0.0.0'</code> for <code>udp4</code> sockets, <code>'::0'</code> for <code>udp6</code> sockets.)</p>
<p>An optional <code>callback</code> function may be specified to as a way of reporting
DNS errors or for determining when it is safe to reuse the <code>buf</code> object.
DNS lookups delay the time to send for at least one tick of the
Node.js event loop.</p>
<p>The only way to know for sure that the datagram has been sent is by using a
<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be
passed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,
the error is emitted as an <code>'error'</code> event on the <code>socket</code> object.</p>
<p>Offset and length are optional but both <em>must</em> be set if either are used.
They are supported only when the first argument is a <code>Buffer</code>, a <code>TypedArray</code>,
or a <code>DataView</code>.</p>
<p>This method throws <a href=""errors.html#err_socket_bad_port""><code>ERR_SOCKET_BAD_PORT</code></a> if called on an unbound socket.</p>
<p>Example of sending a UDP packet to a port on <code>localhost</code>;</p>
<pre><code class=""language-mjs"">import dgram from 'node:dgram';
import { Buffer } from 'node:buffer';

const message = Buffer.from('Some bytes');
const client = dgram.createSocket('udp4');
client.send(message, 41234, 'localhost', (err) => {
  client.close();
});
</code></pre>
<pre><code class=""language-cjs"">const dgram = require('node:dgram');
const { Buffer } = require('node:buffer');

const message = Buffer.from('Some bytes');
const client = dgram.createSocket('udp4');
client.send(message, 41234, 'localhost', (err) => {
  client.close();
});
</code></pre>
<p>Example of sending a UDP packet composed of multiple buffers to a port on
<code>127.0.0.1</code>;</p>
<pre><code class=""language-mjs"">import dgram from 'node:dgram';
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('Some ');
const buf2 = Buffer.from('bytes');
const client = dgram.createSocket('udp4');
client.send([buf1, buf2], 41234, (err) => {
  client.close();
});
</code></pre>
<pre><code class=""language-cjs"">const dgram = require('node:dgram');
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('Some ');
const buf2 = Buffer.from('bytes');
const client = dgram.createSocket('udp4');
client.send([buf1, buf2], 41234, (err) => {
  client.close();
});
</code></pre>
<p>Sending multiple buffers might be faster or slower depending on the
application and operating system. Run benchmarks to
determine the optimal strategy on a case-by-case basis. Generally speaking,
however, sending multiple buffers is faster.</p>
<p>Example of sending a UDP packet using a socket connected to a port on
<code>localhost</code>:</p>
<pre><code class=""language-mjs"">import dgram from 'node:dgram';
import { Buffer } from 'node:buffer';

const message = Buffer.from('Some bytes');
const client = dgram.createSocket('udp4');
client.connect(41234, 'localhost', (err) => {
  client.send(message, (err) => {
    client.close();
  });
});
</code></pre>
<pre><code class=""language-cjs"">const dgram = require('node:dgram');
const { Buffer } = require('node:buffer');

const message = Buffer.from('Some bytes');
const client = dgram.createSocket('udp4');
client.connect(41234, 'localhost', (err) => {
  client.send(message, (err) => {
    client.close();
  });
});
</code></pre>",6,23,
979,socket,,setBroadcast,socket.setBroadcast,"<p>Sets or clears the <code>SO_BROADCAST</code> socket option. When set to <code>true</code>, UDP
packets may be sent to a local interface's broadcast address.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>",1,23,
980,socket,,setMulticastInterface,socket.setMulticastInterface,"<p><em>All references to scope in this section are referring to
<a href=""https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses"">IPv6 Zone Indices</a>, which are defined by <a href=""https://tools.ietf.org/html/rfc4007"">RFC 4007</a>. In string form, an IP
with a scope index is written as <code>'IP%scope'</code> where scope is an interface name
or interface number.</em></p>
<p>Sets the default outgoing multicast interface of the socket to a chosen
interface or back to system interface selection. The <code>multicastInterface</code> must
be a valid string representation of an IP from the socket's family.</p>
<p>For IPv4 sockets, this should be the IP configured for the desired physical
interface. All packets sent to multicast on the socket will be sent on the
interface determined by the most recent successful use of this call.</p>
<p>For IPv6 sockets, <code>multicastInterface</code> should include a scope to indicate the
interface as in the examples that follow. In IPv6, individual <code>send</code> calls can
also use explicit scope in addresses, so only packets sent to a multicast
address without specifying an explicit scope are affected by the most recent
successful use of this call.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>
<h4>Example: IPv6 outgoing multicast interface</h4>
<p>On most systems, where scope format uses the interface name:</p>
<pre><code class=""language-js"">const socket = dgram.createSocket('udp6');

socket.bind(1234, () => {
  socket.setMulticastInterface('::%eth1');
});
</code></pre>
<p>On Windows, where scope format uses an interface number:</p>
<pre><code class=""language-js"">const socket = dgram.createSocket('udp6');

socket.bind(1234, () => {
  socket.setMulticastInterface('::%2');
});
</code></pre>
<h4>Example: IPv4 outgoing multicast interface</h4>
<p>All systems use an IP of the host on the desired physical interface:</p>
<pre><code class=""language-js"">const socket = dgram.createSocket('udp4');

socket.bind(1234, () => {
  socket.setMulticastInterface('10.0.0.2');
});
</code></pre>",1,Others,
981,socket,,setMulticastLoopback,socket.setMulticastLoopback,"<p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option. When set to <code>true</code>,
multicast packets will also be received on the local interface.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>",1,Others,
982,socket,,setMulticastTTL,socket.setMulticastTTL,"<p>Sets the <code>IP_MULTICAST_TTL</code> socket option. While TTL generally stands for
""Time to Live"", in this context it specifies the number of IP hops that a
packet is allowed to travel through, specifically for multicast traffic. Each
router or gateway that forwards a packet decrements the TTL. If the TTL is
decremented to 0 by a router, it will not be forwarded.</p>
<p>The <code>ttl</code> argument may be between 0 and 255. The default on most systems is <code>1</code>.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>",1,Others,
983,socket,,setRecvBufferSize,socket.setRecvBufferSize,"<p>Sets the <code>SO_RCVBUF</code> socket option. Sets the maximum socket receive buffer
in bytes.</p>
<p>This method throws <a href=""errors.html#err_socket_buffer_size""><code>ERR_SOCKET_BUFFER_SIZE</code></a> if called on an unbound socket.</p>",1,Others,
984,socket,,setSendBufferSize,socket.setSendBufferSize,"<p>Sets the <code>SO_SNDBUF</code> socket option. Sets the maximum socket send buffer
in bytes.</p>
<p>This method throws <a href=""errors.html#err_socket_buffer_size""><code>ERR_SOCKET_BUFFER_SIZE</code></a> if called on an unbound socket.</p>",1,Others,
985,socket,,setTTL,socket.setTTL,"<p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for ""Time to Live"",
in this context it specifies the number of IP hops that a packet is allowed to
travel through. Each router or gateway that forwards a packet decrements the
TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.
Changing TTL values is typically done for network probes or when multicasting.</p>
<p>The <code>ttl</code> argument may be between 1 and 255. The default on most systems
is 64.</p>
<p>This method throws <code>EBADF</code> if called on an unbound socket.</p>",1,Others,
986,socket,,unref,socket.unref,"<p>By default, binding a socket will cause it to block the Node.js process from
exiting as long as the socket is open. The <code>socket.unref()</code> method can be used
to exclude the socket from the reference counting that keeps the Node.js
process active, allowing the process to exit even if the socket is still
listening.</p>
<p>Calling <code>socket.unref()</code> multiple times will have no additional effect.</p>
<p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be
chained.</p>",0,Others,
987,dgram,,createSocket,dgram.createSocket,"<p>Creates a <code>dgram.Socket</code> object. Once the socket is created, calling
<a href=""dgram.html#socketbindport-address-callback""><code>socket.bind()</code></a> will instruct the socket to begin listening for datagram
messages. When <code>address</code> and <code>port</code> are not passed to <a href=""dgram.html#socketbindport-address-callback""><code>socket.bind()</code></a> the
method will bind the socket to the ""all interfaces"" address on a random port
(it does the right thing for both <code>udp4</code> and <code>udp6</code> sockets). The bound address
and port can be retrieved using <a href=""dgram.html#socketaddress""><code>socket.address().address</code></a> and
<a href=""dgram.html#socketaddress""><code>socket.address().port</code></a>.</p>
<p>If the <code>signal</code> option is enabled, calling <code>.abort()</code> on the corresponding
<code>AbortController</code> is similar to calling <code>.close()</code> on the socket:</p>
<pre><code class=""language-js"">const controller = new AbortController();
const { signal } = controller;
const server = dgram.createSocket({ type: 'udp4', signal });
server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});
// Later, when you want to close the server.
controller.abort();
</code></pre>",2,22,
988,dgram,,createSocket,dgram.createSocket,"<p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>.</p>
<p>Once the socket is created, calling <a href=""dgram.html#socketbindport-address-callback""><code>socket.bind()</code></a> will instruct the
socket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are
not passed to <a href=""dgram.html#socketbindport-address-callback""><code>socket.bind()</code></a> the method will bind the socket to the ""all
interfaces"" address on a random port (it does the right thing for both <code>udp4</code>
and <code>udp6</code> sockets). The bound address and port can be retrieved using
<a href=""dgram.html#socketaddress""><code>socket.address().address</code></a> and <a href=""dgram.html#socketaddress""><code>socket.address().port</code></a>.</p>",2,22,
989,url,,domainToASCII,url.domainToASCII,"<p>Returns the <a href=""https://tools.ietf.org/html/rfc5891#section-4.4"">Punycode</a> ASCII serialization of the <code>domain</code>. If <code>domain</code> is an
invalid domain, the empty string is returned.</p>
<p>It performs the inverse operation to <a href=""url.html#urldomaintounicodedomain""><code>url.domainToUnicode()</code></a>.</p>
<pre><code class=""language-mjs"">import url from 'node:url';

console.log(url.domainToASCII('español.com'));
// Prints xn--espaol-zwa.com
console.log(url.domainToASCII('中文.com'));
// Prints xn--fiq228c.com
console.log(url.domainToASCII('xn--iñvalid.com'));
// Prints an empty string
</code></pre>
<pre><code class=""language-cjs"">const url = require('node:url');

console.log(url.domainToASCII('español.com'));
// Prints xn--espaol-zwa.com
console.log(url.domainToASCII('中文.com'));
// Prints xn--fiq228c.com
console.log(url.domainToASCII('xn--iñvalid.com'));
// Prints an empty string
</code></pre>",1,,
990,url,,domainToUnicode,url.domainToUnicode,"<p>Returns the Unicode serialization of the <code>domain</code>. If <code>domain</code> is an invalid
domain, the empty string is returned.</p>
<p>It performs the inverse operation to <a href=""url.html#urldomaintoasciidomain""><code>url.domainToASCII()</code></a>.</p>
<pre><code class=""language-mjs"">import url from 'node:url';

console.log(url.domainToUnicode('xn--espaol-zwa.com'));
// Prints español.com
console.log(url.domainToUnicode('xn--fiq228c.com'));
// Prints 中文.com
console.log(url.domainToUnicode('xn--iñvalid.com'));
// Prints an empty string
</code></pre>
<pre><code class=""language-cjs"">const url = require('node:url');

console.log(url.domainToUnicode('xn--espaol-zwa.com'));
// Prints español.com
console.log(url.domainToUnicode('xn--fiq228c.com'));
// Prints 中文.com
console.log(url.domainToUnicode('xn--iñvalid.com'));
// Prints an empty string
</code></pre>",1,,
991,url,,fileURLToPath,url.fileURLToPath,"<p>This function ensures the correct decodings of percent-encoded characters as
well as ensuring a cross-platform valid absolute path string.</p>
<pre><code class=""language-mjs"">import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);

new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/
fileURLToPath('file:///C:/path/');         // Correct:   C:\path\ (Windows)

new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt
fileURLToPath('file://nas/foo.txt');       // Correct:   \\nas\foo.txt (Windows)

new URL('file:///你好.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt
fileURLToPath('file:///你好.txt');         // Correct:   /你好.txt (POSIX)

new URL('file:///hello world').pathname;   // Incorrect: /hello%20world
fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)
</code></pre>
<pre><code class=""language-cjs"">const { fileURLToPath } = require('node:url');
new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/
fileURLToPath('file:///C:/path/');         // Correct:   C:\path\ (Windows)

new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt
fileURLToPath('file://nas/foo.txt');       // Correct:   \\nas\foo.txt (Windows)

new URL('file:///你好.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt
fileURLToPath('file:///你好.txt');         // Correct:   /你好.txt (POSIX)

new URL('file:///hello world').pathname;   // Incorrect: /hello%20world
fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)
</code></pre>",1,Others,
992,url,,format,url.format,"<p>Returns a customizable serialization of a URL <code>String</code> representation of a
<a href=""url.html#the-whatwg-url-api"">WHATWG URL</a> object.</p>
<p>The URL object has both a <code>toString()</code> method and <code>href</code> property that return
string serializations of the URL. These are not, however, customizable in
any way. The <code>url.format(URL[, options])</code> method allows for basic customization
of the output.</p>
<pre><code class=""language-mjs"">import url from 'node:url';
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(myURL.href);
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(myURL.toString());
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));
// Prints 'https://測試/?abc'
</code></pre>
<pre><code class=""language-cjs"">const url = require('node:url');
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(myURL.href);
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(myURL.toString());
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));
// Prints 'https://測試/?abc'
</code></pre>",2,Others,
993,url,,pathToFileURL,url.pathToFileURL,"<p>This function ensures that <code>path</code> is resolved absolutely, and that the URL
control characters are correctly encoded when converting into a File URL.</p>
<pre><code class=""language-mjs"">import { pathToFileURL } from 'node:url';

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
</code></pre>
<pre><code class=""language-cjs"">const { pathToFileURL } = require('node:url');
new URL(__filename);                  // Incorrect: throws (POSIX)
new URL(__filename);                  // Incorrect: C:\... (Windows)
pathToFileURL(__filename);            // Correct:   file:///... (POSIX)
pathToFileURL(__filename);            // Correct:   file:///C:/... (Windows)

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
</code></pre>",1,Others,
994,url,,urlToHttpOptions,url.urlToHttpOptions,"<p>This utility function converts a URL object into an ordinary options object as
expected by the <a href=""http.html#httprequestoptions-callback""><code>http.request()</code></a> and <a href=""https.html#httpsrequestoptions-callback""><code>https.request()</code></a> APIs.</p>
<pre><code class=""language-mjs"">import { urlToHttpOptions } from 'node:url';
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(urlToHttpOptions(myURL));
/*
{
  protocol: 'https:',
  hostname: 'xn--g6w251d',
  hash: '#foo',
  search: '?abc',
  pathname: '/',
  path: '/?abc',
  href: 'https://a:b@xn--g6w251d/?abc#foo',
  auth: 'a:b'
}
*/
</code></pre>
<pre><code class=""language-cjs"">const { urlToHttpOptions } = require('node:url');
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(urlToHttpOptions(myURL));
/*
{
  protocol: 'https:',
  hostname: 'xn--g6w251d',
  hash: '#foo',
  search: '?abc',
  pathname: '/',
  path: '/?abc',
  href: 'https://a:b@xn--g6w251d/?abc#foo',
  auth: 'a:b'
}
*/
</code></pre>",1,,
995,url,,toString,url.toString,"<p>The <code>toString()</code> method on the <code>URL</code> object returns the serialized URL. The
value returned is equivalent to that of <a href=""url.html#urlhref""><code>url.href</code></a> and <a href=""url.html#urltojson""><code>url.toJSON()</code></a>.</p>",0,Others,
996,url,,toJSON,url.toJSON,"<p>The <code>toJSON()</code> method on the <code>URL</code> object returns the serialized URL. The
value returned is equivalent to that of <a href=""url.html#urlhref""><code>url.href</code></a> and
<a href=""url.html#urltostring""><code>url.toString()</code></a>.</p>
<p>This method is automatically called when an <code>URL</code> object is serialized
with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify""><code>JSON.stringify()</code></a>.</p>
<pre><code class=""language-js"">const myURLs = [
  new URL('https://www.example.com'),
  new URL('https://test.example.org'),
];
console.log(JSON.stringify(myURLs));
// Prints [""https://www.example.com/"",""https://test.example.org/""]
</code></pre>",0,29,
997,URL,,createObjectURL,URL.createObjectURL,"<p>Creates a <code>'blob:nodedata:...'</code> URL string that represents the given <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a>
object and can be used to retrieve the <code>Blob</code> later.</p>
<pre><code class=""language-js"">const {
  Blob,
  resolveObjectURL,
} = require('node:buffer');

const blob = new Blob(['hello']);
const id = URL.createObjectURL(blob);

// later...

const otherBlob = resolveObjectURL(id);
console.log(otherBlob.size);
</code></pre>
<p>The data stored by the registered <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> will be retained in memory until
<code>URL.revokeObjectURL()</code> is called to remove it.</p>
<p><code>Blob</code> objects are registered within the current thread. If using Worker
Threads, <code>Blob</code> objects registered within one Worker will not be available
to other workers or the main thread.</p>",1,Others,
998,URL,,revokeObjectURL,URL.revokeObjectURL,"<p>Removes the stored <a href=""buffer.html#class-blob"" class=""type"">&lt;Blob&gt;</a> identified by the given ID. Attempting to revoke a
ID that isn't registered will silently fail.</p>",1,Others,
999,URL,,canParse,URL.canParse,"<p>Checks if an <code>input</code> relative to the <code>base</code> can be parsed to a <code>URL</code>.</p>
<pre><code class=""language-js"">const isValid = URL.canParse('/foo', 'https://example.org/'); // true

const isNotValid = URL.canParse('/foo'); // false
</code></pre>",2,25,
1000,urlSearchParams,,append,urlSearchParams.append,<p>Append a new name-value pair to the query string.</p>,2,Others,
1001,urlSearchParams,,delete,urlSearchParams.delete,"<p>If <code>value</code> is provided, removes all name-value pairs
where name is <code>name</code> and value is <code>value</code>..</p>
<p>If <code>value</code> is not provided, removes all name-value pairs whose name is <code>name</code>.</p>",2,Others,
1002,urlSearchParams,,entries,urlSearchParams.entries,"<p>Returns an ES6 <code>Iterator</code> over each of the name-value pairs in the query.
Each item of the iterator is a JavaScript <code>Array</code>. The first item of the <code>Array</code>
is the <code>name</code>, the second item of the <code>Array</code> is the <code>value</code>.</p>
<p>Alias for <a href=""url.html#urlsearchparamssymboliterator""><code>urlSearchParams[@@iterator]()</code></a>.</p>",0,Others,
1003,urlSearchParams,,forEach,urlSearchParams.forEach,"<p>Iterates over each name-value pair in the query and invokes the given function.</p>
<pre><code class=""language-js"">const myURL = new URL('https://example.org/?a=b&#x26;c=d');
myURL.searchParams.forEach((value, name, searchParams) => {
  console.log(name, value, myURL.searchParams === searchParams);
});
// Prints:
//   a b true
//   c d true
</code></pre>",2,Others,
1004,urlSearchParams,,get,urlSearchParams.get,"<p>Returns the value of the first name-value pair whose name is <code>name</code>. If there
are no such pairs, <code>null</code> is returned.</p>",1,Others,
1005,urlSearchParams,,getAll,urlSearchParams.getAll,"<p>Returns the values of all name-value pairs whose name is <code>name</code>. If there are
no such pairs, an empty array is returned.</p>",1,,
1006,urlSearchParams,,has,urlSearchParams.has,"<p>Checks if the <code>URLSearchParams</code> object contains key-value pair(s) based on
<code>name</code> and an optional <code>value</code> argument.</p>
<p>If <code>value</code> is provided, returns <code>true</code> when name-value pair with
same <code>name</code> and <code>value</code> exists.</p>
<p>If <code>value</code> is not provided, returns <code>true</code> if there is at least one name-value
pair whose name is <code>name</code>.</p>",2,Others,
1007,urlSearchParams,,keys,urlSearchParams.keys,"<p>Returns an ES6 <code>Iterator</code> over the names of each name-value pair.</p>
<pre><code class=""language-js"">const params = new URLSearchParams('foo=bar&#x26;foo=baz');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   foo
</code></pre>",0,,
1008,urlSearchParams,,set,urlSearchParams.set,"<p>Sets the value in the <code>URLSearchParams</code> object associated with <code>name</code> to
<code>value</code>. If there are any pre-existing name-value pairs whose names are <code>name</code>,
set the first such pair's value to <code>value</code> and remove all others. If not,
append the name-value pair to the query string.</p>
<pre><code class=""language-js"">const params = new URLSearchParams();
params.append('foo', 'bar');
params.append('foo', 'baz');
params.append('abc', 'def');
console.log(params.toString());
// Prints foo=bar&#x26;foo=baz&#x26;abc=def

params.set('foo', 'def');
params.set('xyz', 'opq');
console.log(params.toString());
// Prints foo=def&#x26;abc=def&#x26;xyz=opq
</code></pre>",2,Others,
1009,urlSearchParams,,sort,urlSearchParams.sort,"<p>Sort all existing name-value pairs in-place by their names. Sorting is done
with a <a href=""https://en.wikipedia.org/wiki/Sorting_algorithm#Stability"">stable sorting algorithm</a>, so relative order between name-value pairs
with the same name is preserved.</p>
<p>This method can be used, in particular, to increase cache hits.</p>
<pre><code class=""language-js"">const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');
params.sort();
console.log(params.toString());
// Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search
</code></pre>",0,Others,
1010,urlSearchParams,,toString,urlSearchParams.toString,"<p>Returns the search parameters serialized as a string, with characters
percent-encoded where necessary.</p>",0,Others,
1011,urlSearchParams,,values,urlSearchParams.values,<p>Returns an ES6 <code>Iterator</code> over the values of each name-value pair.</p>,0,,
1012,urlSearchParams[Symbol,,[Symbol.iterator],urlSearchParams[Symbol.iterator],"<p>Returns an ES6 <code>Iterator</code> over each of the name-value pairs in the query string.
Each item of the iterator is a JavaScript <code>Array</code>. The first item of the <code>Array</code>
is the <code>name</code>, the second item of the <code>Array</code> is the <code>value</code>.</p>
<p>Alias for <a href=""url.html#urlsearchparamsentries""><code>urlSearchParams.entries()</code></a>.</p>
<pre><code class=""language-js"">const params = new URLSearchParams('foo=bar&#x26;xyz=baz');
for (const [name, value] of params) {
  console.log(name, value);
}
// Prints:
//   foo bar
//   xyz baz
</code></pre>",0,,
1013,url,,format,url.format,"<p>The <code>url.format()</code> method returns a formatted URL string derived from
<code>urlObject</code>.</p>
<pre><code class=""language-js"">const url = require('node:url');
url.format({
  protocol: 'https',
  hostname: 'example.com',
  pathname: '/some/path',
  query: {
    page: 1,
    format: 'json',
  },
});

// => 'https://example.com/some/path?page=1&#x26;format=json'
</code></pre>
<p>If <code>urlObject</code> is not an object or a string, <code>url.format()</code> will throw a
<a href=""errors.html#class-typeerror""><code>TypeError</code></a>.</p>
<p>The formatting process operates as follows:</p>
<ul>
<li>A new empty string <code>result</code> is created.</li>
<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>
<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an
<a href=""errors.html#class-error""><code>Error</code></a> is thrown.</li>
<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII
colon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>
<li>If either of the following conditions is true, then the literal string <code>//</code>
will be appended to <code>result</code>:
<ul>
<li><code>urlObject.slashes</code> property is true;</li>
<li><code>urlObject.protocol</code> begins with <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or
<code>file</code>;</li>
</ul>
</li>
<li>If the value of the <code>urlObject.auth</code> property is truthy, and either
<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of
<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>
followed by the literal string <code>@</code>.</li>
<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:
<ul>
<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>
<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,
an <a href=""errors.html#class-error""><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>
is not <code>undefined</code>:
<ul>
<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>
<li>The value of <code>urlObject.port</code> is coerced to a string and appended to
<code>result</code>.</li>
</ul>
</li>
</ul>
</li>
<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of
<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>
<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:
<ul>
<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash
(<code>/</code>), then the literal string <code>'/'</code> is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an
<a href=""errors.html#class-error""><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>
property is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>
followed by the output of calling the <a href=""querystring.html""><code>querystring</code></a> module's <code>stringify()</code>
method passing the value of <code>urlObject.query</code>.</li>
<li>Otherwise, if <code>urlObject.search</code> is a string:
<ul>
<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question
mark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an
<a href=""errors.html#class-error""><code>Error</code></a> is thrown.</li>
<li>If the <code>urlObject.hash</code> property is a string:
<ul>
<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)
character, the literal string <code>#</code> is appended to <code>result</code>.</li>
<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>
</ul>
</li>
<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a
string, an <a href=""errors.html#class-error""><code>Error</code></a> is thrown.</li>
<li><code>result</code> is returned.</li>
</ul>",1,,
1014,url,,parse,url.parse,"<p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL
object.</p>
<p>A <code>TypeError</code> is thrown if <code>urlString</code> is not a string.</p>
<p>A <code>URIError</code> is thrown if the <code>auth</code> property is present but cannot be decoded.</p>
<p><code>url.parse()</code> uses a lenient, non-standard algorithm for parsing URL
strings. It is prone to security issues such as <a href=""https://hackerone.com/reports/678487"">host name spoofing</a>
and incorrect handling of usernames and passwords. Do not use with untrusted
input. CVEs are not issued for <code>url.parse()</code> vulnerabilities. Use the
<a href=""url.html#the-whatwg-url-api"">WHATWG URL</a> API instead.</p>",3,Others,
1015,url,,resolve,url.resolve,"<p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a
manner similar to that of a web browser resolving an anchor tag.</p>
<pre><code class=""language-js"">const url = require('node:url');
url.resolve('/one/two/three', 'four');         // '/one/two/four'
url.resolve('http://example.com/', '/one');    // 'http://example.com/one'
url.resolve('http://example.com/one', '/two'); // 'http://example.com/two'
</code></pre>
<p>To achieve the same result using the WHATWG URL API:</p>
<pre><code class=""language-js"">function resolve(from, to) {
  const resolvedUrl = new URL(to, new URL(from, 'resolve://'));
  if (resolvedUrl.protocol === 'resolve:') {
    // `from` is a relative URL.
    const { pathname, search, hash } = resolvedUrl;
    return pathname + search + hash;
  }
  return resolvedUrl.toString();
}

resolve('/one/two/three', 'four');         // '/one/two/four'
resolve('http://example.com/', '/one');    // 'http://example.com/one'
resolve('http://example.com/one', '/two'); // 'http://example.com/two'
</code></pre>
<p><a id=""whatwg-percent-encoding""></a></p>",2,Others,
1016,util,,callbackify,util.callbackify,"<p>Takes an <code>async</code> function (or a function that returns a <code>Promise</code>) and returns a
function following the error-first callback style, i.e. taking
an <code>(err, value) => ...</code> callback as the last argument. In the callback, the
first argument will be the rejection reason (or <code>null</code> if the <code>Promise</code>
resolved), and the second argument will be the resolved value.</p>
<pre><code class=""language-js"">const util = require('node:util');

async function fn() {
  return 'hello world';
}
const callbackFunction = util.callbackify(fn);

callbackFunction((err, ret) => {
  if (err) throw err;
  console.log(ret);
});
</code></pre>
<p>Will print:</p>
<pre><code class=""language-text"">hello world
</code></pre>
<p>The callback is executed asynchronously, and will have a limited stack trace.
If the callback throws, the process will emit an <a href=""process.html#event-uncaughtexception""><code>'uncaughtException'</code></a>
event, and if not handled will exit.</p>
<p>Since <code>null</code> has a special meaning as the first argument to a callback, if a
wrapped function rejects a <code>Promise</code> with a falsy value as a reason, the value
is wrapped in an <code>Error</code> with the original value stored in a field named
<code>reason</code>.</p>
<pre><code class=""language-js"">function fn() {
  return Promise.reject(null);
}
const callbackFunction = util.callbackify(fn);

callbackFunction((err, ret) => {
  // When the Promise was rejected with `null` it is wrapped with an Error and
  // the original value is stored in `reason`.
  err &#x26;&#x26; Object.hasOwn(err, 'reason') &#x26;&#x26; err.reason === null;  // true
});
</code></pre>",1,33,
1017,util,,debuglog,util.debuglog,"<p>The <code>util.debuglog()</code> method is used to create a function that conditionally
writes debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>
environment variable. If the <code>section</code> name appears within the value of that
environment variable, then the returned function operates similar to
<a href=""console.html#consoleerrordata-args""><code>console.error()</code></a>. If not, then the returned function is a no-op.</p>
<pre><code class=""language-js"">const util = require('node:util');
const debuglog = util.debuglog('foo');

debuglog('hello from foo [%d]', 123);
</code></pre>
<p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then
it will output something like:</p>
<pre><code class=""language-console"">FOO 3245: hello from foo [123]
</code></pre>
<p>where <code>3245</code> is the process id. If it is not run with that
environment variable set, then it will not print anything.</p>
<p>The <code>section</code> supports wildcard also:</p>
<pre><code class=""language-js"">const util = require('node:util');
const debuglog = util.debuglog('foo-bar');

debuglog('hi there, it\'s foo-bar [%d]', 2333);
</code></pre>
<p>if it is run with <code>NODE_DEBUG=foo*</code> in the environment, then it will output
something like:</p>
<pre><code class=""language-console"">FOO-BAR 3257: hi there, it's foo-bar [2333]
</code></pre>
<p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>
environment variable: <code>NODE_DEBUG=fs,net,tls</code>.</p>
<p>The optional <code>callback</code> argument can be used to replace the logging function
with a different function that doesn't have any initialization or
unnecessary wrapping.</p>
<pre><code class=""language-js"">const util = require('node:util');
let debuglog = util.debuglog('internals', (debug) => {
  // Replace with a logging function that optimizes out
  // testing if the section is enabled
  debuglog = debug;
});
</code></pre>",2,Others,
1018,util,,debug,util.debug,"<p>Alias for <code>util.debuglog</code>. Usage allows for readability of that doesn't imply
logging when only using <code>util.debuglog().enabled</code>.</p>",0,35,
1019,util,,deprecate,util.deprecate,"<p>The <code>util.deprecate()</code> method wraps <code>fn</code> (which may be a function or class) in
such a way that it is marked as deprecated.</p>
<pre><code class=""language-js"">const util = require('node:util');

exports.obsoleteFunction = util.deprecate(() => {
  // Do something here.
}, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');
</code></pre>
<p>When called, <code>util.deprecate()</code> will return a function that will emit a
<code>DeprecationWarning</code> using the <a href=""process.html#event-warning""><code>'warning'</code></a> event. The warning will
be emitted and printed to <code>stderr</code> the first time the returned function is
called. After the warning is emitted, the wrapped function is called without
emitting a warning.</p>
<p>If the same optional <code>code</code> is supplied in multiple calls to <code>util.deprecate()</code>,
the warning will be emitted only once for that <code>code</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

const fn1 = util.deprecate(someFunction, someMessage, 'DEP0001');
const fn2 = util.deprecate(someOtherFunction, someOtherMessage, 'DEP0001');
fn1(); // Emits a deprecation warning with code DEP0001
fn2(); // Does not emit a deprecation warning because it has the same code
</code></pre>
<p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command-line flags are
used, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to
the first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p>
<p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command-line flags are set,
or the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a
stack trace are printed to <code>stderr</code> the first time the deprecated function is
called.</p>
<p>If the <code>--throw-deprecation</code> command-line flag is set, or the
<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be
thrown when the deprecated function is called.</p>
<p>The <code>--throw-deprecation</code> command-line flag and <code>process.throwDeprecation</code>
property take precedence over <code>--trace-deprecation</code> and
<code>process.traceDeprecation</code>.</p>",3,Others,
1020,util,,format,util.format,"<p>The <code>util.format()</code> method returns a formatted string using the first argument
as a <code>printf</code>-like format string which can contain zero or more format
specifiers. Each specifier is replaced with the converted value from the
corresponding argument. Supported specifiers are:</p>
<ul>
<li><code>%s</code>: <code>String</code> will be used to convert all values except <code>BigInt</code>, <code>Object</code>
and <code>-0</code>. <code>BigInt</code> values will be represented with an <code>n</code> and Objects that
have no user defined <code>toString</code> function are inspected using <code>util.inspect()</code>
with options <code>{ depth: 0, colors: false, compact: 3 }</code>.</li>
<li><code>%d</code>: <code>Number</code> will be used to convert all values except <code>BigInt</code> and
<code>Symbol</code>.</li>
<li><code>%i</code>: <code>parseInt(value, 10)</code> is used for all values except <code>BigInt</code> and
<code>Symbol</code>.</li>
<li><code>%f</code>: <code>parseFloat(value)</code> is used for all values expect <code>Symbol</code>.</li>
<li><code>%j</code>: JSON. Replaced with the string <code>'[Circular]'</code> if the argument contains
circular references.</li>
<li><code>%o</code>: <code>Object</code>. A string representation of an object with generic JavaScript
object formatting. Similar to <code>util.inspect()</code> with options
<code>{ showHidden: true, showProxy: true }</code>. This will show the full object
including non-enumerable properties and proxies.</li>
<li><code>%O</code>: <code>Object</code>. A string representation of an object with generic JavaScript
object formatting. Similar to <code>util.inspect()</code> without options. This will show
the full object not including non-enumerable properties and proxies.</li>
<li><code>%c</code>: <code>CSS</code>. This specifier is ignored and will skip any CSS passed in.</li>
<li><code>%%</code>: single percent sign (<code>'%'</code>). This does not consume an argument.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> The formatted string</li>
</ul>
<p>If a specifier does not have a corresponding argument, it is not replaced:</p>
<pre><code class=""language-js"">util.format('%s:%s', 'foo');
// Returns: 'foo:%s'
</code></pre>
<p>Values that are not part of the format string are formatted using
<code>util.inspect()</code> if their type is not <code>string</code>.</p>
<p>If there are more arguments passed to the <code>util.format()</code> method than the
number of specifiers, the extra arguments are concatenated to the returned
string, separated by spaces:</p>
<pre><code class=""language-js"">util.format('%s:%s', 'foo', 'bar', 'baz');
// Returns: 'foo:bar baz'
</code></pre>
<p>If the first argument does not contain a valid format specifier, <code>util.format()</code>
returns a string that is the concatenation of all arguments separated by spaces:</p>
<pre><code class=""language-js"">util.format(1, 2, 3);
// Returns: '1 2 3'
</code></pre>
<p>If only one argument is passed to <code>util.format()</code>, it is returned as it is
without any formatting:</p>
<pre><code class=""language-js"">util.format('%% %s');
// Returns: '%% %s'
</code></pre>
<p><code>util.format()</code> is a synchronous method that is intended as a debugging tool.
Some input values can have a significant performance overhead that can block the
event loop. Use this function with care and never in a hot code path.</p>",1,Others,
1021,util,,formatWithOptions,util.formatWithOptions,"<p>This function is identical to <a href=""util.html#utilformatformat-args""><code>util.format()</code></a>, except in that it takes
an <code>inspectOptions</code> argument which specifies options that are passed along to
<a href=""util.html#utilinspectobject-options""><code>util.inspect()</code></a>.</p>
<pre><code class=""language-js"">util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });
// Returns 'See object { foo: 42 }', where `42` is colored as a number
// when printed to a terminal.
</code></pre>",2,Others,
1022,util,,getSystemErrorName,util.getSystemErrorName,"<p>Returns the string name for a numeric error code that comes from a Node.js API.
The mapping between error codes and error names is platform-dependent.
See <a href=""errors.html#common-system-errors"">Common System Errors</a> for the names of common errors.</p>
<pre><code class=""language-js"">fs.access('file/that/does/not/exist', (err) => {
  const name = util.getSystemErrorName(err.errno);
  console.error(name);  // ENOENT
});
</code></pre>",1,,
1023,util,,getSystemErrorMap,util.getSystemErrorMap,"<p>Returns a Map of all system error codes available from the Node.js API.
The mapping between error codes and error names is platform-dependent.
See <a href=""errors.html#common-system-errors"">Common System Errors</a> for the names of common errors.</p>
<pre><code class=""language-js"">fs.access('file/that/does/not/exist', (err) => {
  const errorMap = util.getSystemErrorMap();
  const name = errorMap.get(err.errno);
  console.error(name);  // ENOENT
});
</code></pre>",0,,
1024,util,,inherits,util.inherits,"<p>Usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and
<code>extends</code> keywords to get language level inheritance support. Also note
that the two styles are <a href=""https://github.com/nodejs/node/issues/4179"">semantically incompatible</a>.</p>
<p>Inherit the prototype methods from one <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor"">constructor</a> into another. The
prototype of <code>constructor</code> will be set to a new object created from
<code>superConstructor</code>.</p>
<p>This mainly adds some input validation on top of
<code>Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)</code>.
As an additional convenience, <code>superConstructor</code> will be accessible
through the <code>constructor.super_</code> property.</p>
<pre><code class=""language-js"">const util = require('node:util');
const EventEmitter = require('node:events');

function MyStream() {
  EventEmitter.call(this);
}

util.inherits(MyStream, EventEmitter);

MyStream.prototype.write = function(data) {
  this.emit('data', data);
};

const stream = new MyStream();

console.log(stream instanceof EventEmitter); // true
console.log(MyStream.super_ === EventEmitter); // true

stream.on('data', (data) => {
  console.log(`Received data: ""${data}""`);
});
stream.write('It works!'); // Received data: ""It works!""
</code></pre>
<p>ES6 example using <code>class</code> and <code>extends</code>:</p>
<pre><code class=""language-js"">const EventEmitter = require('node:events');

class MyStream extends EventEmitter {
  write(data) {
    this.emit('data', data);
  }
}

const stream = new MyStream();

stream.on('data', (data) => {
  console.log(`Received data: ""${data}""`);
});
stream.write('With ES6');
</code></pre>",2,Others,
1025,util,,inspect,util.inspect,"<p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is
intended for debugging. The output of <code>util.inspect</code> may change at any time
and should not be depended upon programmatically. Additional <code>options</code> may be
passed that alter the result.
<code>util.inspect()</code> will use the constructor's name and/or <code>@@toStringTag</code> to make
an identifiable tag for an inspected value.</p>
<pre><code class=""language-js"">class Foo {
  get [Symbol.toStringTag]() {
    return 'bar';
  }
}

class Bar {}

const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });

util.inspect(new Foo()); // 'Foo [bar] {}'
util.inspect(new Bar()); // 'Bar {}'
util.inspect(baz);       // '[foo] {}'
</code></pre>
<p>Circular references point to their anchor by using a reference index:</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const obj = {};
obj.a = [obj];
obj.b = {};
obj.b.inner = obj.b;
obj.b.obj = obj;

console.log(inspect(obj));
// &#x3C;ref *1> {
//   a: [ [Circular *1] ],
//   b: &#x3C;ref *2> { inner: [Circular *2], obj: [Circular *1] }
// }
</code></pre>
<p>The following example inspects all properties of the <code>util</code> object:</p>
<pre><code class=""language-js"">const util = require('node:util');

console.log(util.inspect(util, { showHidden: true, depth: null }));
</code></pre>
<p>The following example highlights the effect of the <code>compact</code> option:</p>
<pre><code class=""language-js"">const util = require('node:util');

const o = {
  a: [1, 2, [[
    'Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit, sed do ' +
      'eiusmod \ntempor incididunt ut labore et dolore magna aliqua.',
    'test',
    'foo']], 4],
  b: new Map([['za', 1], ['zb', 'test']]),
};
console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));

// { a:
//   [ 1,
//     2,
//     [ [ 'Lorem ipsum dolor sit amet,\nconsectetur [...]', // A long line
//           'test',
//           'foo' ] ],
//     4 ],
//   b: Map(2) { 'za' => 1, 'zb' => 'test' } }

// Setting `compact` to false or an integer creates more reader friendly output.
console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));

// {
//   a: [
//     1,
//     2,
//     [
//       [
//         'Lorem ipsum dolor sit amet,\n' +
//           'consectetur adipiscing elit, sed do eiusmod \n' +
//           'tempor incididunt ut labore et dolore magna aliqua.',
//         'test',
//         'foo'
//       ]
//     ],
//     4
//   ],
//   b: Map(2) {
//     'za' => 1,
//     'zb' => 'test'
//   }
// }

// Setting `breakLength` to e.g. 150 will print the ""Lorem ipsum"" text in a
// single line.
</code></pre>
<p>The <code>showHidden</code> option allows <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap""><code>WeakMap</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet""><code>WeakSet</code></a> entries to be
inspected. If there are more entries than <code>maxArrayLength</code>, there is no
guarantee which entries are displayed. That means retrieving the same
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet""><code>WeakSet</code></a> entries twice may result in different output. Furthermore, entries
with no remaining strong references may be garbage collected at any time.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const obj = { a: 1 };
const obj2 = { b: 2 };
const weakSet = new WeakSet([obj, obj2]);

console.log(inspect(weakSet, { showHidden: true }));
// WeakSet { { a: 1 }, { b: 2 } }
</code></pre>
<p>The <code>sorted</code> option ensures that an object's property insertion order does not
impact the result of <code>util.inspect()</code>.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');
const assert = require('node:assert');

const o1 = {
  b: [2, 3, 1],
  a: '`a` comes before `b`',
  c: new Set([2, 3, 1]),
};
console.log(inspect(o1, { sorted: true }));
// { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }
console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));
// { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }

const o2 = {
  c: new Set([2, 1, 3]),
  a: '`a` comes before `b`',
  b: [2, 3, 1],
};
assert.strict.equal(
  inspect(o1, { sorted: true }),
  inspect(o2, { sorted: true }),
);
</code></pre>
<p>The <code>numericSeparator</code> option adds an underscore every three digits to all
numbers.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const thousand = 1_000;
const million = 1_000_000;
const bigNumber = 123_456_789n;
const bigDecimal = 1_234.123_45;

console.log(inspect(thousand, { numericSeparator: true }));
// 1_000
console.log(inspect(million, { numericSeparator: true }));
// 1_000_000
console.log(inspect(bigNumber, { numericSeparator: true }));
// 123_456_789n
console.log(inspect(bigDecimal, { numericSeparator: true }));
// 1_234.123_45
</code></pre>
<p><code>util.inspect()</code> is a synchronous method intended for debugging. Its maximum
output length is approximately 128 MiB. Inputs that result in longer output will
be truncated.</p>",2,Others,
1026,util,,inspect,util.inspect,"<p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is
intended for debugging. The output of <code>util.inspect</code> may change at any time
and should not be depended upon programmatically. Additional <code>options</code> may be
passed that alter the result.
<code>util.inspect()</code> will use the constructor's name and/or <code>@@toStringTag</code> to make
an identifiable tag for an inspected value.</p>
<pre><code class=""language-js"">class Foo {
  get [Symbol.toStringTag]() {
    return 'bar';
  }
}

class Bar {}

const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });

util.inspect(new Foo()); // 'Foo [bar] {}'
util.inspect(new Bar()); // 'Bar {}'
util.inspect(baz);       // '[foo] {}'
</code></pre>
<p>Circular references point to their anchor by using a reference index:</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const obj = {};
obj.a = [obj];
obj.b = {};
obj.b.inner = obj.b;
obj.b.obj = obj;

console.log(inspect(obj));
// &#x3C;ref *1> {
//   a: [ [Circular *1] ],
//   b: &#x3C;ref *2> { inner: [Circular *2], obj: [Circular *1] }
// }
</code></pre>
<p>The following example inspects all properties of the <code>util</code> object:</p>
<pre><code class=""language-js"">const util = require('node:util');

console.log(util.inspect(util, { showHidden: true, depth: null }));
</code></pre>
<p>The following example highlights the effect of the <code>compact</code> option:</p>
<pre><code class=""language-js"">const util = require('node:util');

const o = {
  a: [1, 2, [[
    'Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit, sed do ' +
      'eiusmod \ntempor incididunt ut labore et dolore magna aliqua.',
    'test',
    'foo']], 4],
  b: new Map([['za', 1], ['zb', 'test']]),
};
console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));

// { a:
//   [ 1,
//     2,
//     [ [ 'Lorem ipsum dolor sit amet,\nconsectetur [...]', // A long line
//           'test',
//           'foo' ] ],
//     4 ],
//   b: Map(2) { 'za' => 1, 'zb' => 'test' } }

// Setting `compact` to false or an integer creates more reader friendly output.
console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));

// {
//   a: [
//     1,
//     2,
//     [
//       [
//         'Lorem ipsum dolor sit amet,\n' +
//           'consectetur adipiscing elit, sed do eiusmod \n' +
//           'tempor incididunt ut labore et dolore magna aliqua.',
//         'test',
//         'foo'
//       ]
//     ],
//     4
//   ],
//   b: Map(2) {
//     'za' => 1,
//     'zb' => 'test'
//   }
// }

// Setting `breakLength` to e.g. 150 will print the ""Lorem ipsum"" text in a
// single line.
</code></pre>
<p>The <code>showHidden</code> option allows <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap""><code>WeakMap</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet""><code>WeakSet</code></a> entries to be
inspected. If there are more entries than <code>maxArrayLength</code>, there is no
guarantee which entries are displayed. That means retrieving the same
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet""><code>WeakSet</code></a> entries twice may result in different output. Furthermore, entries
with no remaining strong references may be garbage collected at any time.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const obj = { a: 1 };
const obj2 = { b: 2 };
const weakSet = new WeakSet([obj, obj2]);

console.log(inspect(weakSet, { showHidden: true }));
// WeakSet { { a: 1 }, { b: 2 } }
</code></pre>
<p>The <code>sorted</code> option ensures that an object's property insertion order does not
impact the result of <code>util.inspect()</code>.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');
const assert = require('node:assert');

const o1 = {
  b: [2, 3, 1],
  a: '`a` comes before `b`',
  c: new Set([2, 3, 1]),
};
console.log(inspect(o1, { sorted: true }));
// { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }
console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));
// { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }

const o2 = {
  c: new Set([2, 1, 3]),
  a: '`a` comes before `b`',
  b: [2, 3, 1],
};
assert.strict.equal(
  inspect(o1, { sorted: true }),
  inspect(o2, { sorted: true }),
);
</code></pre>
<p>The <code>numericSeparator</code> option adds an underscore every three digits to all
numbers.</p>
<pre><code class=""language-js"">const { inspect } = require('node:util');

const thousand = 1_000;
const million = 1_000_000;
const bigNumber = 123_456_789n;
const bigDecimal = 1_234.123_45;

console.log(inspect(thousand, { numericSeparator: true }));
// 1_000
console.log(inspect(million, { numericSeparator: true }));
// 1_000_000
console.log(inspect(bigNumber, { numericSeparator: true }));
// 123_456_789n
console.log(inspect(bigDecimal, { numericSeparator: true }));
// 1_234.123_45
</code></pre>
<p><code>util.inspect()</code> is a synchronous method intended for debugging. Its maximum
output length is approximately 128 MiB. Inputs that result in longer output will
be truncated.</p>",2,,
1027,util,,isDeepStrictEqual,util.isDeepStrictEqual,"<p>Returns <code>true</code> if there is deep strict equality between <code>val1</code> and <code>val2</code>.
Otherwise, returns <code>false</code>.</p>
<p>See <a href=""assert.html#assertdeepstrictequalactual-expected-message""><code>assert.deepStrictEqual()</code></a> for more information about deep strict
equality.</p>",2,,
1028,util,,parseArgs,util.parseArgs,"<p>Provides a higher level API for command-line argument parsing than interacting
with <code>process.argv</code> directly. Takes a specification for the expected arguments
and returns a structured object with the parsed options and positionals.</p>
<pre><code class=""language-mjs"">import { parseArgs } from 'node:util';
const args = ['-f', '--bar', 'b'];
const options = {
  foo: {
    type: 'boolean',
    short: 'f',
  },
  bar: {
    type: 'string',
  },
};
const {
  values,
  positionals,
} = parseArgs({ args, options });
console.log(values, positionals);
// Prints: [Object: null prototype] { foo: true, bar: 'b' } []
</code></pre>
<pre><code class=""language-cjs"">const { parseArgs } = require('node:util');
const args = ['-f', '--bar', 'b'];
const options = {
  foo: {
    type: 'boolean',
    short: 'f',
  },
  bar: {
    type: 'string',
  },
};
const {
  values,
  positionals,
} = parseArgs({ args, options });
console.log(values, positionals);
// Prints: [Object: null prototype] { foo: true, bar: 'b' } []
</code></pre>",1,35,
1029,util,,promisify,util.promisify,"<p>Takes a function following the common error-first callback style, i.e. taking
an <code>(err, value) => ...</code> callback as the last argument, and returns a version
that returns promises.</p>
<pre><code class=""language-js"">const util = require('node:util');
const fs = require('node:fs');

const stat = util.promisify(fs.stat);
stat('.').then((stats) => {
  // Do something with `stats`
}).catch((error) => {
  // Handle the error.
});
</code></pre>
<p>Or, equivalently using <code>async function</code>s:</p>
<pre><code class=""language-js"">const util = require('node:util');
const fs = require('node:fs');

const stat = util.promisify(fs.stat);

async function callStat() {
  const stats = await stat('.');
  console.log(`This directory is owned by ${stats.uid}`);
}

callStat();
</code></pre>
<p>If there is an <code>original[util.promisify.custom]</code> property present, <code>promisify</code>
will return its value, see <a href=""util.html#custom-promisified-functions"">Custom promisified functions</a>.</p>
<p><code>promisify()</code> assumes that <code>original</code> is a function taking a callback as its
final argument in all cases. If <code>original</code> is not a function, <code>promisify()</code>
will throw an error. If <code>original</code> is a function but its last argument is not
an error-first callback, it will still be passed an error-first
callback as its last argument.</p>
<p>Using <code>promisify()</code> on class methods or other methods that use <code>this</code> may not
work as expected unless handled specially:</p>
<pre><code class=""language-js"">const util = require('node:util');

class Foo {
  constructor() {
    this.a = 42;
  }

  bar(callback) {
    callback(null, this.a);
  }
}

const foo = new Foo();

const naiveBar = util.promisify(foo.bar);
// TypeError: Cannot read property 'a' of undefined
// naiveBar().then(a => console.log(a));

naiveBar.call(foo).then((a) => console.log(a)); // '42'

const bindBar = naiveBar.bind(foo);
bindBar().then((a) => console.log(a)); // '42'
</code></pre>",1,Others,
1030,util,,stripVTControlCharacters,util.stripVTControlCharacters,"<p>Returns <code>str</code> with any ANSI escape codes removed.</p>
<pre><code class=""language-js"">console.log(util.stripVTControlCharacters('\u001B[4mvalue\u001B[0m'));
// Prints ""value""
</code></pre>",1,,
1031,util,,toUSVString,util.toUSVString,"<p>Returns the <code>string</code> after replacing any surrogate code points
(or equivalently, any unpaired surrogate code units) with the
Unicode ""replacement character"" U+FFFD.</p>",1,,
1032,util,,transferableAbortController,util.transferableAbortController,"<p>Creates and returns an <a href=""globals.html#class-abortcontroller"" class=""type"">&lt;AbortController&gt;</a> instance whose <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> is marked
as transferable and can be used with <code>structuredClone()</code> or <code>postMessage()</code>.</p>",0,,
1033,util,,transferableAbortSignal,util.transferableAbortSignal,"<p>Marks the given <a href=""globals.html#class-abortsignal"" class=""type"">&lt;AbortSignal&gt;</a> as transferable so that it can be used with
<code>structuredClone()</code> and <code>postMessage()</code>.</p>
<pre><code class=""language-js"">const signal = transferableAbortSignal(AbortSignal.timeout(100));
const channel = new MessageChannel();
channel.port2.postMessage(signal, [signal]);
</code></pre>",1,,
1034,util,,aborted,util.aborted,"<p>Listens to abort event on the provided <code>signal</code> and
returns a promise that is fulfilled when the <code>signal</code> is
aborted. If the passed <code>resource</code> is garbage collected before the <code>signal</code> is
aborted, the returned promise shall remain pending indefinitely.</p>
<pre><code class=""language-cjs"">const { aborted } = require('node:util');

const dependent = obtainSomethingAbortable();

aborted(dependent.signal, dependent).then(() => {
  // Do something when dependent is aborted.
});

dependent.on('event', () => {
  dependent.abort();
});
</code></pre>
<pre><code class=""language-mjs"">import { aborted } from 'node:util';

const dependent = obtainSomethingAbortable();

aborted(dependent.signal, dependent).then(() => {
  // Do something when dependent is aborted.
});

dependent.on('event', () => {
  dependent.abort();
});
</code></pre>",2,,
1035,mime,,toString,mime.toString,"<p>The <code>toString()</code> method on the <code>MIMEType</code> object returns the serialized MIME.</p>
<p>Because of the need for standard compliance, this method does not allow users
to customize the serialization process of the MIME.</p>",0,Others,
1036,mime,,toJSON,mime.toJSON,"<p>Alias for <a href=""util.html#mimetostring""><code>mime.toString()</code></a>.</p>
<p>This method is automatically called when an <code>MIMEType</code> object is serialized
with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify""><code>JSON.stringify()</code></a>.</p>
<pre><code class=""language-mjs"">import { MIMEType } from 'node:util';

const myMIMES = [
  new MIMEType('image/png'),
  new MIMEType('image/gif'),
];
console.log(JSON.stringify(myMIMES));
// Prints: [""image/png"", ""image/gif""]
</code></pre>
<pre><code class=""language-cjs"">const { MIMEType } = require('node:util');

const myMIMES = [
  new MIMEType('image/png'),
  new MIMEType('image/gif'),
];
console.log(JSON.stringify(myMIMES));
// Prints: [""image/png"", ""image/gif""]
</code></pre>",0,,
1037,mimeParams,,delete,mimeParams.delete,<p>Remove all name-value pairs whose name is <code>name</code>.</p>,1,,
1038,mimeParams,,entries,mimeParams.entries,"<p>Returns an iterator over each of the name-value pairs in the parameters.
Each item of the iterator is a JavaScript <code>Array</code>. The first item of the array
is the <code>name</code>, the second item of the array is the <code>value</code>.</p>",0,,
1039,mimeParams,,get,mimeParams.get,"<p>Returns the value of the first name-value pair whose name is <code>name</code>. If there
are no such pairs, <code>null</code> is returned.</p>",1,,
1040,mimeParams,,has,mimeParams.has,<p>Returns <code>true</code> if there is at least one name-value pair whose name is <code>name</code>.</p>,1,,
1041,mimeParams,,keys,mimeParams.keys,"<p>Returns an iterator over the names of each name-value pair.</p>
<pre><code class=""language-mjs"">import { MIMEType } from 'node:util';

const { params } = new MIMEType('text/plain;foo=0;bar=1');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   bar
</code></pre>
<pre><code class=""language-cjs"">const { MIMEType } = require('node:util');

const { params } = new MIMEType('text/plain;foo=0;bar=1');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   bar
</code></pre>",0,,
1042,mimeParams,,set,mimeParams.set,"<p>Sets the value in the <code>MIMEParams</code> object associated with <code>name</code> to
<code>value</code>. If there are any pre-existing name-value pairs whose names are <code>name</code>,
set the first such pair's value to <code>value</code>.</p>
<pre><code class=""language-mjs"">import { MIMEType } from 'node:util';

const { params } = new MIMEType('text/plain;foo=0;bar=1');
params.set('foo', 'def');
params.set('baz', 'xyz');
console.log(params.toString());
// Prints: foo=def;bar=1;baz=xyz
</code></pre>
<pre><code class=""language-cjs"">const { MIMEType } = require('node:util');

const { params } = new MIMEType('text/plain;foo=0;bar=1');
params.set('foo', 'def');
params.set('baz', 'xyz');
console.log(params.toString());
// Prints: foo=def;bar=1;baz=xyz
</code></pre>",2,,
1043,mimeParams,,values,mimeParams.values,<p>Returns an iterator over the values of each name-value pair.</p>,0,,
1044,textDecoder,,decode,textDecoder.decode,"<p>Decodes the <code>input</code> and returns a string. If <code>options.stream</code> is <code>true</code>, any
incomplete byte sequences occurring at the end of the <code>input</code> are buffered
internally and emitted after the next call to <code>textDecoder.decode()</code>.</p>
<p>If <code>textDecoder.fatal</code> is <code>true</code>, decoding errors that occur will result in a
<code>TypeError</code> being thrown.</p>",2,34,
1045,textEncoder,,encode,textEncoder.encode,"<p>UTF-8 encodes the <code>input</code> string and returns a <code>Uint8Array</code> containing the
encoded bytes.</p>",1,29,
1046,textEncoder,,encodeInto,textEncoder.encodeInto,"<p>UTF-8 encodes the <code>src</code> string to the <code>dest</code> Uint8Array and returns an object
containing the read Unicode code units and written UTF-8 bytes.</p>
<pre><code class=""language-js"">const encoder = new TextEncoder();
const src = 'this is some data';
const dest = new Uint8Array(10);
const { read, written } = encoder.encodeInto(src, dest);
</code></pre>",2,33,
1047,util,,_extend,util._extend,"<p>The <code>util._extend()</code> method was never intended to be used outside of internal
Node.js modules. The community found and used it anyway.</p>
<p>It is deprecated and should not be used in new code. JavaScript comes with very
similar built-in functionality through <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign""><code>Object.assign()</code></a>.</p>",2,Others,
1048,util,,isArray,util.isArray,"<p>Alias for <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray""><code>Array.isArray()</code></a>.</p>
<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isArray([]);
// Returns: true
util.isArray(new Array());
// Returns: true
util.isArray({});
// Returns: false
</code></pre>",1,Others,
1049,util,,isBoolean,util.isBoolean,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isBoolean(1);
// Returns: false
util.isBoolean(0);
// Returns: false
util.isBoolean(false);
// Returns: true
</code></pre>",1,30,
1050,util,,isBuffer,util.isBuffer,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isBuffer({ length: 0 });
// Returns: false
util.isBuffer([]);
// Returns: false
util.isBuffer(Buffer.from('hello world'));
// Returns: true
</code></pre>",1,,
1051,util,,isDate,util.isDate,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isDate(new Date());
// Returns: true
util.isDate(Date());
// false (without 'new' returns a String)
util.isDate({});
// Returns: false
</code></pre>",1,Others,
1052,util,,isError,util.isError,"<p>Returns <code>true</code> if the given <code>object</code> is an <a href=""errors.html#class-error""><code>Error</code></a>. Otherwise, returns
<code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isError(new Error());
// Returns: true
util.isError(new TypeError());
// Returns: true
util.isError({ name: 'Error', message: 'an error occurred' });
// Returns: false
</code></pre>
<p>This method relies on <code>Object.prototype.toString()</code> behavior. It is
possible to obtain an incorrect result when the <code>object</code> argument manipulates
<code>@@toStringTag</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');
const obj = { name: 'Error', message: 'an error occurred' };

util.isError(obj);
// Returns: false
obj[Symbol.toStringTag] = 'Error';
util.isError(obj);
// Returns: true
</code></pre>",1,,
1053,util,,isFunction,util.isFunction,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns
<code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

function Foo() {}
const Bar = () => {};

util.isFunction({});
// Returns: false
util.isFunction(Foo);
// Returns: true
util.isFunction(Bar);
// Returns: true
</code></pre>",1,,
1054,util,,isNull,util.isNull,"<p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns
<code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isNull(0);
// Returns: false
util.isNull(undefined);
// Returns: false
util.isNull(null);
// Returns: true
</code></pre>",1,,
1055,util,,isNullOrUndefined,util.isNullOrUndefined,"<p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise,
returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isNullOrUndefined(0);
// Returns: false
util.isNullOrUndefined(undefined);
// Returns: true
util.isNullOrUndefined(null);
// Returns: true
</code></pre>",1,,
1056,util,,isNumber,util.isNumber,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isNumber(false);
// Returns: false
util.isNumber(Infinity);
// Returns: true
util.isNumber(0);
// Returns: true
util.isNumber(NaN);
// Returns: true
</code></pre>",1,Others,
1057,util,,isObject,util.isObject,"<p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a
<code>Function</code> (even though functions are objects in JavaScript).
Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isObject(5);
// Returns: false
util.isObject(null);
// Returns: false
util.isObject({});
// Returns: true
util.isObject(() => {});
// Returns: false
</code></pre>",1,40,
1058,util,,isPrimitive,util.isPrimitive,"<p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns
<code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isPrimitive(5);
// Returns: true
util.isPrimitive('foo');
// Returns: true
util.isPrimitive(false);
// Returns: true
util.isPrimitive(null);
// Returns: true
util.isPrimitive(undefined);
// Returns: true
util.isPrimitive({});
// Returns: false
util.isPrimitive(() => {});
// Returns: false
util.isPrimitive(/^$/);
// Returns: false
util.isPrimitive(new Date());
// Returns: false
</code></pre>",1,,
1059,util,,isRegExp,util.isRegExp,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isRegExp(/some regexp/);
// Returns: true
util.isRegExp(new RegExp('another regexp'));
// Returns: true
util.isRegExp({});
// Returns: false
</code></pre>",1,Others,
1060,util,,isString,util.isString,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isString('');
// Returns: true
util.isString('foo');
// Returns: true
util.isString(String('foo'));
// Returns: true
util.isString(5);
// Returns: false
</code></pre>",1,Others,
1061,util,,isSymbol,util.isSymbol,"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.isSymbol(5);
// Returns: false
util.isSymbol('foo');
// Returns: false
util.isSymbol(Symbol('foo'));
// Returns: true
</code></pre>",1,,
1062,util,,isUndefined,util.isUndefined,"<p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>
<pre><code class=""language-js"">const util = require('node:util');

const foo = undefined;
util.isUndefined(5);
// Returns: false
util.isUndefined(foo);
// Returns: true
util.isUndefined(null);
// Returns: false
</code></pre>",1,,
1063,util,,log,util.log,"<p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included
timestamp.</p>
<pre><code class=""language-js"">const util = require('node:util');

util.log('Timestamped message.');
</code></pre>",1,Others,
1064,v8,,cachedDataVersionTag,v8.cachedDataVersionTag,"<p>Returns an integer representing a version tag derived from the V8 version,
command-line flags, and detected CPU features. This is useful for determining
whether a <a href=""vm.html#new-vmscriptcode-options""><code>vm.Script</code></a> <code>cachedData</code> buffer is compatible with this instance
of V8.</p>
<pre><code class=""language-js"">console.log(v8.cachedDataVersionTag()); // 3947234607
// The value returned by v8.cachedDataVersionTag() is derived from the V8
// version, command-line flags, and detected CPU features. Test that the value
// does indeed update when flags are toggled.
v8.setFlagsFromString('--allow_natives_syntax');
console.log(v8.cachedDataVersionTag()); // 183726201
</code></pre>",0,,
1065,v8,,getHeapCodeStatistics,v8.getHeapCodeStatistics,"<p>Get statistics about code and its metadata in the heap, see V8
<a href=""https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#a6079122af17612ef54ef3348ce170866""><code>GetHeapCodeAndMetadataStatistics</code></a> API. Returns an object with the
following properties:</p>
<ul>
<li><code>code_and_metadata_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>bytecode_and_metadata_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>external_script_source_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>cpu_profiler_metadata_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
</ul>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  code_and_metadata_size: 212208,
  bytecode_and_metadata_size: 161368,
  external_script_source_size: 1410794,
  cpu_profiler_metadata_size: 0,
}
</code></pre>",0,,
1066,v8,,getHeapSnapshot,v8.getHeapSnapshot,"<p>Generates a snapshot of the current V8 heap and returns a Readable
Stream that may be used to read the JSON serialized representation.
This JSON stream format is intended to be used with tools such as
Chrome DevTools. The JSON schema is undocumented and specific to the
V8 engine. Therefore, the schema may change from one version of V8 to the next.</p>
<p>Creating a heap snapshot requires memory about twice the size of the heap at
the time the snapshot is created. This results in the risk of OOM killers
terminating the process.</p>
<p>Generating a snapshot is a synchronous operation which blocks the event loop
for a duration depending on the heap size.</p>
<pre><code class=""language-js"">// Print heap snapshot to the console
const v8 = require('node:v8');
const stream = v8.getHeapSnapshot();
stream.pipe(process.stdout);
</code></pre>",1,33,
1067,v8,,getHeapSpaceStatistics,v8.getHeapSpaceStatistics,"<p>Returns statistics about the V8 heap spaces, i.e. the segments which make up
the V8 heap. Neither the ordering of heap spaces, nor the availability of a
heap space can be guaranteed as the statistics are provided via the V8
<a href=""https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4""><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the
next.</p>
<p>The value returned is an array of objects containing the following properties:</p>
<ul>
<li><code>space_name</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a></li>
<li><code>space_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>space_used_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>space_available_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>physical_space_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
</ul>
<pre><code class=""language-json"">[
  {
    ""space_name"": ""new_space"",
    ""space_size"": 2063872,
    ""space_used_size"": 951112,
    ""space_available_size"": 80824,
    ""physical_space_size"": 2063872
  },
  {
    ""space_name"": ""old_space"",
    ""space_size"": 3090560,
    ""space_used_size"": 2493792,
    ""space_available_size"": 0,
    ""physical_space_size"": 3090560
  },
  {
    ""space_name"": ""code_space"",
    ""space_size"": 1260160,
    ""space_used_size"": 644256,
    ""space_available_size"": 960,
    ""physical_space_size"": 1260160
  },
  {
    ""space_name"": ""map_space"",
    ""space_size"": 1094160,
    ""space_used_size"": 201608,
    ""space_available_size"": 0,
    ""physical_space_size"": 1094160
  },
  {
    ""space_name"": ""large_object_space"",
    ""space_size"": 0,
    ""space_used_size"": 0,
    ""space_available_size"": 1490980608,
    ""physical_space_size"": 0
  }
]
</code></pre>",0,,
1068,v8,,getHeapStatistics,v8.getHeapStatistics,"<p>Returns an object with the following properties:</p>
<ul>
<li><code>total_heap_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>total_heap_size_executable</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>total_physical_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>total_available_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>used_heap_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>heap_size_limit</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>malloced_memory</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>peak_malloced_memory</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>does_zap_garbage</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>number_of_native_contexts</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>number_of_detached_contexts</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>total_global_handles_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>used_global_handles_size</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
<li><code>external_memory</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a></li>
</ul>
<p><code>does_zap_garbage</code> is a 0/1 boolean, which signifies whether the
<code>--zap_code_space</code> option is enabled or not. This makes V8 overwrite heap
garbage with a bit pattern. The RSS footprint (resident set size) gets bigger
because it continuously touches all heap pages and that makes them less likely
to get swapped out by the operating system.</p>
<p><code>number_of_native_contexts</code> The value of native_context is the number of the
top-level contexts currently active. Increase of this number over time indicates
a memory leak.</p>
<p><code>number_of_detached_contexts</code> The value of detached_context is the number
of contexts that were detached and not yet garbage collected. This number
being non-zero indicates a potential memory leak.</p>
<p><code>total_global_handles_size</code> The value of total_global_handles_size is the
total memory size of V8 global handles.</p>
<p><code>used_global_handles_size</code> The value of used_global_handles_size is the
used memory size of V8 global handles.</p>
<p><code>external_memory</code> The value of external_memory is the memory size of array
buffers and external strings.</p>
<!-- eslint-skip -->
<pre><code class=""language-js"">{
  total_heap_size: 7326976,
  total_heap_size_executable: 4194304,
  total_physical_size: 7326976,
  total_available_size: 1152656,
  used_heap_size: 3476208,
  heap_size_limit: 1535115264,
  malloced_memory: 16384,
  peak_malloced_memory: 1127496,
  does_zap_garbage: 0,
  number_of_native_contexts: 1,
  number_of_detached_contexts: 0,
  total_global_handles_size: 8192,
  used_global_handles_size: 3296,
  external_memory: 318824
}
</code></pre>",0,4,
1069,v8,,setFlagsFromString,v8.setFlagsFromString,"<p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set
V8 command-line flags. This method should be used with care. Changing settings
after the VM has started may result in unpredictable behavior, including
crashes and data loss; or it may simply do nothing.</p>
<p>The V8 options available for a version of Node.js may be determined by running
<code>node --v8-options</code>.</p>
<p>Usage:</p>
<pre><code class=""language-js"">// Print GC events to stdout for one minute.
const v8 = require('node:v8');
v8.setFlagsFromString('--trace_gc');
setTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);
</code></pre>",1,4,
1070,v8,,stopCoverage,v8.stopCoverage,"<p>The <code>v8.stopCoverage()</code> method allows the user to stop the coverage collection
started by <a href=""cli.html#node_v8_coveragedir""><code>NODE_V8_COVERAGE</code></a>, so that V8 can release the execution count
records and optimize code. This can be used in conjunction with
<a href=""v8.html#v8takecoverage""><code>v8.takeCoverage()</code></a> if the user wants to collect the coverage on demand.</p>",0,,
1071,v8,,takeCoverage,v8.takeCoverage,"<p>The <code>v8.takeCoverage()</code> method allows the user to write the coverage started by
<a href=""cli.html#node_v8_coveragedir""><code>NODE_V8_COVERAGE</code></a> to disk on demand. This method can be invoked multiple
times during the lifetime of the process. Each time the execution counter will
be reset and a new coverage report will be written to the directory specified
by <a href=""cli.html#node_v8_coveragedir""><code>NODE_V8_COVERAGE</code></a>.</p>
<p>When the process is about to exit, one last coverage will still be written to
disk unless <a href=""v8.html#v8stopcoverage""><code>v8.stopCoverage()</code></a> is invoked before the process exits.</p>",0,,
1072,v8,,writeHeapSnapshot,v8.writeHeapSnapshot,"<p>Generates a snapshot of the current V8 heap and writes it to a JSON
file. This file is intended to be used with tools such as Chrome
DevTools. The JSON schema is undocumented and specific to the V8
engine, and may change from one version of V8 to the next.</p>
<p>A heap snapshot is specific to a single V8 isolate. When using
<a href=""worker_threads.html"">worker threads</a>, a heap snapshot generated from the main thread will
not contain any information about the workers, and vice versa.</p>
<p>Creating a heap snapshot requires memory about twice the size of the heap at
the time the snapshot is created. This results in the risk of OOM killers
terminating the process.</p>
<p>Generating a snapshot is a synchronous operation which blocks the event loop
for a duration depending on the heap size.</p>
<pre><code class=""language-js"">const { writeHeapSnapshot } = require('node:v8');
const {
  Worker,
  isMainThread,
  parentPort,
} = require('node:worker_threads');

if (isMainThread) {
  const worker = new Worker(__filename);

  worker.once('message', (filename) => {
    console.log(`worker heapdump: ${filename}`);
    // Now get a heapdump for the main thread.
    console.log(`main thread heapdump: ${writeHeapSnapshot()}`);
  });

  // Tell the worker to create a heapdump.
  worker.postMessage('heapdump');
} else {
  parentPort.once('message', (message) => {
    if (message === 'heapdump') {
      // Generate a heapdump for the worker
      // and return the filename to the parent.
      parentPort.postMessage(writeHeapSnapshot());
    }
  });
}
</code></pre>",2,,
1073,v8,,setHeapSnapshotNearHeapLimit,v8.setHeapSnapshotNearHeapLimit,"<p>The API is a no-op if <code>--heapsnapshot-near-heap-limit</code> is already set from the
command line or the API is called more than once. <code>limit</code> must be a positive
integer. See <a href=""cli.html#--heapsnapshot-near-heap-limitmax_count""><code>--heapsnapshot-near-heap-limit</code></a> for more information.</p>",1,,
1074,profiler,,start,profiler.start,<p>Start collecting GC data.</p>,0,,
1075,profiler,,stop,profiler.stop,"<p>Stop collecting GC data and return an object.The content of object
is as follows.</p>
<pre><code class=""language-json"">{
  ""version"": 1,
  ""startTime"": 1674059033862,
  ""statistics"": [
    {
      ""gcType"": ""Scavenge"",
      ""beforeGC"": {
        ""heapStatistics"": {
          ""totalHeapSize"": 5005312,
          ""totalHeapSizeExecutable"": 524288,
          ""totalPhysicalSize"": 5226496,
          ""totalAvailableSize"": 4341325216,
          ""totalGlobalHandlesSize"": 8192,
          ""usedGlobalHandlesSize"": 2112,
          ""usedHeapSize"": 4883840,
          ""heapSizeLimit"": 4345298944,
          ""mallocedMemory"": 254128,
          ""externalMemory"": 225138,
          ""peakMallocedMemory"": 181760
        },
        ""heapSpaceStatistics"": [
          {
            ""spaceName"": ""read_only_space"",
            ""spaceSize"": 0,
            ""spaceUsedSize"": 0,
            ""spaceAvailableSize"": 0,
            ""physicalSpaceSize"": 0
          }
        ]
      },
      ""cost"": 1574.14,
      ""afterGC"": {
        ""heapStatistics"": {
          ""totalHeapSize"": 6053888,
          ""totalHeapSizeExecutable"": 524288,
          ""totalPhysicalSize"": 5500928,
          ""totalAvailableSize"": 4341101384,
          ""totalGlobalHandlesSize"": 8192,
          ""usedGlobalHandlesSize"": 2112,
          ""usedHeapSize"": 4059096,
          ""heapSizeLimit"": 4345298944,
          ""mallocedMemory"": 254128,
          ""externalMemory"": 225138,
          ""peakMallocedMemory"": 181760
        },
        ""heapSpaceStatistics"": [
          {
            ""spaceName"": ""read_only_space"",
            ""spaceSize"": 0,
            ""spaceUsedSize"": 0,
            ""spaceAvailableSize"": 0,
            ""physicalSpaceSize"": 0
          }
        ]
      }
    }
  ],
  ""endTime"": 1674059036865
}
</code></pre>
<p>Here's an example.</p>
<pre><code class=""language-js"">const { GCProfiler } = require('v8');
const profiler = new GCProfiler();
profiler.start();
setTimeout(() => {
  console.log(profiler.stop());
}, 1000);
</code></pre>",0,,
1076,v8,,serialize,v8.serialize,"<p>Uses a <a href=""v8.html#class-v8defaultserializer""><code>DefaultSerializer</code></a> to serialize <code>value</code> into a buffer.</p>
<p><a href=""errors.html#err_buffer_too_large""><code>ERR_BUFFER_TOO_LARGE</code></a> will be thrown when trying to
serialize a huge object which requires buffer
larger than <a href=""buffer.html#bufferconstantsmax_length""><code>buffer.constants.MAX_LENGTH</code></a>.</p>",1,35,
1077,v8,,deserialize,v8.deserialize,"<p>Uses a <a href=""v8.html#class-v8defaultdeserializer""><code>DefaultDeserializer</code></a> with default options to read a JS value
from a buffer.</p>",1,33,
1078,serializer,,writeHeader,serializer.writeHeader,"<p>Writes out a header, which includes the serialization format version.</p>",0,,
1079,serializer,,writeValue,serializer.writeValue,"<p>Serializes a JavaScript value and adds the serialized representation to the
internal buffer.</p>
<p>This throws an error if <code>value</code> cannot be serialized.</p>",1,,
1080,serializer,,releaseBuffer,serializer.releaseBuffer,"<p>Returns the stored internal buffer. This serializer should not be used once
the buffer is released. Calling this method results in undefined behavior
if a previous write has failed.</p>",0,,
1081,serializer,,transferArrayBuffer,serializer.transferArrayBuffer,"<p>Marks an <code>ArrayBuffer</code> as having its contents transferred out of band.
Pass the corresponding <code>ArrayBuffer</code> in the deserializing context to
<a href=""v8.html#deserializertransferarraybufferid-arraybuffer""><code>deserializer.transferArrayBuffer()</code></a>.</p>",2,,
1082,serializer,,writeUint32,serializer.writeUint32,"<p>Write a raw 32-bit unsigned integer.
For use inside of a custom <a href=""v8.html#serializer_writehostobjectobject""><code>serializer._writeHostObject()</code></a>.</p>",1,,
1083,serializer,,writeUint64,serializer.writeUint64,"<p>Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.
For use inside of a custom <a href=""v8.html#serializer_writehostobjectobject""><code>serializer._writeHostObject()</code></a>.</p>",2,,
1084,serializer,,writeDouble,serializer.writeDouble,"<p>Write a JS <code>number</code> value.
For use inside of a custom <a href=""v8.html#serializer_writehostobjectobject""><code>serializer._writeHostObject()</code></a>.</p>",1,,
1085,serializer,,writeRawBytes,serializer.writeRawBytes,"<p>Write raw bytes into the serializer's internal buffer. The deserializer
will require a way to compute the length of the buffer.
For use inside of a custom <a href=""v8.html#serializer_writehostobjectobject""><code>serializer._writeHostObject()</code></a>.</p>",1,,
1086,serializer,,_writeHostObject,serializer._writeHostObject,"<p>This method is called to write some kind of host object, i.e. an object created
by native C++ bindings. If it is not possible to serialize <code>object</code>, a suitable
exception should be thrown.</p>
<p>This method is not present on the <code>Serializer</code> class itself but can be provided
by subclasses.</p>",1,,
1087,serializer,,_getDataCloneError,serializer._getDataCloneError,"<p>This method is called to generate error objects that will be thrown when an
object can not be cloned.</p>
<p>This method defaults to the <a href=""errors.html#class-error""><code>Error</code></a> constructor and can be overridden on
subclasses.</p>",1,,
1088,serializer,,_getSharedArrayBufferId,serializer._getSharedArrayBufferId,"<p>This method is called when the serializer is going to serialize a
<code>SharedArrayBuffer</code> object. It must return an unsigned 32-bit integer ID for
the object, using the same ID if this <code>SharedArrayBuffer</code> has already been
serialized. When deserializing, this ID will be passed to
<a href=""v8.html#deserializertransferarraybufferid-arraybuffer""><code>deserializer.transferArrayBuffer()</code></a>.</p>
<p>If the object cannot be serialized, an exception should be thrown.</p>
<p>This method is not present on the <code>Serializer</code> class itself but can be provided
by subclasses.</p>",1,,
1089,serializer,,_setTreatArrayBufferViewsAsHostObjects,serializer._setTreatArrayBufferViewsAsHostObjects,"<p>Indicate whether to treat <code>TypedArray</code> and <code>DataView</code> objects as
host objects, i.e. pass them to <a href=""v8.html#serializer_writehostobjectobject""><code>serializer._writeHostObject()</code></a>.</p>",1,,
1090,deserializer,,readHeader,deserializer.readHeader,"<p>Reads and validates a header (including the format version).
May, for example, reject an invalid or unsupported wire format. In that case,
an <code>Error</code> is thrown.</p>",0,,
1091,deserializer,,readValue,deserializer.readValue,<p>Deserializes a JavaScript value from the buffer and returns it.</p>,0,,
1092,deserializer,,transferArrayBuffer,deserializer.transferArrayBuffer,"<p>Marks an <code>ArrayBuffer</code> as having its contents transferred out of band.
Pass the corresponding <code>ArrayBuffer</code> in the serializing context to
<a href=""v8.html#serializertransferarraybufferid-arraybuffer""><code>serializer.transferArrayBuffer()</code></a> (or return the <code>id</code> from
<a href=""v8.html#serializer_getsharedarraybufferidsharedarraybuffer""><code>serializer._getSharedArrayBufferId()</code></a> in the case of <code>SharedArrayBuffer</code>s).</p>",2,,
1093,deserializer,,getWireFormatVersion,deserializer.getWireFormatVersion,"<p>Reads the underlying wire format version. Likely mostly to be useful to
legacy code reading old wire format versions. May not be called before
<code>.readHeader()</code>.</p>",0,,
1094,deserializer,,readUint32,deserializer.readUint32,"<p>Read a raw 32-bit unsigned integer and return it.
For use inside of a custom <a href=""v8.html#deserializer_readhostobject""><code>deserializer._readHostObject()</code></a>.</p>",0,,
1095,deserializer,,readUint64,deserializer.readUint64,"<p>Read a raw 64-bit unsigned integer and return it as an array <code>[hi, lo]</code>
with two 32-bit unsigned integer entries.
For use inside of a custom <a href=""v8.html#deserializer_readhostobject""><code>deserializer._readHostObject()</code></a>.</p>",0,,
1096,deserializer,,readDouble,deserializer.readDouble,"<p>Read a JS <code>number</code> value.
For use inside of a custom <a href=""v8.html#deserializer_readhostobject""><code>deserializer._readHostObject()</code></a>.</p>",0,,
1097,deserializer,,readRawBytes,deserializer.readRawBytes,"<p>Read raw bytes from the deserializer's internal buffer. The <code>length</code> parameter
must correspond to the length of the buffer that was passed to
<a href=""v8.html#serializerwriterawbytesbuffer""><code>serializer.writeRawBytes()</code></a>.
For use inside of a custom <a href=""v8.html#deserializer_readhostobject""><code>deserializer._readHostObject()</code></a>.</p>",1,,
1098,deserializer,,_readHostObject,deserializer._readHostObject,"<p>This method is called to read some kind of host object, i.e. an object that is
created by native C++ bindings. If it is not possible to deserialize the data,
a suitable exception should be thrown.</p>
<p>This method is not present on the <code>Deserializer</code> class itself but can be
provided by subclasses.</p>",0,,
1099,promiseHooks,,onInit,promiseHooks.onInit,"<p><strong>The <code>init</code> hook must be a plain function. Providing an async function will
throw as it would produce an infinite microtask loop.</strong></p>
<pre><code class=""language-mjs"">import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onInit((promise, parent) => {});
</code></pre>
<pre><code class=""language-cjs"">const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onInit((promise, parent) => {});
</code></pre>",1,,
1100,promiseHooks,,onSettled,promiseHooks.onSettled,"<p><strong>The <code>settled</code> hook must be a plain function. Providing an async function will
throw as it would produce an infinite microtask loop.</strong></p>
<pre><code class=""language-mjs"">import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onSettled((promise) => {});
</code></pre>
<pre><code class=""language-cjs"">const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onSettled((promise) => {});
</code></pre>",1,,
1101,promiseHooks,,onBefore,promiseHooks.onBefore,"<p><strong>The <code>before</code> hook must be a plain function. Providing an async function will
throw as it would produce an infinite microtask loop.</strong></p>
<pre><code class=""language-mjs"">import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onBefore((promise) => {});
</code></pre>
<pre><code class=""language-cjs"">const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onBefore((promise) => {});
</code></pre>",1,,
1102,promiseHooks,,onAfter,promiseHooks.onAfter,"<p><strong>The <code>after</code> hook must be a plain function. Providing an async function will
throw as it would produce an infinite microtask loop.</strong></p>
<pre><code class=""language-mjs"">import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onAfter((promise) => {});
</code></pre>
<pre><code class=""language-cjs"">const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onAfter((promise) => {});
</code></pre>",1,,
1103,promiseHooks,,createHook,promiseHooks.createHook,"<p><strong>The hook callbacks must be plain functions. Providing async functions will
throw as it would produce an infinite microtask loop.</strong></p>
<p>Registers functions to be called for different lifetime events of each promise.</p>
<p>The callbacks <code>init()</code>/<code>before()</code>/<code>after()</code>/<code>settled()</code> are called for the
respective events during a promise's lifetime.</p>
<p>All callbacks are optional. For example, if only promise creation needs to
be tracked, then only the <code>init</code> callback needs to be passed. The
specifics of all functions that can be passed to <code>callbacks</code> is in the
<a href=""v8.html#hook-callbacks"">Hook Callbacks</a> section.</p>
<pre><code class=""language-mjs"">import { promiseHooks } from 'node:v8';

const stopAll = promiseHooks.createHook({
  init(promise, parent) {},
});
</code></pre>
<pre><code class=""language-cjs"">const { promiseHooks } = require('node:v8');

const stopAll = promiseHooks.createHook({
  init(promise, parent) {},
});
</code></pre>",1,,
1104,init,,init,init,"<p>Called when a promise is constructed. This <em>does not</em> mean that corresponding
<code>before</code>/<code>after</code> events will occur, only that the possibility exists. This will
happen if a promise is created without ever getting a continuation.</p>",2,Others,
1105,before,,before,before,"<p>Called before a promise continuation executes. This can be in the form of
<code>then()</code>, <code>catch()</code>, or <code>finally()</code> handlers or an <code>await</code> resuming.</p>
<p>The <code>before</code> callback will be called 0 to N times. The <code>before</code> callback
will typically be called 0 times if no continuation was ever made for the
promise. The <code>before</code> callback may be called many times in the case where
many continuations have been made from the same promise.</p>",1,,
1106,after,,after,after,"<p>Called immediately after a promise continuation executes. This may be after a
<code>then()</code>, <code>catch()</code>, or <code>finally()</code> handler or before an <code>await</code> after another
<code>await</code>.</p>",1,,
1107,settled,,settled,settled,"<p>Called when the promise receives a resolution or rejection value. This may
occur synchronously in the case of <code>Promise.resolve()</code> or <code>Promise.reject()</code>.</p>",1,,
1108,v8,,addSerializeCallback,v8.startupSnapshot.addSerializeCallback,"<p>Add a callback that will be called when the Node.js instance is about to
get serialized into a snapshot and exit. This can be used to release
resources that should not or cannot be serialized or to convert user data
into a form more suitable for serialization.</p>",2,,
1109,v8,,addDeserializeCallback,v8.startupSnapshot.addDeserializeCallback,"<p>Add a callback that will be called when the Node.js instance is deserialized
from a snapshot. The <code>callback</code> and the <code>data</code> (if provided) will be
serialized into the snapshot, they can be used to re-initialize the state
of the application or to re-acquire resources that the application needs
when the application is restarted from the snapshot.</p>",2,,
1110,v8,,setDeserializeMainFunction,v8.startupSnapshot.setDeserializeMainFunction,"<p>This sets the entry point of the Node.js application when it is deserialized
from a snapshot. This can be called only once in the snapshot building
script. If called, the deserialized application no longer needs an additional
entry point script to start up and will simply invoke the callback along with
the deserialized data (if provided), otherwise an entry point script still
needs to be provided to the deserialized application.</p>",2,,
1111,v8,,isBuildingSnapshot,v8.startupSnapshot.isBuildingSnapshot,<p>Returns true if the Node.js instance is run to build a snapshot.</p>,0,,
1112,vm,,compileFunction,vm.compileFunction,"<p>Compiles the given code into the provided context (if no context is
supplied, the current context is used), and returns it wrapped inside a
function with the given <code>params</code>.</p>",3,40,
1113,vm,,createContext,vm.createContext,"<p>If given a <code>contextObject</code>, the <code>vm.createContext()</code> method will <a href=""vm.html#what-does-it-mean-to-contextify-an-object"">prepare
that object</a> so that it can be used in calls to
<a href=""vm.html#vmrunincontextcode-contextifiedobject-options""><code>vm.runInContext()</code></a> or <a href=""vm.html#scriptrunincontextcontextifiedobject-options""><code>script.runInContext()</code></a>. Inside such scripts,
the <code>contextObject</code> will be the global object, retaining all of its existing
properties but also having the built-in objects and functions any standard
<a href=""https://es5.github.io/#x15.1"">global object</a> has. Outside of scripts run by the vm module, global variables
will remain unchanged.</p>
<pre><code class=""language-js"">const vm = require('node:vm');

global.globalVar = 3;

const context = { globalVar: 1 };
vm.createContext(context);

vm.runInContext('globalVar *= 2;', context);

console.log(context);
// Prints: { globalVar: 2 }

console.log(global.globalVar);
// Prints: 3
</code></pre>
<p>If <code>contextObject</code> is omitted (or passed explicitly as <code>undefined</code>), a new,
empty <a href=""vm.html#what-does-it-mean-to-contextify-an-object"">contextified</a> object will be returned.</p>
<p>The <code>vm.createContext()</code> method is primarily useful for creating a single
context that can be used to run multiple scripts. For instance, if emulating a
web browser, the method can be used to create a single context representing a
window's global object, then run all <code>&#x3C;script></code> tags together within that
context.</p>
<p>The provided <code>name</code> and <code>origin</code> of the context are made visible through the
Inspector API.</p>",2,Others,
1114,vm,,isContext,vm.isContext,"<p>Returns <code>true</code> if the given <code>object</code> object has been <a href=""vm.html#what-does-it-mean-to-contextify-an-object"">contextified</a> using
<a href=""vm.html#vmcreatecontextcontextobject-options""><code>vm.createContext()</code></a>.</p>",1,Others,
1115,vm,,measureMemory,vm.measureMemory,"<p>Measure the memory known to V8 and used by all contexts known to the
current V8 isolate, or the main context.</p>
<ul>
<li><code>options</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a> Optional.
<ul>
<li><code>mode</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Either <code>'summary'</code> or <code>'detailed'</code>. In summary mode,
only the memory measured for the main context will be returned. In
detailed mode, the memory measured for all contexts known to the
current V8 isolate will be returned.
<strong>Default:</strong> <code>'summary'</code></li>
<li><code>execution</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Either <code>'default'</code> or <code>'eager'</code>. With default
execution, the promise will not resolve until after the next scheduled
garbage collection starts, which may take a while (or never if the program
exits before the next GC). With eager execution, the GC will be started
right away to measure the memory.
<strong>Default:</strong> <code>'default'</code></li>
</ul>
</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> If the memory is successfully measured, the promise will
resolve with an object containing information about the memory usage.
Otherwise it will be rejected with an <code>ERR_CONTEXT_NOT_INITIALIZED</code> error.</li>
</ul>
<p>The format of the object that the returned Promise may resolve with is
specific to the V8 engine and may change from one version of V8 to the next.</p>
<p>The returned result is different from the statistics returned by
<code>v8.getHeapSpaceStatistics()</code> in that <code>vm.measureMemory()</code> measure the
memory reachable by each V8 specific contexts in the current instance of
the V8 engine, while the result of <code>v8.getHeapSpaceStatistics()</code> measure
the memory occupied by each heap space in the current V8 instance.</p>
<pre><code class=""language-js"">const vm = require('node:vm');
// Measure the memory used by the main context.
vm.measureMemory({ mode: 'summary' })
  // This is the same as vm.measureMemory()
  .then((result) => {
    // The current format is:
    // {
    //   total: {
    //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]
    //    }
    // }
    console.log(result);
  });

const context = vm.createContext({ a: 1 });
vm.measureMemory({ mode: 'detailed', execution: 'eager' })
  .then((result) => {
    // Reference the context here so that it won't be GC'ed
    // until the measurement is complete.
    console.log(context.a);
    // {
    //   total: {
    //     jsMemoryEstimate: 2574732,
    //     jsMemoryRange: [ 2574732, 2904372 ]
    //   },
    //   current: {
    //     jsMemoryEstimate: 2438996,
    //     jsMemoryRange: [ 2438996, 2768636 ]
    //   },
    //   other: [
    //     {
    //       jsMemoryEstimate: 135736,
    //       jsMemoryRange: [ 135736, 465376 ]
    //     }
    //   ]
    // }
    console.log(result);
  });
</code></pre>",0,Others,
1116,vm,,runInContext,vm.runInContext,"<p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of
the <code>contextifiedObject</code>, then returns the result. Running code does not have
access to the local scope. The <code>contextifiedObject</code> object <em>must</em> have been
previously <a href=""vm.html#what-does-it-mean-to-contextify-an-object"">contextified</a> using the <a href=""vm.html#vmcreatecontextcontextobject-options""><code>vm.createContext()</code></a> method.</p>
<p>If <code>options</code> is a string, then it specifies the filename.</p>
<p>The following example compiles and executes different scripts using a single
<a href=""vm.html#what-does-it-mean-to-contextify-an-object"">contextified</a> object:</p>
<pre><code class=""language-js"">const vm = require('node:vm');

const contextObject = { globalVar: 1 };
vm.createContext(contextObject);

for (let i = 0; i &#x3C; 10; ++i) {
  vm.runInContext('globalVar *= 2;', contextObject);
}
console.log(contextObject);
// Prints: { globalVar: 1024 }
</code></pre>",3,39,
1117,vm,,runInNewContext,vm.runInNewContext,"<p>The <code>vm.runInNewContext()</code> first contextifies the given <code>contextObject</code> (or
creates a new <code>contextObject</code> if passed as <code>undefined</code>), compiles the <code>code</code>,
runs it within the created context, then returns the result. Running code
does not have access to the local scope.</p>
<p>If <code>options</code> is a string, then it specifies the filename.</p>
<p>The following example compiles and executes code that increments a global
variable and sets a new one. These globals are contained in the <code>contextObject</code>.</p>
<pre><code class=""language-js"">const vm = require('node:vm');

const contextObject = {
  animal: 'cat',
  count: 2,
};

vm.runInNewContext('count += 1; name = ""kitty""', contextObject);
console.log(contextObject);
// Prints: { animal: 'cat', count: 3, name: 'kitty' }
</code></pre>",3,39,
1118,vm,,runInThisContext,vm.runInThisContext,"<p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the
current <code>global</code> and returns the result. Running code does not have access to
local scope, but does have access to the current <code>global</code> object.</p>
<p>If <code>options</code> is a string, then it specifies the filename.</p>
<p>The following example illustrates using both <code>vm.runInThisContext()</code> and
the JavaScript <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval""><code>eval()</code></a> function to run the same code:</p>
<!-- eslint-disable prefer-const -->
<pre><code class=""language-js"">const vm = require('node:vm');
let localVar = 'initial value';

const vmResult = vm.runInThisContext('localVar = ""vm"";');
console.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);
// Prints: vmResult: 'vm', localVar: 'initial value'

const evalResult = eval('localVar = ""eval"";');
console.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);
// Prints: evalResult: 'eval', localVar: 'eval'
</code></pre>
<p>Because <code>vm.runInThisContext()</code> does not have access to the local scope,
<code>localVar</code> is unchanged. In contrast, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval""><code>eval()</code></a> <em>does</em> have access to the
local scope, so the value <code>localVar</code> is changed. In this way
<code>vm.runInThisContext()</code> is much like an <a href=""https://es5.github.io/#x10.4.2"">indirect <code>eval()</code> call</a>, e.g.
<code>(0,eval)('code')</code>.</p>
<h2>Example: Running an HTTP server within a VM</h2>
<p>When using either <a href=""vm.html#scriptruninthiscontextoptions""><code>script.runInThisContext()</code></a> or
<a href=""vm.html#vmruninthiscontextcode-options""><code>vm.runInThisContext()</code></a>, the code is executed within the current V8 global
context. The code passed to this VM context will have its own isolated scope.</p>
<p>In order to run a simple web server using the <code>node:http</code> module the code passed
to the context must either call <code>require('node:http')</code> on its own, or have a
reference to the <code>node:http</code> module passed to it. For instance:</p>
<pre><code class=""language-js"">'use strict';
const vm = require('node:vm');

const code = `
((require) => {
  const http = require('node:http');

  http.createServer((request, response) => {
    response.writeHead(200, { 'Content-Type': 'text/plain' });
    response.end('Hello World\\n');
  }).listen(8124);

  console.log('Server running at http://127.0.0.1:8124/');
})`;

vm.runInThisContext(code)(require);
</code></pre>
<p>The <code>require()</code> in the above case shares the state with the context it is
passed from. This may introduce risks when untrusted code is executed, e.g.
altering objects in the context in unwanted ways.</p>",2,39,
1119,script,,createCachedData,script.createCachedData,"<p>Creates a code cache that can be used with the <code>Script</code> constructor's
<code>cachedData</code> option. Returns a <code>Buffer</code>. This method may be called at any
time and any number of times.</p>
<p>The code cache of the <code>Script</code> doesn't contain any JavaScript observable
states. The code cache is safe to be saved along side the script source and
used to construct new <code>Script</code> instances multiple times.</p>
<p>Functions in the <code>Script</code> source can be marked as lazily compiled and they are
not compiled at construction of the <code>Script</code>. These functions are going to be
compiled when they are invoked the first time. The code cache serializes the
metadata that V8 currently knows about the <code>Script</code> that it can use to speed up
future compilations.</p>
<pre><code class=""language-js"">const script = new vm.Script(`
function add(a, b) {
  return a + b;
}

const x = add(1, 2);
`);

const cacheWithoutAdd = script.createCachedData();
// In `cacheWithoutAdd` the function `add()` is marked for full compilation
// upon invocation.

script.runInThisContext();

const cacheWithAdd = script.createCachedData();
// `cacheWithAdd` contains fully compiled function `add()`.
</code></pre>",0,Others,
1120,script,,runInContext,script.runInContext,"<p>Runs the compiled code contained by the <code>vm.Script</code> object within the given
<code>contextifiedObject</code> and returns the result. Running code does not have access
to local scope.</p>
<p>The following example compiles code that increments a global variable, sets
the value of another global variable, then execute the code multiple times.
The globals are contained in the <code>context</code> object.</p>
<pre><code class=""language-js"">const vm = require('node:vm');

const context = {
  animal: 'cat',
  count: 2,
};

const script = new vm.Script('count += 1; name = ""kitty"";');

vm.createContext(context);
for (let i = 0; i &#x3C; 10; ++i) {
  script.runInContext(context);
}

console.log(context);
// Prints: { animal: 'cat', count: 12, name: 'kitty' }
</code></pre>
<p>Using the <code>timeout</code> or <code>breakOnSigint</code> options will result in new event loops
and corresponding threads being started, which have a non-zero performance
overhead.</p>",2,39,
1121,script,,runInNewContext,script.runInNewContext,"<p>First contextifies the given <code>contextObject</code>, runs the compiled code contained
by the <code>vm.Script</code> object within the created context, and returns the result.
Running code does not have access to local scope.</p>
<p>The following example compiles code that sets a global variable, then executes
the code multiple times in different contexts. The globals are set on and
contained within each individual <code>context</code>.</p>
<pre><code class=""language-js"">const vm = require('node:vm');

const script = new vm.Script('globalVar = ""set""');

const contexts = [{}, {}, {}];
contexts.forEach((context) => {
  script.runInNewContext(context);
});

console.log(contexts);
// Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]
</code></pre>",2,39,
1122,script,,runInThisContext,script.runInThisContext,"<p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the
current <code>global</code> object. Running code does not have access to local scope, but
<em>does</em> have access to the current <code>global</code> object.</p>
<p>The following example compiles code that increments a <code>global</code> variable then
executes that code multiple times:</p>
<pre><code class=""language-js"">const vm = require('node:vm');

global.globalVar = 0;

const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });

for (let i = 0; i &#x3C; 1000; ++i) {
  script.runInThisContext();
}

console.log(globalVar);

// 1000
</code></pre>",1,39,
1123,module,,evaluate,module.evaluate,"<p>Evaluate the module.</p>
<p>This must be called after the module has been linked; otherwise it will reject.
It could be called also when the module has already been evaluated, in which
case it will either do nothing if the initial evaluation ended in success
(<code>module.status</code> is <code>'evaluated'</code>) or it will re-throw the exception that the
initial evaluation resulted in (<code>module.status</code> is <code>'errored'</code>).</p>
<p>This method cannot be called while the module is being evaluated
(<code>module.status</code> is <code>'evaluating'</code>).</p>
<p>Corresponds to the <a href=""https://tc39.es/ecma262/#sec-moduleevaluation"">Evaluate() concrete method</a> field of <a href=""https://tc39.es/ecma262/#sec-cyclic-module-records"">Cyclic Module
Record</a>s in the ECMAScript specification.</p>",1,,
1124,module,,link,module.link,"<p>Link module dependencies. This method must be called before evaluation, and
can only be called once per module.</p>
<p>The function is expected to return a <code>Module</code> object or a <code>Promise</code> that
eventually resolves to a <code>Module</code> object. The returned <code>Module</code> must satisfy the
following two invariants:</p>
<ul>
<li>It must belong to the same context as the parent <code>Module</code>.</li>
<li>Its <code>status</code> must not be <code>'errored'</code>.</li>
</ul>
<p>If the returned <code>Module</code>'s <code>status</code> is <code>'unlinked'</code>, this method will be
recursively called on the returned <code>Module</code> with the same provided <code>linker</code>
function.</p>
<p><code>link()</code> returns a <code>Promise</code> that will either get resolved when all linking
instances resolve to a valid <code>Module</code>, or rejected if the linker function either
throws an exception or returns an invalid <code>Module</code>.</p>
<p>The linker function roughly corresponds to the implementation-defined
<a href=""https://tc39.es/ecma262/#sec-hostresolveimportedmodule"">HostResolveImportedModule</a> abstract operation in the ECMAScript
specification, with a few key differences:</p>
<ul>
<li>The linker function is allowed to be asynchronous while
<a href=""https://tc39.es/ecma262/#sec-hostresolveimportedmodule"">HostResolveImportedModule</a> is synchronous.</li>
</ul>
<p>The actual <a href=""https://tc39.es/ecma262/#sec-hostresolveimportedmodule"">HostResolveImportedModule</a> implementation used during module
linking is one that returns the modules linked during linking. Since at
that point all modules would have been fully linked already, the
<a href=""https://tc39.es/ecma262/#sec-hostresolveimportedmodule"">HostResolveImportedModule</a> implementation is fully synchronous per
specification.</p>
<p>Corresponds to the <a href=""https://tc39.es/ecma262/#sec-moduledeclarationlinking"">Link() concrete method</a> field of <a href=""https://tc39.es/ecma262/#sec-cyclic-module-records"">Cyclic Module
Record</a>s in the ECMAScript specification.</p>",1,,
1125,sourceTextModule,,createCachedData,sourceTextModule.createCachedData,"<p>Creates a code cache that can be used with the <code>SourceTextModule</code> constructor's
<code>cachedData</code> option. Returns a <code>Buffer</code>. This method may be called any number
of times before the module has been evaluated.</p>
<p>The code cache of the <code>SourceTextModule</code> doesn't contain any JavaScript
observable states. The code cache is safe to be saved along side the script
source and used to construct new <code>SourceTextModule</code> instances multiple times.</p>
<p>Functions in the <code>SourceTextModule</code> source can be marked as lazily compiled
and they are not compiled at construction of the <code>SourceTextModule</code>. These
functions are going to be compiled when they are invoked the first time. The
code cache serializes the metadata that V8 currently knows about the
<code>SourceTextModule</code> that it can use to speed up future compilations.</p>
<pre><code class=""language-js"">// Create an initial module
const module = new vm.SourceTextModule('const a = 1;');

// Create cached data from this module
const cachedData = module.createCachedData();

// Create a new module using the cached data. The code must be the same.
const module2 = new vm.SourceTextModule('const a = 1;', { cachedData });
</code></pre>",0,,
1126,syntheticModule,,setExport,syntheticModule.setExport,"<p>This method is used after the module is linked to set the values of exports. If
it is called before the module is linked, an <a href=""errors.html#err_vm_module_status""><code>ERR_VM_MODULE_STATUS</code></a> error
will be thrown.</p>
<pre><code class=""language-mjs"">import vm from 'node:vm';

const m = new vm.SyntheticModule(['x'], () => {
  m.setExport('x', 1);
});

await m.link(() => {});
await m.evaluate();

assert.strictEqual(m.namespace.x, 1);
</code></pre>
<pre><code class=""language-cjs"">const vm = require('node:vm');
(async () => {
  const m = new vm.SyntheticModule(['x'], () => {
    m.setExport('x', 1);
  });
  await m.link(() => {});
  await m.evaluate();
  assert.strictEqual(m.namespace.x, 1);
})();
</code></pre>",2,,
1127,wasi,,getImportObject,wasi.getImportObject,"<p>Return an import object that can be passed to <code>WebAssembly.instantiate()</code> if
no other WASM imports are needed beyond those provided by WASI.</p>
<p>If version <code>unstable</code> was passed into the constructor it will return:</p>
<pre><code class=""language-json"">{ wasi_unstable: wasi.wasiImport }
</code></pre>
<p>If version <code>preview1</code> was passed into the constructor or no version was
specified it will return:</p>
<pre><code class=""language-json"">{ wasi_snapshot_preview1: wasi.wasiImport }
</code></pre>",0,,
1128,wasi,,start,wasi.start,"<p>Attempt to begin execution of <code>instance</code> as a WASI command by invoking its
<code>_start()</code> export. If <code>instance</code> does not contain a <code>_start()</code> export, or if
<code>instance</code> contains an <code>_initialize()</code> export, then an exception is thrown.</p>
<p><code>start()</code> requires that <code>instance</code> exports a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory""><code>WebAssembly.Memory</code></a> named
<code>memory</code>. If <code>instance</code> does not have a <code>memory</code> export an exception is thrown.</p>
<p>If <code>start()</code> is called more than once, an exception is thrown.</p>",1,,
1129,wasi,,initialize,wasi.initialize,"<p>Attempt to initialize <code>instance</code> as a WASI reactor by invoking its
<code>_initialize()</code> export, if it is present. If <code>instance</code> contains a <code>_start()</code>
export, then an exception is thrown.</p>
<p><code>initialize()</code> requires that <code>instance</code> exports a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory""><code>WebAssembly.Memory</code></a> named
<code>memory</code>. If <code>instance</code> does not have a <code>memory</code> export an exception is thrown.</p>
<p>If <code>initialize()</code> is called more than once, an exception is thrown.</p>",1,,
1130,crypto,,getRandomValues,crypto.getRandomValues,"<p>Generates cryptographically strong random values. The given <code>typedArray</code> is
filled with random values, and a reference to <code>typedArray</code> is returned.</p>
<p>The given <code>typedArray</code> must be an integer-based instance of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a>,
i.e. <code>Float32Array</code> and <code>Float64Array</code> are not accepted.</p>
<p>An error will be thrown if the given <code>typedArray</code> is larger than 65,536 bytes.</p>",1,Others,
1131,crypto,,randomUUID,crypto.randomUUID,"<p>Generates a random <a href=""https://www.rfc-editor.org/rfc/rfc4122.txt"">RFC 4122</a> version 4 UUID. The UUID is generated using a
cryptographic pseudorandom number generator.</p>",0,Others,
1132,subtle,,decrypt,subtle.decrypt,"<p>Using the method and parameters specified in <code>algorithm</code> and the keying
material provided by <code>key</code>, <code>subtle.decrypt()</code> attempts to decipher the
provided <code>data</code>. If successful, the returned promise will be resolved with
an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> containing the plaintext result.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'RSA-OAEP'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM</code>'</li>
</ul>",3,,
1133,subtle,,deriveBits,subtle.deriveBits,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-ecdhkeyderiveparams"" class=""type"">&lt;EcdhKeyDeriveParams&gt;</a> | <a href=""webcrypto.html#class-hkdfparams"" class=""type"">&lt;HkdfParams&gt;</a> | <a href=""webcrypto.html#class-pbkdf2params"" class=""type"">&lt;Pbkdf2Params&gt;</a></li>
<li><code>baseKey</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>length</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type"" class=""type"">&lt;number&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type"" class=""type"">&lt;null&gt;</a></li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Using the method and parameters specified in <code>algorithm</code> and the keying
material provided by <code>baseKey</code>, <code>subtle.deriveBits()</code> attempts to generate
<code>length</code> bits.</p>
<p>The Node.js implementation requires that when <code>length</code> is a
number it must be multiple of <code>8</code>.</p>
<p>When <code>length</code> is <code>null</code> the maximum number of bits for a given algorithm is
generated. This is allowed for the <code>'ECDH'</code>, <code>'X25519'</code>, and <code>'X448'</code>
algorithms.</p>
<p>If successful, the returned promise will be resolved with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>
containing the generated data.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'ECDH'</code></li>
<li><code>'X25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'X448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'HKDF'</code></li>
<li><code>'PBKDF2'</code></li>
</ul>",0,,
1134,subtle,,deriveKey,subtle.deriveKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-ecdhkeyderiveparams"" class=""type"">&lt;EcdhKeyDeriveParams&gt;</a> | <a href=""webcrypto.html#class-hkdfparams"" class=""type"">&lt;HkdfParams&gt;</a> | <a href=""webcrypto.html#class-pbkdf2params"" class=""type"">&lt;Pbkdf2Params&gt;</a></li>
<li><code>baseKey</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>derivedKeyAlgorithm</code>: <a href=""webcrypto.html#class-hmackeygenparams"" class=""type"">&lt;HmacKeyGenParams&gt;</a> | <a href=""webcrypto.html#class-aeskeygenparams"" class=""type"">&lt;AesKeyGenParams&gt;</a></li>
<li><code>extractable</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
<li><code>keyUsages</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a> See <a href=""webcrypto.html#cryptokeyusages"">Key usages</a>.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Using the method and parameters specified in <code>algorithm</code>, and the keying
material provided by <code>baseKey</code>, <code>subtle.deriveKey()</code> attempts to generate
a new <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> based on the method and parameters in <code>derivedKeyAlgorithm</code>.</p>
<p>Calling <code>subtle.deriveKey()</code> is equivalent to calling <code>subtle.deriveBits()</code> to
generate raw keying material, then passing the result into the
<code>subtle.importKey()</code> method using the <code>deriveKeyAlgorithm</code>, <code>extractable</code>, and
<code>keyUsages</code> parameters as input.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'ECDH'</code></li>
<li><code>'X25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'X448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'HKDF'</code></li>
<li><code>'PBKDF2'</code></li>
</ul>",0,,
1135,subtle,,digest,subtle.digest,"<p>Using the method identified by <code>algorithm</code>, <code>subtle.digest()</code> attempts to
generate a digest of <code>data</code>. If successful, the returned promise is resolved
with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> containing the computed digest.</p>
<p>If <code>algorithm</code> is provided as a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a>, it must be one of:</p>
<ul>
<li><code>'SHA-1'</code></li>
<li><code>'SHA-256'</code></li>
<li><code>'SHA-384'</code></li>
<li><code>'SHA-512'</code></li>
</ul>
<p>If <code>algorithm</code> is provided as an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" class=""type"">&lt;Object&gt;</a>, it must have a <code>name</code> property
whose value is one of the above.</p>",2,,
1136,subtle,,encrypt,subtle.encrypt,"<p>Using the method and parameters specified by <code>algorithm</code> and the keying
material provided by <code>key</code>, <code>subtle.encrypt()</code> attempts to encipher <code>data</code>.
If successful, the returned promise is resolved with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>
containing the encrypted result.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'RSA-OAEP'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM</code>'</li>
</ul>",3,,
1137,subtle,,exportKey,subtle.exportKey,"<p>Exports the given key into the specified format, if supported.</p>
<p>If the <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> is not extractable, the returned promise will reject.</p>
<p>When <code>format</code> is either <code>'pkcs8'</code> or <code>'spki'</code> and the export is successful,
the returned promise will be resolved with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> containing the
exported key data.</p>
<p>When <code>format</code> is <code>'jwk'</code> and the export is successful, the returned promise
will be resolved with a JavaScript object conforming to the <a href=""https://tools.ietf.org/html/rfc7517"">JSON Web Key</a>
specification.</p>
<table>
<thead>
<tr>
<th>Key Type</th>
<th><code>'spki'</code></th>
<th><code>'pkcs8'</code></th>
<th><code>'jwk'</code></th>
<th><code>'raw'</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'AES-CBC'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-CTR'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-GCM'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-KW'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'ECDH'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'ECDSA'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'HDKF'</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>'HMAC'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'PBKDF2'</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>'RSA-OAEP'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
<tr>
<td><code>'RSA-PSS'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
<tr>
<td><code>'RSASSA-PKCS1-v1_5'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
</tbody>
</table>",2,,
1138,subtle,,generateKey,subtle.generateKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsahashedkeygenparams"" class=""type"">&lt;RsaHashedKeyGenParams&gt;</a> | <a href=""webcrypto.html#class-eckeygenparams"" class=""type"">&lt;EcKeyGenParams&gt;</a> | <a href=""webcrypto.html#class-hmackeygenparams"" class=""type"">&lt;HmacKeyGenParams&gt;</a> | <a href=""webcrypto.html#class-aeskeygenparams"" class=""type"">&lt;AesKeyGenParams&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<ul>
<li><code>extractable</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
<li><code>keyUsages</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a> See <a href=""webcrypto.html#cryptokeyusages"">Key usages</a>.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> | <a href=""webcrypto.html#class-cryptokeypair"" class=""type"">&lt;CryptoKeyPair&gt;</a></li>
</ul>
<p>Using the method and parameters provided in <code>algorithm</code>, <code>subtle.generateKey()</code>
attempts to generate new keying material. Depending the method used, the method
may generate either a single <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> or a <a href=""webcrypto.html#class-cryptokeypair"" class=""type"">&lt;CryptoKeyPair&gt;</a>.</p>
<p>The <a href=""webcrypto.html#class-cryptokeypair"" class=""type"">&lt;CryptoKeyPair&gt;</a> (public and private key) generating algorithms supported
include:</p>
<ul>
<li><code>'RSASSA-PKCS1-v1_5'</code></li>
<li><code>'RSA-PSS'</code></li>
<li><code>'RSA-OAEP'</code></li>
<li><code>'ECDSA'</code></li>
<li><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'ECDH'</code></li>
<li><code>'X25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-3"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'X448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-4"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
</ul>
<p>The <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> (secret key) generating algorithms supported include:</p>
<ul>
<li><code>'HMAC'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM'</code></li>
<li><code>'AES-KW'</code></li>
</ul>",0,,
1139,subtle,,importKey,subtle.importKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsahashedimportparams"" class=""type"">&lt;RsaHashedImportParams&gt;</a> | <a href=""webcrypto.html#class-eckeyimportparams"" class=""type"">&lt;EcKeyImportParams&gt;</a> | <a href=""webcrypto.html#class-hmacimportparams"" class=""type"">&lt;HmacImportParams&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<ul>
<li><code>extractable</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
<li><code>keyUsages</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a> See <a href=""webcrypto.html#cryptokeyusages"">Key usages</a>.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
</ul>
<p>The <code>subtle.importKey()</code> method attempts to interpret the provided <code>keyData</code>
as the given <code>format</code> to create a <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> instance using the provided
<code>algorithm</code>, <code>extractable</code>, and <code>keyUsages</code> arguments. If the import is
successful, the returned promise will be resolved with the created <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>.</p>
<p>If importing a <code>'PBKDF2'</code> key, <code>extractable</code> must be <code>false</code>.</p>
<p>The algorithms currently supported include:</p>
<table>
<thead>
<tr>
<th>Key Type</th>
<th><code>'spki'</code></th>
<th><code>'pkcs8'</code></th>
<th><code>'jwk'</code></th>
<th><code>'raw'</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'AES-CBC'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-CTR'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-GCM'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'AES-KW'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'ECDH'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'X25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'X448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'ECDSA'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-3"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-4"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'HDKF'</code></td>
<td></td>
<td></td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td><code>'HMAC'</code></td>
<td></td>
<td></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>'PBKDF2'</code></td>
<td></td>
<td></td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td><code>'RSA-OAEP'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
<tr>
<td><code>'RSA-PSS'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
<tr>
<td><code>'RSASSA-PKCS1-v1_5'</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td></td>
</tr>
</tbody>
</table>",2,,
1140,subtle,,sign,subtle.sign,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsapssparams"" class=""type"">&lt;RsaPssParams&gt;</a> | <a href=""webcrypto.html#class-ecdsaparams"" class=""type"">&lt;EcdsaParams&gt;</a> | <a href=""webcrypto.html#class-ed448params"" class=""type"">&lt;Ed448Params&gt;</a></li>
<li><code>key</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>data</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a></li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Using the method and parameters given by <code>algorithm</code> and the keying material
provided by <code>key</code>, <code>subtle.sign()</code> attempts to generate a cryptographic
signature of <code>data</code>. If successful, the returned promise is resolved with
an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> containing the generated signature.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'RSASSA-PKCS1-v1_5'</code></li>
<li><code>'RSA-PSS'</code></li>
<li><code>'ECDSA'</code></li>
<li><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'HMAC'</code></li>
</ul>",0,,
1141,subtle,,unwrapKey,subtle.unwrapKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>unwrapAlgo</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsaoaepparams"" class=""type"">&lt;RsaOaepParams&gt;</a> | <a href=""webcrypto.html#class-aesctrparams"" class=""type"">&lt;AesCtrParams&gt;</a> | <a href=""webcrypto.html#class-aescbcparams"" class=""type"">&lt;AesCbcParams&gt;</a> | <a href=""webcrypto.html#class-aesgcmparams"" class=""type"">&lt;AesGcmParams&gt;</a></li>
<li><code>unwrappedKeyAlgo</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsahashedimportparams"" class=""type"">&lt;RsaHashedImportParams&gt;</a> | <a href=""webcrypto.html#class-eckeyimportparams"" class=""type"">&lt;EcKeyImportParams&gt;</a> | <a href=""webcrypto.html#class-hmacimportparams"" class=""type"">&lt;HmacImportParams&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<ul>
<li><code>extractable</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
<li><code>keyUsages</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string[]&gt;</a> See <a href=""webcrypto.html#cryptokeyusages"">Key usages</a>.</li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
</ul>
<p>In cryptography, ""wrapping a key"" refers to exporting and then encrypting the
keying material. The <code>subtle.unwrapKey()</code> method attempts to decrypt a wrapped
key and create a <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> instance. It is equivalent to calling
<code>subtle.decrypt()</code> first on the encrypted key data (using the <code>wrappedKey</code>,
<code>unwrapAlgo</code>, and <code>unwrappingKey</code> arguments as input) then passing the results
in to the <code>subtle.importKey()</code> method using the <code>unwrappedKeyAlgo</code>,
<code>extractable</code>, and <code>keyUsages</code> arguments as inputs. If successful, the returned
promise is resolved with a <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a> object.</p>
<p>The wrapping algorithms currently supported include:</p>
<ul>
<li><code>'RSA-OAEP'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM'</code></li>
<li><code>'AES-KW'</code></li>
</ul>
<p>The unwrapped key algorithms supported include:</p>
<ul>
<li><code>'RSASSA-PKCS1-v1_5'</code></li>
<li><code>'RSA-PSS'</code></li>
<li><code>'RSA-OAEP'</code></li>
<li><code>'ECDSA'</code></li>
<li><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'ECDH'</code></li>
<li><code>'X25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-3"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'X448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-4"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'HMAC'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM'</code></li>
<li><code>'AES-KW'</code></li>
</ul>",3,,
1142,subtle,,verify,subtle.verify,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>algorithm</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsapssparams"" class=""type"">&lt;RsaPssParams&gt;</a> | <a href=""webcrypto.html#class-ecdsaparams"" class=""type"">&lt;EcdsaParams&gt;</a> | <a href=""webcrypto.html#class-ed448params"" class=""type"">&lt;Ed448Params&gt;</a></li>
<li><code>key</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>signature</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a></li>
<li><code>data</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> | <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a></li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"" class=""type"">&lt;boolean&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>Using the method and parameters given in <code>algorithm</code> and the keying material
provided by <code>key</code>, <code>subtle.verify()</code> attempts to verify that <code>signature</code> is
a valid cryptographic signature of <code>data</code>. The returned promise is resolved
with either <code>true</code> or <code>false</code>.</p>
<p>The algorithms currently supported include:</p>
<ul>
<li><code>'RSASSA-PKCS1-v1_5'</code></li>
<li><code>'RSA-PSS'</code></li>
<li><code>'ECDSA'</code></li>
<li><code>'Ed25519'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'Ed448'</code> <span class=""experimental-inline""></span><sup><a href=""webcrypto.html#user-content-fn-1"" id=""user-content-fnref-1-2"" data-footnote-ref aria-describedby=""footnote-label"">1</a></sup></li>
<li><code>'HMAC'</code></li>
</ul>",0,,
1143,subtle,,wrapKey,subtle.wrapKey,"<!--lint disable maximum-line-length remark-lint-->
<ul>
<li><code>format</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"" class=""type"">&lt;string&gt;</a> Must be one of <code>'raw'</code>, <code>'pkcs8'</code>, <code>'spki'</code>, or <code>'jwk'</code>.</li>
<li><code>key</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>wrappingKey</code>: <a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a></li>
<li><code>wrapAlgo</code>: <a href=""webcrypto.html#class-algorithmidentifier"" class=""type"">&lt;AlgorithmIdentifier&gt;</a> | <a href=""webcrypto.html#class-rsaoaepparams"" class=""type"">&lt;RsaOaepParams&gt;</a> | <a href=""webcrypto.html#class-aesctrparams"" class=""type"">&lt;AesCtrParams&gt;</a> | <a href=""webcrypto.html#class-aescbcparams"" class=""type"">&lt;AesCbcParams&gt;</a> | <a href=""webcrypto.html#class-aesgcmparams"" class=""type"">&lt;AesGcmParams&gt;</a></li>
<li>Returns: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" class=""type"">&lt;Promise&gt;</a> containing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a></li>
</ul>
<!--lint enable maximum-line-length remark-lint-->
<p>In cryptography, ""wrapping a key"" refers to exporting and then encrypting the
keying material. The <code>subtle.wrapKey()</code> method exports the keying material into
the format identified by <code>format</code>, then encrypts it using the method and
parameters specified by <code>wrapAlgo</code> and the keying material provided by
<code>wrappingKey</code>. It is the equivalent to calling <code>subtle.exportKey()</code> using
<code>format</code> and <code>key</code> as the arguments, then passing the result to the
<code>subtle.encrypt()</code> method using <code>wrappingKey</code> and <code>wrapAlgo</code> as inputs. If
successful, the returned promise will be resolved with an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a>
containing the encrypted key data.</p>
<p>The wrapping algorithms currently supported include:</p>
<ul>
<li><code>'RSA-OAEP'</code></li>
<li><code>'AES-CTR'</code></li>
<li><code>'AES-CBC'</code></li>
<li><code>'AES-GCM'</code></li>
<li><code>'AES-KW'</code></li>
</ul>",0,,
1144,ReadableStream,,from,ReadableStream.from,"<p>A utility method that creates a new <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> from an iterable.</p>
<pre><code class=""language-mjs"">import { ReadableStream } from 'node:stream/web';

async function* asyncIterableGenerator() {
  yield 'a';
  yield 'b';
  yield 'c';
}

const stream = ReadableStream.from(asyncIterableGenerator());

for await (const chunk of stream)
  console.log(chunk); // Prints: 'a', 'b', 'c'
</code></pre>
<pre><code class=""language-cjs"">const { ReadableStream } = require('node:stream/web');

async function* asyncIterableGenerator() {
  yield 'a';
  yield 'b';
  yield 'c';
}

(async () => {
  const stream = ReadableStream.from(asyncIterableGenerator());

  for await (const chunk of stream)
    console.log(chunk); // Prints: 'a', 'b', 'c'
})();
</code></pre>",1,,
1145,readableStream,,cancel,readableStream.cancel,,1,,
1146,readableStream,,getReader,readableStream.getReader,"<pre><code class=""language-mjs"">import { ReadableStream } from 'node:stream/web';

const stream = new ReadableStream();

const reader = stream.getReader();

console.log(await reader.read());
</code></pre>
<pre><code class=""language-cjs"">const { ReadableStream } = require('node:stream/web');

const stream = new ReadableStream();

const reader = stream.getReader();

reader.read().then(console.log);
</code></pre>
<p>Causes the <code>readableStream.locked</code> to be <code>true</code>.</p>",1,38,
1147,readableStream,,pipeThrough,readableStream.pipeThrough,"<p>Connects this <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> to the pair of <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> and
<a href=""webstreams.html#class-writablestream"" class=""type"">&lt;WritableStream&gt;</a> provided in the <code>transform</code> argument such that the
data from this <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> is written in to <code>transform.writable</code>,
possibly transformed, then pushed to <code>transform.readable</code>. Once the
pipeline is configured, <code>transform.readable</code> is returned.</p>
<p>Causes the <code>readableStream.locked</code> to be <code>true</code> while the pipe operation
is active.</p>
<pre><code class=""language-mjs"">import {
  ReadableStream,
  TransformStream,
} from 'node:stream/web';

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

for await (const chunk of transformedStream)
  console.log(chunk);
  // Prints: A
</code></pre>
<pre><code class=""language-cjs"">const {
  ReadableStream,
  TransformStream,
} = require('node:stream/web');

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

(async () => {
  for await (const chunk of transformedStream)
    console.log(chunk);
    // Prints: A
})();
</code></pre>",2,,
1148,readableStream,,pipeTo,readableStream.pipeTo,"<p>Causes the <code>readableStream.locked</code> to be <code>true</code> while the pipe operation
is active.</p>",2,,
1149,readableStream,,tee,readableStream.tee,"<p>Returns a pair of new <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> instances to which this
<code>ReadableStream</code>'s data will be forwarded. Each will receive the
same data.</p>
<p>Causes the <code>readableStream.locked</code> to be <code>true</code>.</p>",0,,
1150,readableStream,,values,readableStream.values,"<p>Creates and returns an async iterator usable for consuming this
<code>ReadableStream</code>'s data.</p>
<p>Causes the <code>readableStream.locked</code> to be <code>true</code> while the async iterator
is active.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const stream = new ReadableStream(getSomeSource());

for await (const chunk of stream.values({ preventCancel: true }))
  console.log(Buffer.from(chunk).toString());
</code></pre>",1,,
1151,readableStreamDefaultReader,,cancel,readableStreamDefaultReader.cancel,"<p>Cancels the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> and returns a promise that is fulfilled
when the underlying stream has been canceled.</p>",1,,
1152,readableStreamDefaultReader,,read,readableStreamDefaultReader.read,"<p>Requests the next chunk of data from the underlying <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>
and returns a promise that is fulfilled with the data once it is
available.</p>",0,,
1153,readableStreamDefaultReader,,releaseLock,readableStreamDefaultReader.releaseLock,"<p>Releases this reader's lock on the underlying <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>.</p>",0,,
1154,readableStreamBYOBReader,,cancel,readableStreamBYOBReader.cancel,"<p>Cancels the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> and returns a promise that is fulfilled
when the underlying stream has been canceled.</p>",1,,
1155,readableStreamBYOBReader,,read,readableStreamBYOBReader.read,"<p>Requests the next chunk of data from the underlying <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>
and returns a promise that is fulfilled with the data once it is
available.</p>
<p>Do not pass a pooled <a href=""buffer.html#class-buffer"" class=""type"">&lt;Buffer&gt;</a> object instance in to this method.
Pooled <code>Buffer</code> objects are created using <code>Buffer.allocUnsafe()</code>,
or <code>Buffer.from()</code>, or are often returned by various <code>node:fs</code> module
callbacks. These types of <code>Buffer</code>s use a shared underlying
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" class=""type"">&lt;ArrayBuffer&gt;</a> object that contains all of the data from all of
the pooled <code>Buffer</code> instances. When a <code>Buffer</code>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"" class=""type"">&lt;TypedArray&gt;</a>,
or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"" class=""type"">&lt;DataView&gt;</a> is passed in to <code>readableStreamBYOBReader.read()</code>,
the view's underlying <code>ArrayBuffer</code> is <em>detached</em>, invalidating
all existing views that may exist on that <code>ArrayBuffer</code>. This
can have disastrous consequences for your application.</p>",1,,
1156,readableStreamBYOBReader,,releaseLock,readableStreamBYOBReader.releaseLock,"<p>Releases this reader's lock on the underlying <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>.</p>",0,,
1157,readableStreamDefaultController,,close,readableStreamDefaultController.close,"<p>Closes the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> to which this controller is associated.</p>",0,,
1158,readableStreamDefaultController,,enqueue,readableStreamDefaultController.enqueue,"<p>Appends a new chunk of data to the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>'s queue.</p>",1,,
1159,readableStreamDefaultController,,error,readableStreamDefaultController.error,"<p>Signals an error that causes the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> to error and close.</p>",1,,
1160,readableByteStreamController,,close,readableByteStreamController.close,"<p>Closes the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> to which this controller is associated.</p>",0,,
1161,readableByteStreamController,,enqueue,readableByteStreamController.enqueue,"<p>Appends a new chunk of data to the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>'s queue.</p>",1,,
1162,readableByteStreamController,,error,readableByteStreamController.error,"<p>Signals an error that causes the <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a> to error and close.</p>",1,,
1163,readableStreamBYOBRequest,,respond,readableStreamBYOBRequest.respond,"<p>Signals that a <code>bytesWritten</code> number of bytes have been written
to <code>readableStreamBYOBRequest.view</code>.</p>",1,,
1164,readableStreamBYOBRequest,,respondWithNewView,readableStreamBYOBRequest.respondWithNewView,"<p>Signals that the request has been fulfilled with bytes written
to a new <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code>.</p>",1,,
1165,writableStream,,abort,writableStream.abort,"<p>Abruptly terminates the <code>WritableStream</code>. All queued writes will be
canceled with their associated promises rejected.</p>",1,,
1166,writableStream,,close,writableStream.close,<p>Closes the <code>WritableStream</code> when no additional writes are expected.</p>,0,,
1167,writableStream,,getWriter,writableStream.getWriter,"<p>Creates and returns a new writer instance that can be used to write
data into the <code>WritableStream</code>.</p>",0,,
1168,writableStreamDefaultWriter,,abort,writableStreamDefaultWriter.abort,"<p>Abruptly terminates the <code>WritableStream</code>. All queued writes will be
canceled with their associated promises rejected.</p>",1,,
1169,writableStreamDefaultWriter,,close,writableStreamDefaultWriter.close,<p>Closes the <code>WritableStream</code> when no additional writes are expected.</p>,0,,
1170,writableStreamDefaultWriter,,releaseLock,writableStreamDefaultWriter.releaseLock,"<p>Releases this writer's lock on the underlying <a href=""webstreams.html#class-readablestream"" class=""type"">&lt;ReadableStream&gt;</a>.</p>",0,,
1171,writableStreamDefaultWriter,,write,writableStreamDefaultWriter.write,"<p>Appends a new chunk of data to the <a href=""webstreams.html#class-writablestream"" class=""type"">&lt;WritableStream&gt;</a>'s queue.</p>",1,,
1172,writableStreamDefaultController,,error,writableStreamDefaultController.error,"<p>Called by user-code to signal that an error has occurred while processing
the <code>WritableStream</code> data. When called, the <a href=""webstreams.html#class-writablestream"" class=""type"">&lt;WritableStream&gt;</a> will be aborted,
with currently pending writes canceled.</p>",1,,
1173,transformStreamDefaultController,,enqueue,transformStreamDefaultController.enqueue,"<p>Appends a chunk of data to the readable side's queue.</p>",1,,
1174,transformStreamDefaultController,,error,transformStreamDefaultController.error,"<p>Signals to both the readable and writable side that an error has occurred
while processing the transform data, causing both sides to be abruptly
closed.</p>",1,,
1175,transformStreamDefaultController,,terminate,transformStreamDefaultController.terminate,"<p>Closes the readable side of the transport and causes the writable side
to be abruptly closed with an error.</p>",0,,
1176,streamConsumers,,arrayBuffer,streamConsumers.arrayBuffer,"<pre><code class=""language-mjs"">import { arrayBuffer } from 'node:stream/consumers';
import { Readable } from 'node:stream';
import { TextEncoder } from 'node:util';

const encoder = new TextEncoder();
const dataArray = encoder.encode('hello world from consumers!');

const readable = Readable.from(dataArray);
const data = await arrayBuffer(readable);
console.log(`from readable: ${data.byteLength}`);
// Prints: from readable: 76
</code></pre>
<pre><code class=""language-cjs"">const { arrayBuffer } = require('node:stream/consumers');
const { Readable } = require('node:stream');
const { TextEncoder } = require('node:util');

const encoder = new TextEncoder();
const dataArray = encoder.encode('hello world from consumers!');
const readable = Readable.from(dataArray);
arrayBuffer(readable).then((data) => {
  console.log(`from readable: ${data.byteLength}`);
  // Prints: from readable: 76
});
</code></pre>",1,,
1177,streamConsumers,,blob,streamConsumers.blob,"<pre><code class=""language-mjs"">import { blob } from 'node:stream/consumers';

const dataBlob = new Blob(['hello world from consumers!']);

const readable = dataBlob.stream();
const data = await blob(readable);
console.log(`from readable: ${data.size}`);
// Prints: from readable: 27
</code></pre>
<pre><code class=""language-cjs"">const { blob } = require('node:stream/consumers');

const dataBlob = new Blob(['hello world from consumers!']);

const readable = dataBlob.stream();
blob(readable).then((data) => {
  console.log(`from readable: ${data.size}`);
  // Prints: from readable: 27
});
</code></pre>",1,,
1178,streamConsumers,,buffer,streamConsumers.buffer,"<pre><code class=""language-mjs"">import { buffer } from 'node:stream/consumers';
import { Readable } from 'node:stream';
import { Buffer } from 'node:buffer';

const dataBuffer = Buffer.from('hello world from consumers!');

const readable = Readable.from(dataBuffer);
const data = await buffer(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 27
</code></pre>
<pre><code class=""language-cjs"">const { buffer } = require('node:stream/consumers');
const { Readable } = require('node:stream');
const { Buffer } = require('node:buffer');

const dataBuffer = Buffer.from('hello world from consumers!');

const readable = Readable.from(dataBuffer);
buffer(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 27
});
</code></pre>",1,,
1179,streamConsumers,,json,streamConsumers.json,"<pre><code class=""language-mjs"">import { json } from 'node:stream/consumers';
import { Readable } from 'node:stream';

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
const data = await json(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 100
</code></pre>
<pre><code class=""language-cjs"">const { json } = require('node:stream/consumers');
const { Readable } = require('node:stream');

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
json(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 100
});
</code></pre>",1,,
1180,streamConsumers,,text,streamConsumers.text,"<pre><code class=""language-mjs"">import { text } from 'node:stream/consumers';
import { Readable } from 'node:stream';

const readable = Readable.from('Hello world from consumers!');
const data = await text(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 27
</code></pre>
<pre><code class=""language-cjs"">const { text } = require('node:stream/consumers');
const { Readable } = require('node:stream');

const readable = Readable.from('Hello world from consumers!');
text(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 27
});
</code></pre>",1,,
1181,worker,,getEnvironmentData,worker.getEnvironmentData,"<p>Within a worker thread, <code>worker.getEnvironmentData()</code> returns a clone
of data passed to the spawning thread's <code>worker.setEnvironmentData()</code>.
Every new <code>Worker</code> receives its own copy of the environment data
automatically.</p>
<pre><code class=""language-js"">const {
  Worker,
  isMainThread,
  setEnvironmentData,
  getEnvironmentData,
} = require('node:worker_threads');

if (isMainThread) {
  setEnvironmentData('Hello', 'World!');
  const worker = new Worker(__filename);
} else {
  console.log(getEnvironmentData('Hello'));  // Prints 'World!'.
}
</code></pre>",1,,
1182,worker,,markAsUntransferable,worker.markAsUntransferable,"<p>Mark an object as not transferable. If <code>object</code> occurs in the transfer list of
a <a href=""worker_threads.html#portpostmessagevalue-transferlist""><code>port.postMessage()</code></a> call, an error is thrown. This is a no-op if
<code>object</code> is a primitive value.</p>
<p>In particular, this makes sense for objects that can be cloned, rather than
transferred, and which are used by other objects on the sending side.
For example, Node.js marks the <code>ArrayBuffer</code>s it uses for its
<a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer</code> pool</a> with this.</p>
<p>This operation cannot be undone.</p>
<pre><code class=""language-js"">const { MessageChannel, markAsUntransferable } = require('node:worker_threads');

const pooledBuffer = new ArrayBuffer(8);
const typedArray1 = new Uint8Array(pooledBuffer);
const typedArray2 = new Float64Array(pooledBuffer);

markAsUntransferable(pooledBuffer);

const { port1 } = new MessageChannel();
try {
  // This will throw an error, because pooledBuffer is not transferable.
  port1.postMessage(typedArray1, [ typedArray1.buffer ]);
} catch (error) {
  // error.name === 'DataCloneError'
}

// The following line prints the contents of typedArray1 -- it still owns
// its memory and has not been transferred. Without
// `markAsUntransferable()`, this would print an empty Uint8Array and the
// postMessage call would have succeeded.
// typedArray2 is intact as well.
console.log(typedArray1);
console.log(typedArray2);
</code></pre>
<p>There is no equivalent to this API in browsers.</p>",1,,
1183,worker,,isMarkedAsUntransferable,worker.isMarkedAsUntransferable,"<p>Check if an object is marked as not transferable with
<a href=""worker_threads.html#workermarkasuntransferableobject""><code>markAsUntransferable()</code></a>.</p>
<pre><code class=""language-js"">const { markAsUntransferable, isMarkedAsUntransferable } = require('node:worker_threads');

const pooledBuffer = new ArrayBuffer(8);
markAsUntransferable(pooledBuffer);

isMarkedAsUntransferable(pooledBuffer);  // Returns true.
</code></pre>
<p>There is no equivalent to this API in browsers.</p>",1,,
1184,worker,,moveMessagePortToContext,worker.moveMessagePortToContext,"<p>Transfer a <code>MessagePort</code> to a different <a href=""vm.html""><code>vm</code></a> Context. The original <code>port</code>
object is rendered unusable, and the returned <code>MessagePort</code> instance
takes its place.</p>
<p>The returned <code>MessagePort</code> is an object in the target context and
inherits from its global <code>Object</code> class. Objects passed to the
<a href=""https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage""><code>port.onmessage()</code></a> listener are also created in the target context
and inherit from its global <code>Object</code> class.</p>
<p>However, the created <code>MessagePort</code> no longer inherits from
<a href=""https://developer.mozilla.org/en-US/docs/Web/API/EventTarget""><code>EventTarget</code></a>, and only <a href=""https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage""><code>port.onmessage()</code></a> can be used to receive
events using it.</p>",2,,
1185,worker,,receiveMessageOnPort,worker.receiveMessageOnPort,"<p>Receive a single message from a given <code>MessagePort</code>. If no message is available,
<code>undefined</code> is returned, otherwise an object with a single <code>message</code> property
that contains the message payload, corresponding to the oldest message in the
<code>MessagePort</code>'s queue.</p>
<pre><code class=""language-js"">const { MessageChannel, receiveMessageOnPort } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();
port1.postMessage({ hello: 'world' });

console.log(receiveMessageOnPort(port2));
// Prints: { message: { hello: 'world' } }
console.log(receiveMessageOnPort(port2));
// Prints: undefined
</code></pre>
<p>When this function is used, no <code>'message'</code> event is emitted and the
<code>onmessage</code> listener is not invoked.</p>",1,,
1186,worker,,setEnvironmentData,worker.setEnvironmentData,"<p>The <code>worker.setEnvironmentData()</code> API sets the content of
<code>worker.getEnvironmentData()</code> in the current thread and all new <code>Worker</code>
instances spawned from the current context.</p>",2,,
1187,broadcastChannel,,close,broadcastChannel.close,<p>Closes the <code>BroadcastChannel</code> connection.</p>,0,,
1188,broadcastChannel,,postMessage,broadcastChannel.postMessage,,1,Others,
1189,broadcastChannel,,ref,broadcastChannel.ref,"<p>Opposite of <code>unref()</code>. Calling <code>ref()</code> on a previously <code>unref()</code>ed
BroadcastChannel does <em>not</em> let the program exit if it's the only active handle
left (the default behavior). If the port is <code>ref()</code>ed, calling <code>ref()</code> again
has no effect.</p>",0,,
1190,broadcastChannel,,unref,broadcastChannel.unref,"<p>Calling <code>unref()</code> on a BroadcastChannel allows the thread to exit if this
is the only active handle in the event system. If the BroadcastChannel is
already <code>unref()</code>ed calling <code>unref()</code> again has no effect.</p>",0,,
1191,port,,close,port.close,"<p>Disables further sending of messages on either side of the connection.
This method can be called when no further communication will happen over this
<code>MessagePort</code>.</p>
<p>The <a href=""worker_threads.html#event-close""><code>'close'</code> event</a> is emitted on both <code>MessagePort</code> instances that
are part of the channel.</p>",0,38,
1192,port,,postMessage,port.postMessage,"<p>Sends a JavaScript value to the receiving side of this channel.
<code>value</code> is transferred in a way which is compatible with
the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"">HTML structured clone algorithm</a>.</p>
<p>In particular, the significant differences to <code>JSON</code> are:</p>
<ul>
<li><code>value</code> may contain circular references.</li>
<li><code>value</code> may contain instances of builtin JS types such as <code>RegExp</code>s,
<code>BigInt</code>s, <code>Map</code>s, <code>Set</code>s, etc.</li>
<li><code>value</code> may contain typed arrays, both using <code>ArrayBuffer</code>s
and <code>SharedArrayBuffer</code>s.</li>
<li><code>value</code> may contain <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module""><code>WebAssembly.Module</code></a> instances.</li>
<li><code>value</code> may not contain native (C++-backed) objects other than:
<ul>
<li><a href=""webcrypto.html#class-cryptokey"" class=""type"">&lt;CryptoKey&gt;</a>s,</li>
<li><a href=""fs.html#class-filehandle"" class=""type"">&lt;FileHandle&gt;</a>s,</li>
<li><a href=""perf_hooks.html#class-histogram"" class=""type"">&lt;Histogram&gt;</a>s,</li>
<li><a href=""crypto.html#class-keyobject"" class=""type"">&lt;KeyObject&gt;</a>s,</li>
<li><a href=""worker_threads.html#class-messageport"" class=""type"">&lt;MessagePort&gt;</a>s,</li>
<li><a href=""net.html#class-netblocklist"" class=""type"">&lt;net.BlockList&gt;</a>s,</li>
<li><a href=""net.html#class-netsocketaddress"" class=""type"">&lt;net.SocketAddress&gt;</a>es,</li>
<li><a href=""crypto.html#class-x509certificate"" class=""type"">&lt;X509Certificate&gt;</a>s.</li>
</ul>
</li>
</ul>
<pre><code class=""language-js"">const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const circularData = {};
circularData.foo = circularData;
// Prints: { foo: [Circular] }
port2.postMessage(circularData);
</code></pre>
<p><code>transferList</code> may be a list of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer""><code>ArrayBuffer</code></a>, <a href=""worker_threads.html#class-messageport""><code>MessagePort</code></a>, and
<a href=""fs.html#class-filehandle""><code>FileHandle</code></a> objects.
After transferring, they are not usable on the sending side of the channel
anymore (even if they are not contained in <code>value</code>). Unlike with
<a href=""child_process.html"">child processes</a>, transferring handles such as network sockets is currently
not supported.</p>
<p>If <code>value</code> contains <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer""><code>SharedArrayBuffer</code></a> instances, those are accessible
from either thread. They cannot be listed in <code>transferList</code>.</p>
<p><code>value</code> may still contain <code>ArrayBuffer</code> instances that are not in
<code>transferList</code>; in that case, the underlying memory is copied rather than moved.</p>
<pre><code class=""language-js"">const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);
// This posts a copy of `uint8Array`:
port2.postMessage(uint8Array);
// This does not copy data, but renders `uint8Array` unusable:
port2.postMessage(uint8Array, [ uint8Array.buffer ]);

// The memory for the `sharedUint8Array` is accessible from both the
// original and the copy received by `.on('message')`:
const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));
port2.postMessage(sharedUint8Array);

// This transfers a freshly created message port to the receiver.
// This can be used, for example, to create communication channels between
// multiple `Worker` threads that are children of the same parent thread.
const otherChannel = new MessageChannel();
port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);
</code></pre>
<p>The message object is cloned immediately, and can be modified after
posting without having side effects.</p>
<p>For more information on the serialization and deserialization mechanisms
behind this API, see the <a href=""v8.html#serialization-api"">serialization API of the <code>node:v8</code> module</a>.</p>",2,28,
1193,port,,hasRef,port.hasRef,"<p>If true, the <code>MessagePort</code> object will keep the Node.js event loop active.</p>",0,,
1194,port,,ref,port.ref,"<p>Opposite of <code>unref()</code>. Calling <code>ref()</code> on a previously <code>unref()</code>ed port does
<em>not</em> let the program exit if it's the only active handle left (the default
behavior). If the port is <code>ref()</code>ed, calling <code>ref()</code> again has no effect.</p>
<p>If listeners are attached or removed using <code>.on('message')</code>, the port
is <code>ref()</code>ed and <code>unref()</code>ed automatically depending on whether
listeners for the event exist.</p>",0,,
1195,port,,start,port.start,"<p>Starts receiving messages on this <code>MessagePort</code>. When using this port
as an event emitter, this is called automatically once <code>'message'</code>
listeners are attached.</p>
<p>This method exists for parity with the Web <code>MessagePort</code> API. In Node.js,
it is only useful for ignoring messages when no event listener is present.
Node.js also diverges in its handling of <code>.onmessage</code>. Setting it
automatically calls <code>.start()</code>, but unsetting it lets messages queue up
until a new handler is set or the port is discarded.</p>",0,,
1196,port,,unref,port.unref,"<p>Calling <code>unref()</code> on a port allows the thread to exit if this is the only
active handle in the event system. If the port is already <code>unref()</code>ed calling
<code>unref()</code> again has no effect.</p>
<p>If listeners are attached or removed using <code>.on('message')</code>, the port is
<code>ref()</code>ed and <code>unref()</code>ed automatically depending on whether
listeners for the event exist.</p>",0,,
1197,worker,,getHeapSnapshot,worker.getHeapSnapshot,"<p>Returns a readable stream for a V8 snapshot of the current state of the Worker.
See <a href=""v8.html#v8getheapsnapshotoptions""><code>v8.getHeapSnapshot()</code></a> for more details.</p>
<p>If the Worker thread is no longer running, which may occur before the
<a href=""worker_threads.html#event-exit""><code>'exit'</code> event</a> is emitted, the returned <code>Promise</code> is rejected
immediately with an <a href=""errors.html#err_worker_not_running""><code>ERR_WORKER_NOT_RUNNING</code></a> error.</p>",1,,
1198,worker,,postMessage,worker.postMessage,"<p>Send a message to the worker that is received via
<a href=""worker_threads.html#event-message""><code>require('node:worker_threads').parentPort.on('message')</code></a>.
See <a href=""worker_threads.html#portpostmessagevalue-transferlist""><code>port.postMessage()</code></a> for more details.</p>",2,Others,
1199,worker,,ref,worker.ref,"<p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref()</code>ed worker does
<em>not</em> let the program exit if it's the only active handle left (the default
behavior). If the worker is <code>ref()</code>ed, calling <code>ref()</code> again has
no effect.</p>",0,,
1200,worker,,terminate,worker.terminate,"<p>Stop all JavaScript execution in the worker thread as soon as possible.
Returns a Promise for the exit code that is fulfilled when the
<a href=""worker_threads.html#event-exit""><code>'exit'</code> event</a> is emitted.</p>",0,35,
1201,worker,,unref,worker.unref,"<p>Calling <code>unref()</code> on a worker allows the thread to exit if this is the only
active handle in the event system. If the worker is already <code>unref()</code>ed calling
<code>unref()</code> again has no effect.</p>",0,,
1202,zlib,,createBrotliCompress,zlib.createBrotliCompress,"<p>Creates and returns a new <a href=""zlib.html#class-zlibbrotlicompress""><code>BrotliCompress</code></a> object.</p>",1,Others,
1203,zlib,,createBrotliDecompress,zlib.createBrotliDecompress,"<p>Creates and returns a new <a href=""zlib.html#class-zlibbrotlidecompress""><code>BrotliDecompress</code></a> object.</p>",1,Others,
1204,zlib,,createDeflate,zlib.createDeflate,"<p>Creates and returns a new <a href=""zlib.html#class-zlibdeflate""><code>Deflate</code></a> object.</p>",1,Others,
1205,zlib,,createDeflateRaw,zlib.createDeflateRaw,"<p>Creates and returns a new <a href=""zlib.html#class-zlibdeflateraw""><code>DeflateRaw</code></a> object.</p>
<p>An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when <code>windowBits</code>
is set to 8 for raw deflate streams. zlib would automatically set <code>windowBits</code>
to 9 if was initially set to 8. Newer versions of zlib will throw an exception,
so Node.js restored the original behavior of upgrading a value of 8 to 9,
since passing <code>windowBits = 9</code> to zlib actually results in a compressed stream
that effectively uses an 8-bit window only.</p>",1,Others,
1206,zlib,,createGunzip,zlib.createGunzip,"<p>Creates and returns a new <a href=""zlib.html#class-zlibgunzip""><code>Gunzip</code></a> object.</p>",1,Others,
1207,zlib,,createGzip,zlib.createGzip,"<p>Creates and returns a new <a href=""zlib.html#class-zlibgzip""><code>Gzip</code></a> object.
See <a href=""zlib.html#zlib"">example</a>.</p>",1,Others,
1208,zlib,,createInflate,zlib.createInflate,"<p>Creates and returns a new <a href=""zlib.html#class-zlibinflate""><code>Inflate</code></a> object.</p>",1,Others,
1209,zlib,,createInflateRaw,zlib.createInflateRaw,"<p>Creates and returns a new <a href=""zlib.html#class-zlibinflateraw""><code>InflateRaw</code></a> object.</p>",1,Others,
1210,zlib,,createUnzip,zlib.createUnzip,"<p>Creates and returns a new <a href=""zlib.html#class-zlibunzip""><code>Unzip</code></a> object.</p>",1,Others,
1211,zlib,,brotliCompress,zlib.brotliCompress,,3,15,
1212,zlib,,brotliCompressSync,zlib.brotliCompressSync,compress a chunk of data with BrotliCompress. ,2,15,
1213,zlib,,brotliDecompress,zlib.brotliDecompress,,3,16,
1214,zlib,,brotliDecompressSync,zlib.brotliDecompressSync,decompress a chunk of data with BrotliDecompress. ,2,16,
1215,zlib,,deflate,zlib.deflate,,3,15,
1216,zlib,,deflateSync,zlib.deflateSync,compress a chunk of data with Deflate,2,15,
1217,zlib,,deflateRaw,zlib.deflateRaw,,3,15,
1218,zlib,,deflateRawSync,zlib.deflateRawSync,"<p>Compress a chunk of data with <a href=""zlib.html#class-zlibdeflateraw""><code>DeflateRaw</code></a>.</p>",2,15,
1219,zlib,,gunzip,zlib.gunzip,,3,16,
1220,zlib,,gunzipSync,zlib.gunzipSync,"<p>Decompress a chunk of data with <a href=""zlib.html#class-zlibgunzip""><code>Gunzip</code></a>.</p>",2,16,
1221,zlib,,gzip,zlib.gzip,,3,15,
1222,zlib,,gzipSync,zlib.gzipSync,"<p>Compress a chunk of data with <a href=""zlib.html#class-zlibgzip""><code>Gzip</code></a>.</p>",2,15,
1223,zlib,,inflate,zlib.inflate,,3,16,
1224,zlib,,inflateSync,zlib.inflateSync,"<p>Decompress a chunk of data with <a href=""zlib.html#class-zlibinflate""><code>Inflate</code></a>.</p>",2,16,
1225,zlib,,inflateRaw,zlib.inflateRaw,,3,16,
1226,zlib,,inflateRawSync,zlib.inflateRawSync,"<p>Decompress a chunk of data with <a href=""zlib.html#class-zlibinflateraw""><code>InflateRaw</code></a>.</p>",2,16,
1227,zlib,,unzip,zlib.unzip,,3,16,
1228,zlib,,unzipSync,zlib.unzipSync,"<p>Decompress a chunk of data with <a href=""zlib.html#class-zlibunzip""><code>Unzip</code></a>.</p>",2,16,
1229,zlib,,close,zlib.close,<p>Close the underlying handle.</p>,1,Others,
1230,zlib,,flush,zlib.flush,"<p>Flush pending data. Don't call this frivolously, premature flushes negatively
impact the effectiveness of the compression algorithm.</p>
<p>Calling this only flushes data from the internal <code>zlib</code> state, and does not
perform flushing of any kind on the streams level. Rather, it behaves like a
normal call to <code>.write()</code>, i.e. it will be queued up behind other pending
writes and will only produce output when data is being read from the stream.</p>",2,Others,
1231,zlib,,params,zlib.params,"<p>This function is only available for zlib-based streams, i.e. not Brotli.</p>
<p>Dynamically update the compression level and compression strategy.
Only applicable to deflate algorithm.</p>",3,Others,
1232,zlib,,reset,zlib.reset,"<p>Reset the compressor/decompressor to factory defaults. Only applicable to
the inflate and deflate algorithms.</p>",0,Others,
1233,buf,,alloc,buf.alloc,"Allocates a new Buffer of size bytes. If fill is undefined, the Buffer will be zero-filled.",3,28,
1234,buf,,allocUnsafe,buf.allocUnsafe,"Allocates a new Buffer of size bytes. If size is larger than buffer.constants.MAX_LENGTH or smaller than 0, ERR_OUT_OF_RANGE is thrown.",1,28,
1235,buf,,allocUnsafeSlow,buf.allocUnsafeSlow,"Allocates a new Buffer of size bytes. If size is larger than buffer.constants.MAX_LENGTH or smaller than 0, ERR_OUT_OF_RANGE is thrown. A zero-length Buffer is created if size is 0.",1,28,
1236,buf,,compare,buf.compare,"Compares buf1 to buf2, typically for the purpose of sorting arrays of Buffer instances. This is equivalent to calling buf1.compare(buf2).",2,Others,
1237,buf,,byteLength,buf.byteLength,"Returns the byte length of a string when encoded using encoding. This is not the same as String.prototype.length, which does not account for the encoding that is used to convert the string into bytes.",2,Others,
1238,buf,,concat,buf.concat,Returns a new Buffer which is the result of concatenating all the Buffer instances in the list together.,2,28,
1239,buf,,copyBytesFrom,buf.copyBytesFrom,Copies the underlying memory of view into a new Buffer.,3,28,
1240,buf,,from,buf.from,Allocates a new Buffer using an array of bytes in the range 0 – 255. Array entries outside that range will be truncated to fit into it.,1,28,
1241,buf,,isBuffer,buf.isBuffer,"Returns true if obj is a Buffer, false otherwise.",1,Others,
1242,buf,,isEncoding,buf.isEncoding,"Returns true if encoding is the name of a supported character encoding, or false otherwise.",1,Others,
1243,JSON,,parse,JSON.parse,"The JSON.parse() static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.",1,28,
1244,JSON,,stringify,JSON.stringify,"The JSON.stringify() static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",1,29,
1245,Array,,at,Array.prototype.at,"The at() method of Array instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",1,Others,
1246,Array,,concat,Array.prototype.concat,"The concat() method of Array instances is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array",-1,28,
1247,decodeURIComponent,,decodeURIComponent,decodeURIComponent,The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.,1,Others,
1248,Array,,prototype[@@iterator],Array.prototype[@@iterator],"The [@@iterator]() method of Array instances implements the iterable protocol and allows arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the array.The initial value of this property is the same function object as the initial value of the Array.prototype.values property.",0,,
1249,Array,,at,Array.prototype.at,"The at() method of Array instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",1,,
1250,Array,,concat,Array.prototype.concat,"The concat() method of Array instances is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array",-1,,
1251,Array,,copyWithin,Array.prototype.copyWithin,The copyWithin() method of Array instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.,3,,
1252,Array,,entries,Array.prototype.entries,The entries() method of Array instances returns a new array iterator object that contains the key/value pairs for each index in the array.,0,,
1253,Array,,every,Array.prototype.every,The every() method of Array instances tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.,2,Others,
1254,Array,,fill,Array.prototype.fill,The fill() method of Array instances changes all elements within a range of indices in an array to a static value. It returns the modified array.,3,Others,
1255,Array,,filter,Array.prototype.filter,"The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",2,Others,
1256,Array,,find,Array.prototype.find,"The find() method of Array instances returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.",2,Others,
1257,Array,,findIndex,Array.prototype.findIndex,"The findIndex() method of Array instances returns the index of the first element in an array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.See also the find() method, which returns the first element that satisfies the testing function (rather than its index).",2,Others,
1258,Array,,findLast,Array.prototype.findLast,"The findLast() method of Array instances iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned.",2,,
1259,Array,,findLastIndex,Array.prototype.findLastIndex,"The findLastIndex() method of Array instances iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.See also the findLast() method, which returns the value of last element that satisfies the testing function (rather than its index).",2,,
1260,Array,,flat,Array.prototype.flat,The flat() method of Array instances creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.,1,Others,
1261,Array,,flatMap,Array.prototype.flatMap,"The flatMap() method of Array instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 (arr.map(...args).flat()), but slightly more efficient than calling those two methods separately.",2,Others,
1262,Array,,forEach,Array.prototype.forEach,The forEach() method of Array instances executes a provided function once for each array element.,2,Others,
1263,Array,,from,Array.from,"The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.",3,28,
1264,Array,,fromAsync,Array.fromAsync,"The Array.fromAsync() static method creates a new, shallow-copied Array instance from an async iterable, iterable, or array-like object.",3,Others,
1265,Array,,includes,Array.prototype.includes,"The includes() method of Array instances determines whether an array includes a certain value among its entries, returning true or false as appropriate.",2,Others,
1266,Array,,indexOf,Array.prototype.indexOf,"The indexOf() method of Array instances returns the first index at which a given element can be found in the array, or -1 if it is not present.",2,Others,
1267,Array,,isArray,Array.isArray,The Array.isArray() static method determines whether the passed value is an Array.,1,Others,
1268,Array,,join,Array.prototype.join,"The join() method of Array instances creates and returns a new string by concatenating all of the elements in this array, separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",1,Others,
1269,Array,,keys,Array.prototype.keys,The keys() method of Array instances returns a new array iterator object that contains the keys for each index in the array.,0,,
1270,Array,,lastIndexOf,Array.prototype.lastIndexOf,"The lastIndexOf() method of Array instances returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",2,,
1271,Array,,map,Array.prototype.map,The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array.,2,Others,
1272,Array,,of,Array.of,"The Array.of() static method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.",-1,Others,
1273,Array,,pop,Array.prototype.pop,The pop() method of Array instances removes the last element from an array and returns that element. This method changes the length of the array.,0,Others,
1274,Array,,push,Array.prototype.push,The push() method of Array instances adds the specified elements to the end of an array and returns the new length of the array.,-1,Others,
1275,Array,,reduce,Array.prototype.reduce,"The reduce() method of Array instances executes a user-supplied 'reducer' callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.",2,40,
1276,Array,,reduceRight,Array.prototype.reduceRight,The reduceRight() method of Array instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.,2,,
1277,Array,,reverse,Array.prototype.reverse,"The reverse() method of Array instances reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.",0,Others,
1278,Array,,shift,Array.prototype.shift,The shift() method of Array instances removes the first element from an array and returns that removed element. This method changes the length of the array.,0,Others,
1279,Array,,slice,Array.prototype.slice,The slice() method of Array instances returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.,2,Others,
1280,Array,,some,Array.prototype.some,"The some() method of Array instances tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.",2,Others,
1281,Array,,sort,Array.prototype.sort,"The sort() method of Array instances sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values. The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.",1,Others,
1282,Array,,splice,Array.prototype.splice,The splice() method of Array instances changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.,-1,Others,
1283,Array,,toLocaleString,Array.prototype.toLocaleString,"The toLocaleString() method of Array instances returns a string representing the elements of the array. The elements are converted to strings using their toLocaleString methods and these strings are separated by a locale-specific string (such as a comma `,`).",2,,
1284,Array,,toReversed,Array.prototype.toReversed,The toReversed() method of Array instances is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order.,0,,
1285,Array,,toSorted,Array.prototype.toSorted,The toSorted() method of Array instances is the copying version of the sort() method. It returns a new array with the elements sorted in ascending order.,1,Others,
1286,Array,,toSpliced,Array.prototype.toSpliced,The toSpliced() method of Array instances is the copying version of the splice() method. It returns a new array with some elements removed and/or replaced at a given index.,-1,,
1287,Array,,toString,Array.prototype.toString,The toString() method of Array instances returns a string representing the specified array and its elements.,0,,
1288,Array,,unshift,Array.prototype.unshift,The unshift() method of Array instances adds the specified elements to the beginning of an array and returns the new length of the array.,-1,Others,
1289,Array,,values,Array.prototype.values,The values() method of Array instances returns a new array iterator object that iterates the value of each item in the array.,0,,
1290,Array,,with,Array.prototype.with,The with() method of Array instances is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.,2,,
1291,ArrayBuffer,,isView,ArrayBuffer.isView,"The ArrayBuffer.isView() static method determines whether the passed value is one of the ArrayBuffer views, such as typed array objects or a DataView.",1,Others,
1292,ArrayBuffer,,resize,ArrayBuffer.prototype.resize,"The resize() method of ArrayBuffer instances resizes the ArrayBuffer to the specified size, in bytes.",1,,
1293,ArrayBuffer,,slice,ArrayBuffer.prototype.slice,"The slice() method of ArrayBuffer instances returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from start, inclusive, up to end, exclusive. If either start or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.",2,40,
1294,ArrayBuffer,,transfer,ArrayBuffer.prototype.transfer,"The transfer() method of ArrayBuffer instances creates a new ArrayBuffer with the same byte content as this buffer, then detaches this buffer.",1,,
1295,ArrayBuffer,,transferToFixedLength,ArrayBuffer.prototype.transferToFixedLength,"The transferToFixedLength() method of ArrayBuffer instances creates a new non-resizable ArrayBuffer with the same byte content as this buffer, then detaches this buffer.",1,,
1296,AsyncGenerator,,next,AsyncGenerator.prototype.next,The next() method of AsyncGenerator instances returns the next value in the sequence.,1,,
1297,AsyncGenerator,,return,AsyncGenerator.prototype.return,"The return() method of AsyncGenerator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",1,,
1298,AsyncGenerator,,throw,AsyncGenerator.prototype.throw,"The throw() method of AsyncGenerator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",1,,
1299,AsyncIterator,,prototype[@@asyncIterator],AsyncIterator.prototype[@@asyncIterator],"The [@@asyncIterator]() method of AsyncIterator instances implements the async iterable protocol and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as for await...of loops. It returns the value of this, which is the async iterator object itself.",0,,
1300,Atomics,,add,Atomics.add,The Atomics.add() static method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.,3,,
1301,Atomics,,and,Atomics.and,"The Atomics.and() static method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",3,,
1302,Atomics,,compareExchange,Atomics.compareExchange,"The Atomics.compareExchange() static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.",4,,
1303,Atomics,,exchange,Atomics.exchange,The Atomics.exchange() static method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.,3,,
1304,Atomics,,isLockFree,Atomics.isLockFree,The Atomics.isLockFree() static method is used to determine whether the Atomics methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It returns false if the given size is not one of the BYTES_PER_ELEMENT property of integer TypedArray types.,1,,
1305,Atomics,,load,Atomics.load,The Atomics.load() static method returns a value at a given position in the array.,2,33,
1306,Atomics,,notify,Atomics.notify,The Atomics.notify() static method notifies up some agents that are sleeping in the wait queue.,3,33,
1307,Atomics,,or,Atomics.or,"The Atomics.or() static method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",3,,
1308,Atomics,,store,Atomics.store,The Atomics.store() static method stores a given value at the given position in the array and returns that value.,3,,
1309,Atomics,,sub,Atomics.sub,The Atomics.sub() static method subtracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.,3,,
1310,Atomics,,wait,Atomics.wait,"The Atomics.wait() static method verifies that a shared memory location still contains a given value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which is either 'ok', 'not-equal', or 'timed-out'.",4,Others,
1311,Atomics,,waitAsync,Atomics.waitAsync,"The Atomics.waitAsync() static method waits asynchronously on a shared memory location and returns a Promise.Unlike Atomics.wait(), waitAsync is non-blocking and usable on the main thread.",4,Others,
1312,Atomics,,xor,Atomics.xor,"The Atomics.xor() static method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",3,,
1313,BigInt,,asIntN,BigInt.asIntN,The BigInt.asIntN() static method truncates a BigInt value to the given number of least significant bits and returns that value as a signed integer.,2,,
1314,BigInt,,asUintN,BigInt.asUintN,The BigInt.asUintN() static method truncates a BigInt value to the given number of least significant bits and returns that value as an unsigned integer.,2,Others,
1315,BigInt,,toLocaleString,BigInt.prototype.toLocaleString,"The toLocaleString() method of BigInt values returns a string with a language-sensitive representation of this BigInt. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat. Every time toLocaleString is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a Intl.NumberFormat object and use its format() method, because a NumberFormat object remembers the arguments passed to it and may decide to cache a slice of the database, so future format calls can search for localization strings within a more constrained context.",2,,
1316,BigInt,,toString,BigInt.prototype.toString,The toString() method of BigInt values returns a string representing the specified BigInt value. The trailing `n` is not part of the string.,1,,
1317,BigInt,,valueOf,BigInt.prototype.valueOf,The valueOf() method of BigInt values returns the wrapped primitive value of a BigInt object.,0,,
1318,Boolean,,toString,Boolean.prototype.toString,The toString() method of Boolean values returns a string representing the specified boolean value.,0,,
1319,Boolean,,valueOf,Boolean.prototype.valueOf,The valueOf() method of Boolean values returns the primitive value of a Boolean object.,0,,
1320,DataView,,getBigInt64,DataView.prototype.getBigInt64,The getBigInt64() method of DataView instances reads 8 bytes starting at the s jpecified byte offset of this DataView and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,Others,
1321,DataView,,getBigUint64,DataView.prototype.getBigUint64,The getBigUint64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,Others,
1322,DataView,,getFloat32,DataView.prototype.getFloat32,The getFloat32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,11,
1323,DataView,,getFloat64,DataView.prototype.getFloat64,The getFloat64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,11,
1324,DataView,,getInt16,DataView.prototype.getInt16,The getInt16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,11,
1325,DataView,,getInt32,DataView.prototype.getInt32,The getInt32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,11,
1326,DataView,,getInt8,DataView.prototype.getInt8,The getInt8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit signed integer.,1,11,
1327,DataView,,getUint16,DataView.prototype.getUint16,The getUint16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,11,
1328,DataView,,getUint32,DataView.prototype.getUint32,The getUint32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.,2,Others,
1329,DataView,,getUint8,DataView.prototype.getUint8,The getUint8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit unsigned integer.,1,11,
1330,DataView,,setBigInt64,DataView.prototype.setBigInt64,The setBigInt64() method of DataView instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,28,
1331,DataView,,setBigUint64,DataView.prototype.setBigUint64,The setBigUint64() method of DataView instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,Others,
1332,DataView,,setFloat32,DataView.prototype.setFloat32,The setFloat32() method of DataView instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,28,
1333,DataView,,setFloat64,DataView.prototype.setFloat64,The setFloat64() method of DataView instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,Others,
1334,DataView,,setInt16,DataView.prototype.setInt16,The setInt16() method of DataView instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,33,
1335,DataView,,setInt32,DataView.prototype.setInt32,The setInt32() method of DataView instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,28,
1336,DataView,,setInt8,DataView.prototype.setInt8,The setInt8() method of DataView instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this DataView.,2,28,
1337,DataView,,setUint16,DataView.prototype.setUint16,The setUint16() method of DataView instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,Others,
1338,DataView,,setUint32,DataView.prototype.setUint32,The setUint32() method of DataView instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.,3,Others,
1339,DataView,,setUint8,DataView.prototype.setUint8,The setUint8() method of DataView instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this DataView.,2,Others,
1340,Date,,prototype[@@toPrimitive],Date.prototype[@@toPrimitive],"The [@@toPrimitive]() method of Date instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.",1,Others,
1341,Date,,getDate,Date.prototype.getDate,The getDate() method of Date instances returns the day of the month for this date according to local time.,0,Others,
1342,Date,,getDay,Date.prototype.getDay,"The getDay() method of Date instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see Date.prototype.getDate().",0,Others,
1343,Date,,getFullYear,Date.prototype.getFullYear,The getFullYear() method of Date instances returns the year for this date according to local time.,0,Others,
1344,Date,,getHours,Date.prototype.getHours,The getHours() method of Date instances returns the hours for this date according to local time.,0,Others,
1345,Date,,getMilliseconds,Date.prototype.getMilliseconds,The getMilliseconds() method of Date instances returns the milliseconds for this date according to local time.,0,Others,
1346,Date,,getMinutes,Date.prototype.getMinutes,The getMinutes() method of Date instances returns the minutes for this date according to local time.,0,Others,
1347,Date,,getMonth,Date.prototype.getMonth,"The getMonth() method of Date instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).",0,Others,
1348,Date,,getSeconds,Date.prototype.getSeconds,The getSeconds() method of Date instances returns the seconds for this date according to local time.,0,Others,
1349,Date,,getTime,Date.prototype.getTime,"The getTime() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",0,Others,
1350,Date,,getTimezoneOffset,Date.prototype.getTimezoneOffset,"The getTimezoneOffset() method of Date instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.",0,Others,
1351,Date,,getUTCDate,Date.prototype.getUTCDate,The getUTCDate() method of Date instances returns the day of the month for this date according to universal time.,0,Others,
1352,Date,,getUTCDay,Date.prototype.getUTCDay,"The getUTCDay() method of Date instances returns the day of the week for this date according to universal time, where 0 represents Sunday.",0,Others,
1353,Date,,getUTCFullYear,Date.prototype.getUTCFullYear,The getUTCFullYear() method of Date instances returns the year for this date according to universal time.,0,Others,
1354,Date,,getUTCHours,Date.prototype.getUTCHours,The getUTCHours() method of Date instances returns the hours for this date according to universal time.,0,Others,
1355,Date,,getUTCMilliseconds,Date.prototype.getUTCMilliseconds,The getUTCMilliseconds() method of Date instances returns the milliseconds for this date according to universal time.,0,Others,
1356,Date,,getUTCMinutes,Date.prototype.getUTCMinutes,The getUTCMinutes() method of Date instances returns the minutes for this date according to universal time.,0,Others,
1357,Date,,getUTCMonth,Date.prototype.getUTCMonth,"The getUTCMonth() method of Date instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).",0,Others,
1358,Date,,getUTCSeconds,Date.prototype.getUTCSeconds,The getUTCSeconds() method of Date instances returns the seconds in the specified date according to universal time.,0,Others,
1359,Date,,getYear,Date.prototype.getYear,"The getYear() method of Date instances returns the year for this date according to local time. Because getYear() does not return full years ('year 2000 problem'), it is deprecated and has been replaced by the getFullYear() method.",0,Others,
1360,Date,,now,Date.now,"The Date.now() static method returns the number of milliseconds elapsed since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",0,Others,
1361,Date,,parse,Date.parse,"The Date.parse() static method parses a string representation of a date, and returns the date's timestamp.",1,Others,
1362,Date,,setDate,Date.prototype.setDate,The setDate() method of Date instances changes the day of the month for this date according to local time.,1,Others,
1363,Date,,setFullYear,Date.prototype.setFullYear,"The setFullYear() method of Date instances changes the year, month, and/or day of month for this date according to local time.",3,Others,
1364,Date,,setHours,Date.prototype.setHours,"The setHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.",4,Others,
1365,Date,,setMilliseconds,Date.prototype.setMilliseconds,The setMilliseconds() method of Date instances changes the milliseconds for this date according to local time.,1,Others,
1366,Date,,setMinutes,Date.prototype.setMinutes,The setMinutes() method of Date instances changes the minutes for this date according to local time.,3,Others,
1367,Date,,setMonth,Date.prototype.setMonth,The setMonth() method of Date instances changes the month and/or day of the month for this date according to local time.,2,Others,
1368,Date,,setSeconds,Date.prototype.setSeconds,The setSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to local time.,2,Others,
1369,Date,,setTime,Date.prototype.setTime,"The setTime() method of Date instances changes the timestamp for this date, which is the number of milliseconds since the epoch, defined as the midnight at the beginning of January 1, 1970, UTC.",1,Others,
1370,Date,,setUTCDate,Date.prototype.setUTCDate,The setUTCDate() method of Date instances changes the day of the month for this date according to universal time.,1,Others,
1371,Date,,setUTCFullYear,Date.prototype.setUTCFullYear,The setUTCFullYear() method of Date instances changes the year for this date according to universal time.,3,Others,
1372,Date,,setUTCHours,Date.prototype.setUTCHours,"The setUTCHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.",4,Others,
1373,Date,,setUTCMilliseconds,Date.prototype.setUTCMilliseconds,The setUTCMilliseconds() method of Date instances changes the milliseconds for this date according to universal time.,1,Others,
1374,Date,,setUTCMinutes,Date.prototype.setUTCMinutes,The setUTCMinutes() method of Date instances changes the minutes for this date according to universal time.,3,Others,
1375,Date,,setUTCMonth,Date.prototype.setUTCMonth,The setUTCMonth() method of Date instances changes the month and/or day of the month for this date according to universal time.,2,Others,
1376,Date,,setUTCSeconds,Date.prototype.setUTCSeconds,The setUTCSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to universal time.,2,Others,
1377,Date,,setYear,Date.prototype.setYear,The setYear() method of Date instances sets the year for a specified date according to local time.,1,Others,
1378,Date,,toDateString,Date.prototype.toDateString,The toDateString() method of Date instances returns a string representing the date portion of this date interpreted in the local timezone.,0,Others,
1379,Date,,toISOString,Date.prototype.toISOString,"The toISOString() method of Date instances returns a string representing this date in the date time string format, a simplified format based on ISO 8601, which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always UTC, as denoted by the suffix Z.",0,Others,
1380,Date,,toJSON,Date.prototype.toJSON,The toJSON() method of Date instances returns a string representing this date in the same ISO format as toISOString().,0,Others,
1381,Date,,toLocaleDateString,Date.prototype.toLocaleDateString,"The toLocaleDateString() method of Date instances returns a string with a language-sensitive representation of the date portion of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",2,Others,
1382,Date,,toLocaleString,Date.prototype.toLocaleString,"The toLocaleString() method of Date instances returns a string with a language-sensitive representation of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",2,Others,
1383,Date,,toLocaleTimeString,Date.prototype.toLocaleTimeString,"The toLocaleTimeString() method of Date instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",2,Others,
1384,Date,,toString,Date.prototype.toString,The toString() method of Date instances returns a string representing this date interpreted in the local timezone.,0,Others,
1385,Date,,toTimeString,Date.prototype.toTimeString,The toTimeString() method of Date instances returns a string representing the time portion of this date interpreted in the local timezone.,0,Others,
1386,Date,,toUTCString,Date.prototype.toUTCString,"The toUTCString() method of Date instances returns a string representing this date in the RFC 7231 format, with negative years allowed. The timezone is always UTC. toGMTString() is an alias of this method.",0,Others,
1387,Date,,UTC,Date.UTC,"The Date.UTC() static method accepts parameters representing the date and time components similar to the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",7,Others,
1388,Date,,valueOf,Date.prototype.valueOf,"The valueOf() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",0,Others,
1389,decodeURI,,decodeURI,decodeURI,The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.,1,Others,
1390,decodeURIComponent,,decodeURIComponent,decodeURIComponent,The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.,1,,
1391,encodeURI,,encodeURI,encodeURI,"The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters).",1,29,
1392,encodeURIComponent,,encodeURIComponent,encodeURIComponent,"The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.",1,29,
1393,Error,,toString,Error.prototype.toString,The toString() method of Error instances returns a string representing this error.,0,Others,
1394,escape,,escape,escape,The escape() function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.,1,Others,
1395,eval,,eval,eval,The eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.,1,39,
1396,FinalizationRegistry,,register,FinalizationRegistry.prototype.register,"The register() method of FinalizationRegistry instances registers an value with this FinalizationRegistry so that if the value is garbage-collected, the registry's callback may get called.",3,34,
1397,FinalizationRegistry,,unregister,FinalizationRegistry.prototype.unregister,The unregister() method of FinalizationRegistry instances unregisters a target value from this FinalizationRegistry.,1,39,
1398,Function,,prototype[@@hasInstance],Function.prototype[@@hasInstance],"The [@@hasInstance]() method of Function instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the instanceof operator.",1,,
1399,Function,,apply,Function.prototype.apply,"The apply() method of Function instances calls this function with a given this value, and arguments provided as an array (or an array-like object).",2,40,
1400,Function,,bind,Function.prototype.bind,"The bind() method of Function instances creates a new function that, when called, calls this function with its this keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.",-1,,
1401,Function,,call,Function.prototype.call,The call() method of Function instances calls this function with a given this value and arguments provided individually.,-1,40,
1402,Function,,toString,Function.prototype.toString,The toString() method of Function instances returns a string representing the source code of this function.,0,,
1403,Generator,,next,Generator.prototype.next,The next() method of Generator instances returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.,1,33,
1404,Generator,,return,Generator.prototype.return,"The return() method of Generator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",1,,
1405,Generator,,throw,Generator.prototype.throw,"The throw() method of Generator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",1,40,
1406,Intl,,getCanonicalLocales,Intl.getCanonicalLocales,The Intl.getCanonicalLocales() static method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.,1,,
1407,Intl,,supportedValuesOf,Intl.supportedValuesOf,"The Intl.supportedValuesOf() static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.",1,,
1408,isFinite,,isFinite,isFinite,"The isFinite() function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not NaN or ±Infinity. Because coercion inside the isFinite() function can be surprising, you may prefer to use Number.isFinite().",1,Others,
1409,isNaN,,isNaN,isNaN,"The isNaN() function determines whether a value is NaN, first converting the value to a number if necessary. Because coercion inside the isNaN() function can be surprising, you may prefer to use Number.isNaN().",1,Others,
1410,Iterator,,prototype[@@iterator],Iterator.prototype[@@iterator],"The [@@iterator]() method of Iterator instances implements the iterable protocol and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns the value of this, which is the iterator object itself.",0,,
1411,Iterator,,drop,Iterator.prototype.drop,The drop() method of Iterator instances returns a new iterator helper that skips the given number of elements at the start of this iterator.,1,,
1412,Iterator,,every,Iterator.prototype.every,The every() method of Iterator instances is similar to Array.prototype.every(): it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value.,1,,
1413,Iterator,,filter,Iterator.prototype.filter,The filter() method of Iterator instances returns a new iterator helper that yields only those elements of the iterator for which the provided callback function returns true.,1,,
1414,Iterator,,find,Iterator.prototype.find,"The find() method of Iterator instances is similar to Array.prototype.find(): it returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.",1,,
1415,Iterator,,flatMap,Iterator.prototype.flatMap,"The flatMap() method of Iterator instances returns a new iterator helper that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).",1,,
1416,Iterator,,forEach,Iterator.prototype.forEach,The forEach() method of Iterator instances is similar to Array.prototype.forEach(): it executes a provided function once for each element produced by the iterator.,1,,
1417,Iterator,,from,Iterator.from,The Iterator.from() static method creates a new Iterator object from an iterator or iterable object.,1,,
1418,Iterator,,map,Iterator.prototype.map,"The map() method of Iterator instances returns a new iterator helper that yields elements of the iterator, each transformed by a mapping function.",1,,
1419,Iterator,,reduce,Iterator.prototype.reduce,"The reduce() method of Iterator instances is similar to Array.prototype.reduce: it executes a user-supplied `reducer` callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.",2,,
1420,Iterator,,some,Iterator.prototype.some,The some() method of Iterator instances is similar to Array.prototype.some(): it tests whether at least one element in the array passes the test implemented by the provided function. It returns a boolean value.,1,,
1421,Iterator,,take,Iterator.prototype.take,The take() method of Iterator instances returns a new iterator helper that yields the given number of elements in this iterator and then terminates.,1,,
1422,Iterator,,toArray,Iterator.prototype.toArray,The toArray() method of Iterator instances creates a new Array instance populated with the elements yielded from the iterator.,0,,
1425,Map,,prototype[@@iterator],Map.prototype[@@iterator],"The [@@iterator]() method of Map instances implements the iterable protocol and allows Map objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a map iterator object that yields the key-value pairs of the map in insertion order.",0,,
1426,Map,,clear,Map.prototype.clear,The clear() method of Map instances removes all elements from this map.,0,Others,
1427,Map,,delete,Map.prototype.delete,The delete() method of Map instances removes the specified element from this map by key.,1,34,
1428,Map,,entries,Map.prototype.entries,"The entries() method of Map instances returns a new map iterator object that contains the [key, value] pairs for each element in this map in insertion order.",0,Others,
1429,Map,,forEach,Map.prototype.forEach,"The forEach() method of Map instances executes a provided function once per each key/value pair in this map, in insertion order.",2,40,
1430,Map,,get,Map.prototype.get,"The get() method of Map instances returns a specified element from this map. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.",1,Others,
1431,Map,,groupBy,Map.groupBy,"The Map.groupBy() static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned Map uses the unique values from the test function as keys, which can be used to get the array of elements in each group.",2,,
1432,Map,,has,Map.prototype.has,The has() method of Map instances returns a boolean indicating whether an element with the specified key exists in this map or not.,1,Others,
1433,Map,,keys,Map.prototype.keys,The keys() method of Map instances returns a new map iterator object that contains the keys for each element in this map in insertion order.,0,Others,
1434,Map,,set,Map.prototype.set,The set() method of Map instances adds or updates an entry in this map with a specified key and a value.,2,33,
1435,Map,,values,Map.prototype.values,The values() method of Map instances returns a new map iterator object that contains the values for each element in this map in insertion order.,0,33,
1436,Math,,abs,Math.abs,The Math.abs() static method returns the absolute value of a number.,1,Others,
1437,Math,,acos,Math.acos,"The Math.acos() static method returns the inverse cosine (in radians) of a number. That is, $\forall x \in [-1, 1], \text{Math.acos}(x) = \arccos(x) = \text{the unique } y \in [0, \pi] \text{ such that } \cos(y) = x$",1,Others,
1438,Math,,acosh,Math.acosh,"The Math.acosh() static method returns the inverse hyperbolic cosine of a number. That is, $\forall x \geq 1, \text{Math.acosh}(x) = \text{arcosh}(x) = \text{the unique } y \geq 0 \text{ such that } \cosh(y) = x = \ln(x + \sqrt{x^2 - 1})$",1,Others,
1439,Math,,asin,Math.asin,"The Math.asin() static method returns the inverse sine (in radians) of a number. That is, $\forall x \in [-1, 1], \text{Math.asin}(x) = \arcsin(x) = \text{the unique } y \in [-\frac{\pi}{2}, \frac{\pi}{2}] \text{ such that } \sin(y) = x$",1,Others,
1440,Math,,asinh,Math.asinh,"The Math.asinh() static method returns the inverse hyperbolic sine of a number. That is, $\text{Math.asinh}(x) = \text{arsinh}(x) = \text{the unique } y \text{ such that } \sinh(y) = x = \ln(x + \sqrt{x^2 + 1})}$",1,Others,
1441,Math,,atan,Math.atan,"The Math.atan() static method returns the inverse tangent (in radians) of a number, that is $\text{Math.atan}(x) = \arctan(x) = \text{the unique } y \in [-\frac{\pi}{2}, \frac{\pi}{2}] \text{ such that } \tan(y) = x$",1,Others,
1442,Math,,atan2,Math.atan2,"The Math.atan2() static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x).",2,Others,
1443,Math,,atanh,Math.atanh,"The Math.atanh() static method returns the inverse hyperbolic tangent of a number. That is, $\forall x \in (-1, 1), \text{Math.atanh}(x) = \text{artanh}(x) = \text{the unique } y \text{ such that } \tanh(y) = x = \frac{1}{2} \ln\left(\frac{1+x}{1-x}\right)$",1,Others,
1444,Math,,cbrt,Math.cbrt,The Math.cbrt() static method returns the cube root of a number. That is $\text{Math.cbrt}(x) = x^\frac{1}{3} = \text{the unique } y \text{ such that } y^3 = x$,1,Others,
1445,Math,,ceil,Math.ceil,The Math.ceil() static method always rounds up and returns the smallest integer greater than or equal to a given number.,1,Others,
1446,Math,,clz32,Math.clz32,The Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number.,1,Others,
1447,Math,,cos,Math.cos,The Math.cos() static method returns the cosine of a number in radians.,1,Others,
1448,Math,,cosh,Math.cosh,"The Math.cosh() static method returns the hyperbolic cosine of a number. That is, $\text{Math.cosh}(x) = \cosh(x) = \frac{e^x + e^{-x}}{2}$",1,Others,
1449,Math,,exp,Math.exp,The Math.exp() static method returns e raised to the power of a number. That is $\text{Math.exp}(x) = e^x$,1,Others,
1450,Math,,expm1,Math.expm1,"The Math.expm1() static method returns e raised to the power of a number, subtracted by 1. That is $\text{Math.expm1}(x) = e^x - 1$",1,Others,
1451,Math,,floor,Math.floor,The Math.floor() static method always rounds down and returns the largest integer less than or equal to a given number.,1,Others,
1452,Math,,fround,Math.fround,The Math.fround() static method returns the nearest 32-bit single precision float representation of a number.,1,Others,
1453,Math,,hypot,Math.hypot,"The Math.hypot() static method returns the square root of the sum of squares of its arguments. That is, $\text{Math.hypot}(\ldots) = \sqrt{\sum_{i=1}^{n} x_i^2} = \sqrt{x_1^2 + x_2^2 + \ldots + x_n^2}$",-1,Others,
1454,Math,,imul,Math.imul,The Math.imul() static method returns the result of the C-like 32-bit multiplication of the two parameters.,2,Others,
1455,Math,,log,Math.log,"The Math.log() static method returns the natural logarithm (base e) of a number. That is $\forall x > 0, \text{Math.log}(x) = \ln(x) = \text{the unique } y \text{ such that } e^y = x$",1,Others,
1456,Math,,log10,Math.log10,"The Math.log10() static method returns the base 10 logarithm of a number. That is $\forall x > 0, \text{Math.log10}(x) = \log_{10}(x) = \text{the unique } y \text{ such that } 10^y = x$",1,Others,
1457,Math,,log1p,Math.log1p,"The Math.log1p() static method returns the natural logarithm (base e) of 1 + x, where x is the argument. That is: $\forall x > -1, \text{Math.log1p}(x) = \ln(1 + x)$",1,Others,
1458,Math,,log2,Math.log2,"The Math.log2() static method returns the base 2 logarithm of a number. That is $\forall x > 0, \text{Math.log2}(x) = \log_{2}(x) = \text{the unique } y \text{ such that } 2^y = x$",1,Others,
1459,Math,,max,Math.max,"The Math.max() static method returns the largest of the numbers given as input parameters, or -Infinity if there are no parameters.",-1,Others,
1460,Math,,min,Math.min,"The Math.min() static method returns the smallest of the numbers given as input parameters, or Infinity if there are no parameters.",-1,Others,
1461,Math,,pow,Math.pow,"The Math.pow() static method returns the value of a base raised to a power. That is $\text{Math.pow}(x, y) = x^y$",2,Others,
1462,Math,,random,Math.random,"The Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.",0,Others,
1463,Math,,round,Math.round,The Math.round() static method returns the value of a number rounded to the nearest integer.,1,Others,
1464,Math,,sign,Math.sign,"The Math.sign() static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.",1,Others,
1465,Math,,sin,Math.sin,The Math.sin() static method returns the sine of a number in radians.,1,Others,
1466,Math,,sinh,Math.sinh,"The Math.sinh() static method returns the hyperbolic sine of a number. That is, $\text{Math.sinh}(x) = \sinh(x) = \frac{e^x - e^{-x}}{2}$",1,Others,
1467,Math,,sqrt,Math.sqrt,"The Math.sqrt() static method returns the square root of a number. That is $\forall x \geq 0, \text{Math.sqrt}(x) = \sqrt{x} = \text{the unique } y \geq 0 \text{ such that } y^2 = x$",1,Others,
1468,Math,,tan,Math.tan,The Math.tan() static method returns the tangent of a number in radians.,1,Others,
1469,Math,,tanh,Math.tanh,"The Math.tanh() static method returns the hyperbolic tangent of a number. That is, $\text{Math.tanh}(x) = \tanh(x) = \frac{\sinh(x)}{\cosh(x)} = \frac{e^x - e^{-x}}{e^x + e^{-x}} = \frac{e^{2x} - 1}{e^{2x} + 1}$",1,Others,
1470,Math,,trunc,Math.trunc,The Math.trunc() static method returns the integer part of a number by removing any fractional digits.,1,Others,
1471,Number,,isFinite,Number.isFinite,"The Number.isFinite() static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive Infinity, negative Infinity, nor NaN.",1,Others,
1472,Number,,isInteger,Number.isInteger,The Number.isInteger() static method determines whether the passed value is an integer.,1,Others,
1473,Number,,isNaN,Number.isNaN,"The Number.isNaN() static method determines whether the passed value is the number value NaN, and returns false if the input is not of the Number type. It is a more robust version of the original, global isNaN() function.",1,Others,
1474,Number,,isSafeInteger,Number.isSafeInteger,The Number.isSafeInteger() static method determines whether the provided value is a number that is a safe integer.,1,Others,
1475,Number,,parseFloat,Number.parseFloat,"The Number.parseFloat() static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns NaN.",1,30,
1476,Number,,parseInt,Number.parseInt,The Number.parseInt() static method parses a string argument and returns an integer of the specified radix or base.,2,Others,
1477,Number,,toExponential,Number.prototype.toExponential,The toExponential() method of Number values returns a string representing this number in exponential notation.,1,Others,
1478,Number,,toFixed,Number.prototype.toFixed,The toFixed() method of Number values formats this number using fixed-point notation.,1,Others,
1479,Number,,toLocaleString,Number.prototype.toLocaleString,"The toLocaleString() method of Number values returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",2,Others,
1480,Number,,toPrecision,Number.prototype.toPrecision,The toPrecision() method of Number values returns a string representing this number to the specified precision.,1,Others,
1481,Number,,toString,Number.prototype.toString,The toString() method of Number values returns a string representing this number value.,1,Others,
1482,Number,,valueOf,Number.prototype.valueOf,The valueOf() method of Number values returns the value of this number.,0,Others,
1483,Object,,__defineGetter__,Object.prototype.__defineGetter__,"The __defineGetter__() method of Object instances binds an object's property to a function to be called when that property is looked up.",2,Others,
1484,Object,,__defineSetter__,Object.prototype.__defineSetter__,"The __defineSetter__() method of Object instances binds an object's property to a function to be called when an attempt is made to set that property.",2,Others,
1485,Object,,__lookupGetter__,Object.prototype.__lookupGetter__,The __lookupGetter__() method of Object instances returns the function bound as a getter to the specified property.,1,Others,
1486,Object,,__lookupSetter__,Object.prototype.__lookupSetter__,The __lookupSetter__() method of Object instances returns the function bound as a setter to the specified property.,1,Others,
1487,Object,,assign,Object.assign,The Object.assign() static method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.,-1,Others,
1488,Object,,create,Object.create,"The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.",2,Others,
1489,Object,,defineProperties,Object.defineProperties,"The Object.defineProperties() static method defines new or modifies existing properties directly on an object, returning the object.",2,Others,
1490,Object,,defineProperty,Object.defineProperty,"The Object.defineProperty() static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",3,Others,
1491,Object,,entries,Object.entries,"The Object.entries() static method returns an array of a given object's own enumerable string-keyed property key-value pairs.",1,Others,
1492,Object,,freeze,Object.freeze,"The Object.freeze() static method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in.",1,Others,
1493,Object,,fromEntries,Object.fromEntries,The Object.fromEntries() static method transforms a list of key-value pairs into an object.,1,Others,
1494,Object,,getOwnPropertyDescriptor,Object.getOwnPropertyDescriptor,"The Object.getOwnPropertyDescriptor() static method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.",2,Others,
1495,Object,,getOwnPropertyDescriptors,Object.getOwnPropertyDescriptors,The Object.getOwnPropertyDescriptors() static method returns all own property descriptors of a given object.,1,Others,
1496,Object,,getOwnPropertyNames,Object.getOwnPropertyNames,The Object.getOwnPropertyNames() static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.,1,Others,
1497,Object,,getOwnPropertySymbols,Object.getOwnPropertySymbols,The Object.getOwnPropertySymbols() static method returns an array of all symbol properties found directly upon a given object.,1,Others,
1498,Object,,getPrototypeOf,Object.getPrototypeOf,The Object.getPrototypeOf() static method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.,1,Others,
1499,Object,,groupBy,Object.groupBy,"The Object.groupBy() static method groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.",2,Others,
1500,Object,,hasOwn,Object.hasOwn,"The Object.hasOwn() static method returns true if the specified object has the indicated property as its own property. If the property is inherited, or does not exist, the method returns false.",2,Others,
1501,Object,,hasOwnProperty,Object.prototype.hasOwnProperty,The hasOwnProperty() method of Object instances returns a boolean indicating whether this object has the specified property as its own property (as opposed to inheriting it).,1,Others,
1502,Object,,is,Object.is,The Object.is() static method determines whether two values are the same value.,2,Others,
1503,Object,,isExtensible,Object.isExtensible,The Object.isExtensible() static method determines if an object is extensible (whether it can have new properties added to it).,1,Others,
1504,Object,,isFrozen,Object.isFrozen,The Object.isFrozen() static method determines if an object is frozen.,1,Others,
1505,Object,,isPrototypeOf,Object.prototype.isPrototypeOf,"The isPrototypeOf() method of Object instances checks if this object exists in another object's prototype chain.",1,Others,
1506,Object,,isSealed,Object.isSealed,The Object.isSealed() static method determines if an object is sealed.,1,Others,
1507,Object,,keys,Object.keys,"The Object.keys() static method returns an array of a given object's own enumerable string-keyed property names.",1,Others,
1508,Object,,preventExtensions,Object.preventExtensions,"The Object.preventExtensions() static method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It also prevents the object's prototype from being re-assigned.",1,Others,
1509,Object,,propertyIsEnumerable,Object.prototype.propertyIsEnumerable,"The propertyIsEnumerable() method of Object instances returns a boolean indicating whether the specified property is this object's enumerable own property.",1,Others,
1510,Object,,seal,Object.seal,"The Object.seal() static method seals an object. Sealing an object prevents extensions and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. seal() returns the same object that was passed in.",1,Others,
1511,Object,,setPrototypeOf,Object.setPrototypeOf,"The Object.setPrototypeOf() static method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",2,Others,
1512,Object,,toLocaleString,Object.prototype.toLocaleString,The toLocaleString() method of Object instances returns a string representing this object. This method is meant to be overridden by derived objects for locale-specific purposes.,0,Others,
1513,Object,,toString,Object.prototype.toString,The toString() method of Object instances returns a string representing this object. This method is meant to be overridden by derived objects for custom type coercion logic.,0,Others,
1514,Object,,valueOf,Object.prototype.valueOf,The valueOf() method of Object instances converts the this value to an object. This method is meant to be overridden by derived objects for custom type conversion logic.,0,Others,
1515,Object,,values,Object.values,"The Object.values() static method returns an array of a given object's own enumerable string-keyed property values.",1,Others,
1516,parseFloat,,parseFloat,parseFloat,The parseFloat() function parses a string argument and returns a floating point number.,1,Others,
1517,parseInt,,parseInt,parseInt,The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).,2,Others,
1518,Promise,,all,Promise.all,"The Promise.all() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.",1,Others,
1519,Promise,,allSettled,Promise.allSettled,"The Promise.allSettled() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.",1,Others,
1520,Promise,,any,Promise.any,"The Promise.any() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons.",1,Others,
1521,Promise,,catch,Promise.prototype.catch,"The catch() method of Promise instances schedules a function to be called when the promise is rejected. It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods. It is a shortcut for Promise.prototype.then(undefined, onRejected).",1,Others,
1522,Promise,,finally,Promise.prototype.finally,"The finally() method of Promise instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods.",1,Others,
1523,Promise,,race,Promise.race,The Promise.race() static method takes an iterable of promises as input and returns a single Promise. This returned promise settles with the eventual state of the first promise that settles.,1,Others,
1524,Promise,,reject,Promise.reject,The Promise.reject() static method returns a Promise object that is rejected with a given reason.,1,Others,
1525,Promise,,resolve,Promise.resolve,"The Promise.resolve() static method 'resolves' a given value to a Promise. If the value is a promise, that promise is returned; if the value is a thenable, Promise.resolve() will call the then() method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.",1,Others,
1526,Promise,,then,Promise.prototype.then,"The then() method of Promise instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the Promise. It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods.",2,Others,
1527,Promise,,withResolvers,Promise.withResolvers,"The Promise.withResolvers() static method returns an object containing a new Promise object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the Promise() constructor.",3,Others,
1528,handler,,apply,handler.apply,"The handler.apply() method is a trap for the [[Call]] object internal method, which is used by operations such as function calls.",3,34,
1529,handler,,construct,handler.construct,"The handler.construct() method is a trap for the [[Construct]] object internal method, which is used by operations such as the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",3,,
1530,handler,,defineProperty,handler.defineProperty,"The handler.defineProperty() method is a trap for the [[DefineOwnProperty]] object internal method, which is used by operations such as Object.defineProperty().",3,,
1531,handler,,deleteProperty,handler.deleteProperty,"The handler.deleteProperty() method is a trap for the [[Delete]] object internal method, which is used by operations such as the delete operator.",2,,
1532,handler,,get,handler.get,"The handler.get() method is a trap for the [[Get]] object internal method, which is used by operations such as property accessors.",3,40,
1533,handler,,getOwnPropertyDescriptor,handler.getOwnPropertyDescriptor,"The handler.getOwnPropertyDescriptor() method is a trap for the [[GetOwnProperty]] object internal method, which is used by operations such as Object.getOwnPropertyDescriptor().",2,,
1534,handler,,getPrototypeOf,handler.getPrototypeOf,"The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] object internal method, which is used by operations such as Object.getPrototypeOf().",1,,
1535,handler,,has,handler.has,"The handler.has() method is a trap for the [[HasProperty]] object internal method, which is used by operations such as the in operator.",2,,
1536,handler,,isExtensible,handler.isExtensible,"The handler.isExtensible() method is a trap for the [[IsExtensible]] object internal method, which is used by operations such as Object.isExtensible().",1,,
1537,handler,,ownKeys,handler.ownKeys,"The handler.ownKeys() method is a trap for the [[OwnPropertyKeys]] object internal method, which is used by operations such as Object.keys(), Reflect.ownKeys(), etc.",1,,
1538,handler,,preventExtensions,handler.preventExtensions,"The handler.preventExtensions() method is a trap for the [[PreventExtensions]] object internal method, which is used by operations such as Object.preventExtensions().",1,,
1539,handler,,set,handler.set,"The handler.set() method is a trap for the [[Set]] object internal method, which is used by operations such as using property accessors to set a property's value.",4,35,
1540,handler,,setPrototypeOf,handler.setPrototypeOf,"The handler.setPrototypeOf() method is a trap for the [[SetPrototypeOf]] object internal method, which is used by operations such as Object.setPrototypeOf().",2,,
1541,Reflect,,apply,Reflect.apply,The Reflect.apply() static method calls a target function with arguments as specified.,3,33,
1542,Reflect,,construct,Reflect.construct,"The Reflect.construct() static method is like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different new.target value.",3,40,
1543,Reflect,,defineProperty,Reflect.defineProperty,The Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.,3,Others,
1544,Reflect,,deleteProperty,Reflect.deleteProperty,"The Reflect.deleteProperty() static method is like the delete operator, but as a function. It deletes a property from an object.",2,Others,
1545,Reflect,,get,Reflect.get,"The Reflect.get() static method is like the property accessor syntax, but as a function.",3,33,
1546,Reflect,,getOwnPropertyDescriptor,Reflect.getOwnPropertyDescriptor,"The Reflect.getOwnPropertyDescriptor() static method is like Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.",2,Others,
1547,Reflect,,getPrototypeOf,Reflect.getPrototypeOf,The Reflect.getPrototypeOf() static method is like Object.getPrototypeOf(). It returns the prototype of the specified object.,1,Others,
1548,Reflect,,has,Reflect.has,"The Reflect.has() static method is like the in operator, but as a function.",2,Others,
1549,Reflect,,isExtensible,Reflect.isExtensible,The Reflect.isExtensible() static method is like Object.isExtensible(). It determines if an object is extensible (whether it can have new properties added to it).,1,Others,
1550,Reflect,,ownKeys,Reflect.ownKeys,"The Reflect.ownKeys() static method returns an array of the target object's own property keys.",1,Others,
1551,Reflect,,preventExtensions,Reflect.preventExtensions,"The Reflect.preventExtensions() static method is like Object.preventExtensions(). It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).",1,40,
1552,Reflect,,set,Reflect.set,"The Reflect.set() static method is like the property accessor and assignment syntax, but as a function.",4,35,
1553,Reflect,,setPrototypeOf,Reflect.setPrototypeOf,"The Reflect.setPrototypeOf() static method is like Object.setPrototypeOf() but returns a Boolean. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object.",2,,
1554,RegExp,,prototype[@@match],RegExp.prototype[@@match],"The [@@match]() method of RegExp instances specifies how String.prototype.match() should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.",1,,
1555,RegExp,,prototype[@@matchAll],RegExp.prototype[@@matchAll],The [@@matchAll]() method of RegExp instances specifies how String.prototype.matchAll should behave.,1,,
1556,RegExp,,prototype[@@replace],RegExp.prototype[@@replace],The [@@replace]() method of RegExp instances specifies how String.prototype.replace() and String.prototype.replaceAll() should behave when the regular expression is passed in as the pattern.,2,,
1557,RegExp,,prototype[@@search],RegExp.prototype[@@search],The [@@search]() method of RegExp instances specifies how String.prototype.search should behave.,1,,
1558,RegExp,,prototype[@@split],RegExp.prototype[@@split],The [@@split]() method of RegExp instances specifies how String.prototype.split should behave when the regular expression is passed in as the separator.,2,,
1559,RegExp,,compile,RegExp.prototype.compile,The compile() method of RegExp instances is used to recompile a regular expression with new source and flags after the RegExp object has already been created.,2,,
1560,RegExp,,exec,RegExp.prototype.exec,"The exec() method of RegExp instances executes a search with this regular expression for a match in a specified string and returns a result array, or null.",1,38,
1561,RegExp,,test,RegExp.prototype.test,The test() method of RegExp instances executes a search with this regular expression for a match between a regular expression and a specified string. Returns true if there is a match; false otherwise.,1,Others,
1562,RegExp,,toString,RegExp.prototype.toString,The toString() method of RegExp instances returns a string representing this regular expression.,0,Others,
1563,Set,,prototype[@@iterator],Set.prototype[@@iterator],"The [@@iterator]() method of Set instances implements the iterable protocol and allows Set objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a set iterator object that yields the values of the set in insertion order.",0,,
1564,Set,,add,Set.prototype.add,"The add() method of Set instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set",1,Others,
1565,Set,,clear,Set.prototype.clear,The clear() method of Set instances removes all elements from this set.,0,Others,
1566,Set,,delete,Set.prototype.delete,"The delete() method of Set instances removes a specified value from this set, if it is in the set.",1,Others,
1567,Set,,difference,Set.prototype.difference,The difference() method of Set instances takes a set and returns a new set containing elements in this set but not in the given set.,1,,
1568,Set,,entries,Set.prototype.entries,"The entries() method of Set instances returns a new set iterator object that contains an array of [value, value] for each element in this set, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",0,,
1569,Set,,forEach,Set.prototype.forEach,"The forEach() method of Set instances executes a provided function once for each value in this set, in insertion order.",2,Others,
1570,Set,,has,Set.prototype.has,The has() method of Set instances returns a boolean indicating whether an element with the specified value exists in this set or not.,1,Others,
1571,Set,,intersection,Set.prototype.intersection,The intersection() method of Set instances takes a set and returns a new set containing elements in both this set and the given set.,1,,
1572,Set,,isDisjointFrom,Set.prototype.isDisjointFrom,The isDisjointFrom() method of Set instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.,1,,
1573,Set,,isSubsetOf,Set.prototype.isSubsetOf,The isSubsetOf() method of Set instances takes a set and returns a boolean indicating if all elements of this set are in the given set.,1,,
1574,Set,,isSupersetOf,Set.prototype.isSupersetOf,The isSupersetOf() method of Set instances takes a set and returns a boolean indicating if all elements of the given set are in this set.,1,,
1575,Set,,keys,Set.prototype.keys,The keys() method of Set instances is an alias for the values() method.,0,Others,
1576,Set,,symmetricDifference,Set.prototype.symmetricDifference,"The symmetricDifference() method of Set instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.",1,,
1577,Set,,union,Set.prototype.union,The union() method of Set instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.,1,,
1578,Set,,values,Set.prototype.values,The values() method of Set instances returns a new set iterator object that contains the values for each element in this set in insertion order.,0,Others,
1579,SharedArrayBuffer,,grow,SharedArrayBuffer.prototype.grow,"The grow() method of SharedArrayBuffer instances grows the SharedArrayBuffer to the specified size, in bytes.",1,,
1580,SharedArrayBuffer,,slice,SharedArrayBuffer.prototype.slice,"The slice() method of SharedArrayBuffer instances returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from start, inclusive, up to end, exclusive. If either start or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.",2,,
1581,String,,prototype[@@iterator],String.prototype[@@iterator],"The [@@iterator]() method of String values implements the iterable protocol and allows strings to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a string iterator object that yields the Unicode code points of the string value as individual strings.",0,,
1582,String,,anchor,String.prototype.anchor,The anchor() method of String values creates a string that embeds this string in an <a> element with a name (<a name=`...`>str</a>).,1,,
1583,String,,at,String.prototype.at,The at() method of String values takes an integer value and returns a new String consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.,1,,
1584,String,,big,String.prototype.big,"The big() method of String values creates a string that embeds this string in a <big> element (<big>str</big>), which causes this string to be displayed in a big font.",0,,
1585,String,,blink,String.prototype.blink,"The blink() method of String values creates a string that embeds this string in a <blink> element (<blink>str</blink>), which used to cause a string to blink in old browsers.",0,,
1586,String,,bold,String.prototype.bold,"The bold() method of String values creates a string that embeds this string in a <b> element (<b>str</b>), which causes this string to be displayed as bold.",0,,
1587,String,,charAt,String.prototype.charAt,The charAt() method of String values returns a new string consisting of the single UTF-16 code unit at the given index.,1,Others,
1588,String,,charCodeAt,String.prototype.charCodeAt,The charCodeAt() method of String values returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.,1,Others,
1589,String,,codePointAt,String.prototype.codePointAt,"The codePointAt() method of String values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.",1,Others,
1590,String,,concat,String.prototype.concat,The concat() method of String values concatenates the string arguments to this string and returns a new string.,-1,,
1591,String,,endsWith,String.prototype.endsWith,"The endsWith() method of String values determines whether a string ends with the characters of this string, returning true or false as appropriate.",2,Others,
1592,String,,fixed,String.prototype.fixed,"The fixed() method of String values creates a string that embeds this string in a <tt> element (<tt>str</tt>), which causes this string to be displayed in a fixed-width font.",0,,
1593,String,,fontcolor,String.prototype.fontcolor,"The fontcolor() method of String values creates a string that embeds this string in a <font> element (<font color='...'>str</font>), which causes this string to be displayed in the specified font color.",1,,
1594,String,,fontsize,String.prototype.fontsize,"The fontsize() method of String values creates a string that embeds this string in a <font> element (<font size='...'>str</font>), which causes this string to be displayed in the specified font size.",1,,
1595,String,,fromCharCode,String.fromCharCode,The String.fromCharCode() static method returns a string created from the specified sequence of UTF-16 code units.,-1,28,
1596,String,,fromCodePoint,String.fromCodePoint,The String.fromCodePoint() static method returns a string created from the specified sequence of code points.,-1,Others,
1597,String,,includes,String.prototype.includes,"The includes() method of String values performs a case-sensitive search to determine whether a given string may be found within this string, returning true or false as appropriate.",2,Others,
1598,String,,indexOf,String.prototype.indexOf,The indexOf() method of String values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.,2,Others,
1599,String,,isWellFormed,String.prototype.isWellFormed,The isWellFormed() method of String values returns a boolean indicating whether this string contains any lone surrogates.,0,,
1600,String,,italics,String.prototype.italics,"The italics() method of String values creates a string that embeds this string in an <i> element (<i>str</i>), which causes this string to be displayed as italic.",0,,
1601,String,,lastIndexOf,String.prototype.lastIndexOf,The lastIndexOf() method of String values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.,2,Others,
1602,String,,link,String.prototype.link,"The link() method of String values creates a string that embeds this string in an <a> element (<a href='...'>str</a>), to be used as a hypertext link to another URL.",1,,
1603,String,,localeCompare,String.prototype.localeCompare,"The localeCompare() method of String values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method simply calls Intl.Collator.",3,,
1604,String,,match,String.prototype.match,The match() method of String values retrieves the result of matching this string against a regular expression.,1,Others,
1605,String,,matchAll,String.prototype.matchAll,"The matchAll() method of String values returns an iterator of all results matching this string against a regular expression, including capturing groups.",1,Others,
1606,String,,normalize,String.prototype.normalize,The normalize() method of String values returns the Unicode Normalization Form of this string.,1,,
1607,String,,padEnd,String.prototype.padEnd,"The padEnd() method of String values pads this string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of this string.",2,,
1608,String,,padStart,String.prototype.padStart,"The padStart() method of String values pads this string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of this string.",2,Others,
1609,String,,raw,String.raw,"The String.raw() static method is a tag function of template literals. This is similar to the r prefix in Python, or the @ prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. ${foo}) are processed, but escape sequences (e.g. \n) are not.",-1,Others,
1610,String,,repeat,String.prototype.repeat,"The repeat() method of String values constructs and returns a new string which contains the specified number of copies of this string, concatenated together.",1,,
1611,String,,replace,String.prototype.replace,"The replace() method of String values returns a new string with one, some, or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged.",2,Others,
1612,String,,replaceAll,String.prototype.replaceAll,"The replaceAll() method of String values returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged.",2,Others,
1613,String,,search,String.prototype.search,"The search() method of String values executes a search for a match between a regular expression and this string, returning the index of the first match in the string.",1,Others,
1614,String,,slice,String.prototype.slice,"The slice() method of String values extracts a section of this string and returns it as a new string, without modifying the original string.",2,Others,
1615,String,,small,String.prototype.small,"The small() method of String values creates a string that embeds this string in a <small> element (<small>str</small>), which causes this string to be displayed in a small font.",0,,
1616,String,,split,String.prototype.split,"The split() method of String values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.",2,Others,
1617,String,,startsWith,String.prototype.startsWith,"The startsWith() method of String values determines whether this string begins with the characters of a specified string, returning true or false as appropriate.",2,Others,
1618,String,,strike,String.prototype.strike,"The strike() method of String values creates a string that embeds this string in a <strike> element (<strike>str</strike>), which causes this string to be displayed as struck-out text.",0,,
1619,String,,sub,String.prototype.sub,"The sub() method of String values creates a string that embeds this string in a <sub> element (<sub>str</sub>), which causes this string to be displayed as subscript.",0,,
1620,String,,substr,String.prototype.substr,"The substr() method of String values returns a portion of this string, starting at the specified index and extending for a given number of characters afterwards.",2,Others,
1621,String,,substring,String.prototype.substring,"The substring() method of String values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.",2,Others,
1622,String,,sup,String.prototype.sup,"The sup() method of String values creates a string that embeds this string in a <sup> element (<sup>str</sup>), which causes this string to be displayed as superscript.",0,,
1623,String,,toLocaleLowerCase,String.prototype.toLocaleLowerCase,"The toLocaleLowerCase() method of String values returns this string converted to lower case, according to any locale-specific case mappings.",1,Others,
1624,String,,toLocaleUpperCase,String.prototype.toLocaleUpperCase,"The toLocaleUpperCase() method of String values returns this string converted to upper case, according to any locale-specific case mappings.",1,Others,
1625,String,,toLowerCase,String.prototype.toLowerCase,The toLowerCase() method of String values returns this string converted to lower case.,0,Others,
1626,String,,toString,String.prototype.toString,The toString() method of String values returns this string value.,0,Others,
1627,String,,toUpperCase,String.prototype.toUpperCase,The toUpperCase() method of String values returns this string converted to uppercase.,0,Others,
1628,String,,toWellFormed,String.prototype.toWellFormed,The toWellFormed() method of String values returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD.,0,,
1629,String,,trim,String.prototype.trim,"The trim() method of String values removes whitespace from both ends of this string and returns a new string, without modifying the original string.",0,Others,
1630,String,,trimEnd,String.prototype.trimEnd,"The trimEnd() method of String values removes whitespace from the end of this string and returns a new string, without modifying the original string. trimRight() is an alias of this method.",0,,
1631,String,,trimStart,String.prototype.trimStart,"The trimStart() method of String values removes whitespace from the beginning of this string and returns a new string, without modifying the original string. trimLeft() is an alias of this method.",0,,
1632,String,,valueOf,String.prototype.valueOf,The valueOf() method of String values returns this string value.,0,,
1633,Symbol,,prototype[@@toPrimitive],Symbol.prototype[@@toPrimitive],The [@@toPrimitive]() method of Symbol values returns this symbol value.,1,,
1634,Symbol,,for,Symbol.for,The Symbol.for() static method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.,1,Others,
1635,Symbol,,keyFor,Symbol.keyFor,The Symbol.keyFor() static method retrieves a shared symbol key from the global symbol registry for the given symbol.,1,35,
1636,Symbol,,toString,Symbol.prototype.toString,The toString() method of Symbol values returns a string representing this symbol value.,0,Others,
1637,Symbol,,valueOf,Symbol.prototype.valueOf,The valueOf() method of Symbol values returns this symbol value.,0,,
1638,TypedArray,,prototype[@@iterator],TypedArray.prototype[@@iterator],"The [@@iterator]() method of TypedArray instances implements the iterable protocol and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the typed array.",0,,
1639,TypedArray,,at,TypedArray.prototype.at,"The at() method of TypedArray instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as Array.prototype.at().",1,,
1640,TypedArray,,copyWithin,TypedArray.prototype.copyWithin,The copyWithin() method of TypedArray instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as Array.prototype.copyWithin().,3,,
1641,TypedArray,,entries,TypedArray.prototype.entries,The entries() method of TypedArray instances returns a new array iterator object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as Array.prototype.entries().,0,,
1642,TypedArray,,every,TypedArray.prototype.every,The every() method of TypedArray instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as Array.prototype.every().,2,,
1643,TypedArray,,fill,TypedArray.prototype.fill,The fill() method of TypedArray instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as Array.prototype.fill().,3,,
1644,TypedArray,,filter,TypedArray.prototype.filter,"The filter() method of TypedArray instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter().",2,,
1645,TypedArray,,find,TypedArray.prototype.find,"The find() method of TypedArray instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.find().",2,,
1646,TypedArray,,findIndex,TypedArray.prototype.findIndex,"The findIndex() method of TypedArray instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findIndex().",2,,
1647,TypedArray,,findLast,TypedArray.prototype.findLast,"The findLast() method of TypedArray instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.findLast().",2,,
1648,TypedArray,,findLastIndex,TypedArray.prototype.findLastIndex,"The findLastIndex() method of TypedArray instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findLastIndex().",2,,
1649,TypedArray,,forEach,TypedArray.prototype.forEach,The forEach() method of TypedArray instances executes a provided function once for each typed array element. This method has the same algorithm as Array.prototype.forEach().,2,,
1650,TypedArray,,from,TypedArray.from,The TypedArray.from() static method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from().,3,,
1651,TypedArray,,includes,TypedArray.prototype.includes,"The includes() method of TypedArray instances determines whether a typed array includes a certain value among its entries, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes().",2,,
1652,TypedArray,,indexOf,TypedArray.prototype.indexOf,"The indexOf() method of TypedArray instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf().",2,,
1653,TypedArray,,join,TypedArray.prototype.join,"The join() method of TypedArray instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as Array.prototype.join().",1,,
1654,TypedArray,,keys,TypedArray.prototype.keys,The keys() method of TypedArray instances returns a new array iterator object that contains the keys for each index in the typed array. This method has the same algorithm as Array.prototype.keys().,0,,
1655,TypedArray,,lastIndexOf,TypedArray.prototype.lastIndexOf,"The lastIndexOf() method of TypedArray instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf().",2,,
1656,TypedArray,,map,TypedArray.prototype.map,The map() method of TypedArray instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as Array.prototype.map().,2,,
1657,TypedArray,,of,TypedArray.of,The TypedArray.of() static method creates a new typed array from a variable number of arguments. This method is nearly the same as Array.of().,-1,,
1658,TypedArray,,reduce,TypedArray.prototype.reduce,"The reduce() method of TypedArray instances executes a user-supplied 'reducer' callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as Array.prototype.reduce().",2,,
1659,TypedArray,,reduceRight,TypedArray.prototype.reduceRight,The reduceRight() method of TypedArray instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight().,2,,
1660,TypedArray,,reverse,TypedArray.prototype.reverse,"The reverse() method of TypedArray instances reverses a typed array in place and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as Array.prototype.reverse().",0,,
1661,TypedArray,,set,TypedArray.prototype.set,"The set() method of TypedArray instances stores multiple values in the typed array, reading input values from a specified array.",3,,
1662,TypedArray,,slice,TypedArray.prototype.slice,The slice() method of TypedArray instances returns a copy of a portion of a typed array into a new typed array object selected from start to end (end not included) where start and end represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as Array.prototype.slice().,2,,
1663,TypedArray,,some,TypedArray.prototype.some,"The some() method of TypedArray instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as Array.prototype.some().",2,,
1664,TypedArray,,sort,TypedArray.prototype.sort,"The sort() method of TypedArray instances sorts the elements of a typed array in place and returns the reference to the same typed array, now sorted. This method has the same algorithm as Array.prototype.sort(), except that it sorts the values numerically instead of as strings by default.",1,,
1665,TypedArray,,subarray,TypedArray.prototype.subarray,The subarray() method of TypedArray instances returns a new typed array on the same ArrayBuffer store and with the same element types as for this typed array. The begin offset is inclusive and the end offset is exclusive.,2,,
1666,TypedArray,,toLocaleString,TypedArray.prototype.toLocaleString,"The toLocaleString() method of TypedArray instances returns a string representing the elements of the typed array. The elements are converted to strings using their toLocaleString methods and these strings are separated by a locale-specific string (such as a comma ','). This method has the same algorithm as Array.prototype.toLocaleString().",2,,
1667,TypedArray,,toReversed,TypedArray.prototype.toReversed,The toReversed() method of TypedArray instances is the copying counterpart of the reverse() method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as Array.prototype.toReversed().,0,,
1668,TypedArray,,toSorted,TypedArray.prototype.toSorted,"The toSorted() method of TypedArray instances is the copying version of the sort() method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as Array.prototype.toSorted(), except that it sorts the values numerically instead of as strings by default.",1,,
1669,TypedArray,,toString,TypedArray.prototype.toString,The toString() method of TypedArray instances returns a string representing the specified typed array and its elements. This method has the same algorithm as Array.prototype.toString().,0,,
1670,TypedArray,,values,TypedArray.prototype.values,The values() method of TypedArray instances returns a new array iterator object that iterates the value of each item in the typed array. This method has the same algorithm as Array.prototype.values().,0,,
1671,TypedArray,,with,TypedArray.prototype.with,The with() method of TypedArray instances is the copying version of using the bracket notation to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as Array.prototype.with().,2,,
1672,unescape,,unescape,unescape,The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like escape().,1,30,
1673,WeakMap,,delete,WeakMap.prototype.delete,The delete() method of WeakMap instances removes the specified element from this WeakMap.,1,40,
1674,WeakMap,,get,WeakMap.prototype.get,The get() method of WeakMap instances returns a specified element from this WeakMap.,1,Others,
1675,WeakMap,,has,WeakMap.prototype.has,The has() method of WeakMap instances returns a boolean indicating whether an element with the specified key exists in this WeakMap or not.,1,Others,
1676,WeakMap,,set,WeakMap.prototype.set,The set() method of WeakMap instances adds a new element with a specified key and value to this WeakMap.,2,Others,
1677,WeakRef,,deref,WeakRef.prototype.deref,"The deref() method of WeakRef instances returns this WeakRef's target value, or undefined if the target value has been garbage-collected.",0,,
1678,WeakSet,,add,WeakSet.prototype.add,The add() method of WeakSet instances appends a new object to the end of this WeakSet.,1,Others,
1679,WeakSet,,delete,WeakSet.prototype.delete,The delete() method of WeakSet instances removes the specified element from this WeakSet.,1,,
1680,WeakSet,,has,WeakSet.prototype.has,The has() method of WeakSet instances returns a boolean indicating whether an object exists in this WeakSet or not.,1,Others,
1681,Buffer,,from,Buffer.from,"The Buffer.from() method is used to create a new buffer containing the specified string, array, or buffer. ",1,28,
1682,process,,cwd,process.cwd,The process.cwd() method returns the current working directory of the Node.js process.,0,3,
1683,AsyncLocalStorage,,bind,AsyncLocalStorage.bind,<p>Binds the given function to the current execution context.</p>,1,,
1684,AsyncLocalStorage,,snapshot,AsyncLocalStorage.snapshot,"<p>Captures the current execution context and returns a function that accepts a
function as an argument. Whenever the returned function is called, it
calls the function passed to it within the captured context.</p>
<pre><code class=""language-js"">const asyncLocalStorage = new AsyncLocalStorage();
const runInAsyncScope = asyncLocalStorage.run(123, () => AsyncLocalStorage.snapshot());
const result = asyncLocalStorage.run(321, () => runInAsyncScope(() => asyncLocalStorage.getStore()));
console.log(result);  // returns 123
</code></pre>
<p>AsyncLocalStorage.snapshot() can replace the use of AsyncResource for simple
async context tracking purposes, for example:</p>
<pre><code class=""language-js"">class Foo {
  #runInAsyncScope = AsyncLocalStorage.snapshot();

  get() { return this.#runInAsyncScope(() => asyncLocalStorage.getStore()); }
}

const foo = asyncLocalStorage.run(123, () => new Foo());
console.log(asyncLocalStorage.run(321, () => foo.get())); // returns 123
</code></pre>",0,,
1685,AsyncResource,,bind,AsyncResource.bind,<p>Binds the given function to the current execution context.</p>,3,,
1686,Buffer,,alloc,Buffer.alloc,"<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the
<code>Buffer</code> will be zero-filled.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(5);

console.log(buf);
// Prints: &#x3C;Buffer 00 00 00 00 00>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(5);

console.log(buf);
// Prints: &#x3C;Buffer 00 00 00 00 00>
</code></pre>
<p>If <code>size</code> is larger than
<a href=""buffer.html#bufferconstantsmax_length""><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=""errors.html#err_out_of_range""><code>ERR_OUT_OF_RANGE</code></a>
is thrown.</p>
<p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling
<a href=""buffer.html#buffillvalue-offset-end-encoding""><code>buf.fill(fill)</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(5, 'a');

console.log(buf);
// Prints: &#x3C;Buffer 61 61 61 61 61>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(5, 'a');

console.log(buf);
// Prints: &#x3C;Buffer 61 61 61 61 61>
</code></pre>
<p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be
initialized by calling <a href=""buffer.html#buffillvalue-offset-end-encoding""><code>buf.fill(fill, encoding)</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');

console.log(buf);
// Prints: &#x3C;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');

console.log(buf);
// Prints: &#x3C;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
</code></pre>
<p>Calling <a href=""buffer.html#static-method-bufferallocsize-fill-encoding""><code>Buffer.alloc()</code></a> can be measurably slower than the alternative
<a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer.allocUnsafe()</code></a> but ensures that the newly created <code>Buffer</code> instance
contents will never contain sensitive data from previous allocations, including
data that might not have been allocated for <code>Buffer</code>s.</p>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>",3,28,
1687,Buffer,,allocUnsafe,Buffer.allocUnsafe,"<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than
<a href=""buffer.html#bufferconstantsmax_length""><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=""errors.html#err_out_of_range""><code>ERR_OUT_OF_RANGE</code></a>
is thrown.</p>
<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not
initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and
<em>may contain sensitive data</em>. Use <a href=""buffer.html#static-method-bufferallocsize-fill-encoding""><code>Buffer.alloc()</code></a> instead to initialize
<code>Buffer</code> instances with zeroes.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(10);

console.log(buf);
// Prints (contents may vary): &#x3C;Buffer a0 8b 28 3f 01 00 00 00 50 32>

buf.fill(0);

console.log(buf);
// Prints: &#x3C;Buffer 00 00 00 00 00 00 00 00 00 00>
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(10);

console.log(buf);
// Prints (contents may vary): &#x3C;Buffer a0 8b 28 3f 01 00 00 00 50 32>

buf.fill(0);

console.log(buf);
// Prints: &#x3C;Buffer 00 00 00 00 00 00 00 00 00 00>
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>
<p>The <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of
size <a href=""buffer.html#class-property-bufferpoolsize""><code>Buffer.poolSize</code></a> that is used as a pool for the fast allocation of new
<code>Buffer</code> instances created using <a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer.allocUnsafe()</code></a>, <a href=""buffer.html#static-method-bufferfromarray""><code>Buffer.from(array)</code></a>,
and <a href=""buffer.html#static-method-bufferconcatlist-totallength""><code>Buffer.concat()</code></a> only when <code>size</code> is less than or equal to
<code>Buffer.poolSize >> 1</code> (floor of <a href=""buffer.html#class-property-bufferpoolsize""><code>Buffer.poolSize</code></a> divided by two).</p>
<p>Use of this pre-allocated internal memory pool is a key difference between
calling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.
Specifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal <code>Buffer</code>
pool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal
<code>Buffer</code> pool if <code>size</code> is less than or equal to half <a href=""buffer.html#class-property-bufferpoolsize""><code>Buffer.poolSize</code></a>. The
difference is subtle but can be important when an application requires the
additional performance that <a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer.allocUnsafe()</code></a> provides.</p>",1,28,
1688,Buffer,,allocUnsafeSlow,Buffer.allocUnsafeSlow,"<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than
<a href=""buffer.html#bufferconstantsmax_length""><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=""errors.html#err_out_of_range""><code>ERR_OUT_OF_RANGE</code></a>
is thrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>
<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not
initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and
<em>may contain sensitive data</em>. Use <a href=""buffer.html#buffillvalue-offset-end-encoding""><code>buf.fill(0)</code></a> to initialize
such <code>Buffer</code> instances with zeroes.</p>
<p>When using <a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer.allocUnsafe()</code></a> to allocate new <code>Buffer</code> instances,
allocations under 4 KiB are sliced from a single pre-allocated <code>Buffer</code>. This
allows applications to avoid the garbage collection overhead of creating many
individually allocated <code>Buffer</code> instances. This approach improves both
performance and memory usage by eliminating the need to track and clean up as
many individual <code>ArrayBuffer</code> objects.</p>
<p>However, in the case where a developer may need to retain a small chunk of
memory from a pool for an indeterminate amount of time, it may be appropriate
to create an un-pooled <code>Buffer</code> instance using <code>Buffer.allocUnsafeSlow()</code> and
then copying out the relevant bits.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Need to keep around a few small chunks of memory.
const store = [];

socket.on('readable', () => {
  let data;
  while (null !== (data = readable.read())) {
    // Allocate for retained data.
    const sb = Buffer.allocUnsafeSlow(10);

    // Copy the data into the new allocation.
    data.copy(sb, 0, 0, 10);

    store.push(sb);
  }
});
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Need to keep around a few small chunks of memory.
const store = [];

socket.on('readable', () => {
  let data;
  while (null !== (data = readable.read())) {
    // Allocate for retained data.
    const sb = Buffer.allocUnsafeSlow(10);

    // Copy the data into the new allocation.
    data.copy(sb, 0, 0, 10);

    store.push(sb);
  }
});
</code></pre>
<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>",1,28,
1689,Buffer,,byteLength,Buffer.byteLength,"<p>Returns the byte length of a string when encoded using <code>encoding</code>.
This is not the same as <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length""><code>String.prototype.length</code></a>, which does not account
for the encoding that is used to convert the string into bytes.</p>
<p>For <code>'base64'</code>, <code>'base64url'</code>, and <code>'hex'</code>, this function assumes valid input.
For strings that contain non-base64/hex-encoded data (e.g. whitespace), the
return value might be greater than the length of a <code>Buffer</code> created from the
string.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const str = '\u00bd + \u00bc = \u00be';

console.log(`${str}: ${str.length} characters, ` +
            `${Buffer.byteLength(str, 'utf8')} bytes`);
// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const str = '\u00bd + \u00bc = \u00be';

console.log(`${str}: ${str.length} characters, ` +
            `${Buffer.byteLength(str, 'utf8')} bytes`);
// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes
</code></pre>
<p>When <code>string</code> is a <code>Buffer</code>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView""><code>DataView</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray""><code>TypedArray</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer""><code>ArrayBuffer</code></a>/
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer""><code>SharedArrayBuffer</code></a>, the byte length as reported by <code>.byteLength</code>
is returned.</p>",2,Others,
1690,Buffer,,compare,Buffer.compare,"<p>Compares <code>buf1</code> to <code>buf2</code>, typically for the purpose of sorting arrays of
<code>Buffer</code> instances. This is equivalent to calling
<a href=""buffer.html#bufcomparetarget-targetstart-targetend-sourcestart-sourceend""><code>buf1.compare(buf2)</code></a>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('1234');
const buf2 = Buffer.from('0123');
const arr = [buf1, buf2];

console.log(arr.sort(Buffer.compare));
// Prints: [ &#x3C;Buffer 30 31 32 33>, &#x3C;Buffer 31 32 33 34> ]
// (This result is equal to: [buf2, buf1].)
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('1234');
const buf2 = Buffer.from('0123');
const arr = [buf1, buf2];

console.log(arr.sort(Buffer.compare));
// Prints: [ &#x3C;Buffer 30 31 32 33>, &#x3C;Buffer 31 32 33 34> ]
// (This result is equal to: [buf2, buf1].)
</code></pre>",2,Others,
1691,Buffer,,concat,Buffer.concat,"<p>Returns a new <code>Buffer</code> which is the result of concatenating all the <code>Buffer</code>
instances in the <code>list</code> together.</p>
<p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length
<code>Buffer</code> is returned.</p>
<p>If <code>totalLength</code> is not provided, it is calculated from the <code>Buffer</code> instances
in <code>list</code> by adding their lengths.</p>
<p>If <code>totalLength</code> is provided, it is coerced to an unsigned integer. If the
combined length of the <code>Buffer</code>s in <code>list</code> exceeds <code>totalLength</code>, the result is
truncated to <code>totalLength</code>.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

// Create a single `Buffer` from a list of three `Buffer` instances.

const buf1 = Buffer.alloc(10);
const buf2 = Buffer.alloc(14);
const buf3 = Buffer.alloc(18);
const totalLength = buf1.length + buf2.length + buf3.length;

console.log(totalLength);
// Prints: 42

const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);

console.log(bufA);
// Prints: &#x3C;Buffer 00 00 00 00 ...>
console.log(bufA.length);
// Prints: 42
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

// Create a single `Buffer` from a list of three `Buffer` instances.

const buf1 = Buffer.alloc(10);
const buf2 = Buffer.alloc(14);
const buf3 = Buffer.alloc(18);
const totalLength = buf1.length + buf2.length + buf3.length;

console.log(totalLength);
// Prints: 42

const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);

console.log(bufA);
// Prints: &#x3C;Buffer 00 00 00 00 ...>
console.log(bufA.length);
// Prints: 42
</code></pre>
<p><code>Buffer.concat()</code> may also use the internal <code>Buffer</code> pool like
<a href=""buffer.html#static-method-bufferallocunsafesize""><code>Buffer.allocUnsafe()</code></a> does.</p>",2,28,
1692,Buffer,,copyBytesFrom,Buffer.copyBytesFrom,"<p>Copies the underlying memory of <code>view</code> into a new <code>Buffer</code>.</p>
<pre><code class=""language-js"">const u16 = new Uint16Array([0, 0xffff]);
const buf = Buffer.copyBytesFrom(u16, 1, 1);
u16[1] = 0;
console.log(buf.length); // 2
console.log(buf[0]); // 255
console.log(buf[1]); // 255
</code></pre>",3,28,
1693,Buffer,,isBuffer,Buffer.isBuffer,"<p>Returns <code>true</code> if <code>obj</code> is a <code>Buffer</code>, <code>false</code> otherwise.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

Buffer.isBuffer(Buffer.alloc(10)); // true
Buffer.isBuffer(Buffer.from('foo')); // true
Buffer.isBuffer('a string'); // false
Buffer.isBuffer([]); // false
Buffer.isBuffer(new Uint8Array(1024)); // false
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

Buffer.isBuffer(Buffer.alloc(10)); // true
Buffer.isBuffer(Buffer.from('foo')); // true
Buffer.isBuffer('a string'); // false
Buffer.isBuffer([]); // false
Buffer.isBuffer(new Uint8Array(1024)); // false
</code></pre>",1,Others,
1694,Buffer,,isEncoding,Buffer.isEncoding,"<p>Returns <code>true</code> if <code>encoding</code> is the name of a supported character encoding,
or <code>false</code> otherwise.</p>
<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';

console.log(Buffer.isEncoding('utf8'));
// Prints: true

console.log(Buffer.isEncoding('hex'));
// Prints: true

console.log(Buffer.isEncoding('utf/8'));
// Prints: false

console.log(Buffer.isEncoding(''));
// Prints: false
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');

console.log(Buffer.isEncoding('utf8'));
// Prints: true

console.log(Buffer.isEncoding('hex'));
// Prints: true

console.log(Buffer.isEncoding('utf/8'));
// Prints: false

console.log(Buffer.isEncoding(''));
// Prints: false
</code></pre>",1,Others,
1695,Certificate,,exportChallenge,Certificate.exportChallenge,"<pre><code class=""language-mjs"">const { Certificate } = await import('node:crypto');
const spkac = getSpkacSomehow();
const challenge = Certificate.exportChallenge(spkac);
console.log(challenge.toString('utf8'));
// Prints: the challenge as a UTF8 string
</code></pre>
<pre><code class=""language-cjs"">const { Certificate } = require('node:crypto');
const spkac = getSpkacSomehow();
const challenge = Certificate.exportChallenge(spkac);
console.log(challenge.toString('utf8'));
// Prints: the challenge as a UTF8 string
</code></pre>",2,Others,
1696,Certificate,,exportPublicKey,Certificate.exportPublicKey,"<pre><code class=""language-mjs"">const { Certificate } = await import('node:crypto');
const spkac = getSpkacSomehow();
const publicKey = Certificate.exportPublicKey(spkac);
console.log(publicKey);
// Prints: the public key as &#x3C;Buffer ...>
</code></pre>
<pre><code class=""language-cjs"">const { Certificate } = require('node:crypto');
const spkac = getSpkacSomehow();
const publicKey = Certificate.exportPublicKey(spkac);
console.log(publicKey);
// Prints: the public key as &#x3C;Buffer ...>
</code></pre>",2,Others,
1697,Certificate,,verifySpkac,Certificate.verifySpkac,"<pre><code class=""language-mjs"">import { Buffer } from 'node:buffer';
const { Certificate } = await import('node:crypto');

const spkac = getSpkacSomehow();
console.log(Certificate.verifySpkac(Buffer.from(spkac)));
// Prints: true or false
</code></pre>
<pre><code class=""language-cjs"">const { Buffer } = require('node:buffer');
const { Certificate } = require('node:crypto');

const spkac = getSpkacSomehow();
console.log(Certificate.verifySpkac(Buffer.from(spkac)));
// Prints: true or false
</code></pre>",2,Others,
1698,ECDH,,convertKey,ECDH.convertKey,"<p>Converts the EC Diffie-Hellman public key specified by <code>key</code> and <code>curve</code> to the
format specified by <code>format</code>. The <code>format</code> argument specifies point encoding
and can be <code>'compressed'</code>, <code>'uncompressed'</code> or <code>'hybrid'</code>. The supplied key is
interpreted using the specified <code>inputEncoding</code>, and the returned key is encoded
using the specified <code>outputEncoding</code>.</p>
<p>Use <a href=""crypto.html#cryptogetcurves""><code>crypto.getCurves()</code></a> to obtain a list of available curve names.
On recent OpenSSL releases, <code>openssl ecparam -list_curves</code> will also display
the name and description of each available elliptic curve.</p>
<p>If <code>format</code> is not specified the point will be returned in <code>'uncompressed'</code>
format.</p>
<p>If the <code>inputEncoding</code> is not provided, <code>key</code> is expected to be a <a href=""buffer.html""><code>Buffer</code></a>,
<code>TypedArray</code>, or <code>DataView</code>.</p>
<p>Example (uncompressing a key):</p>
<pre><code class=""language-mjs"">const {
  createECDH,
  ECDH,
} = await import('node:crypto');

const ecdh = createECDH('secp256k1');
ecdh.generateKeys();

const compressedKey = ecdh.getPublicKey('hex', 'compressed');

const uncompressedKey = ECDH.convertKey(compressedKey,
                                        'secp256k1',
                                        'hex',
                                        'hex',
                                        'uncompressed');

// The converted key and the uncompressed public key should be the same
console.log(uncompressedKey === ecdh.getPublicKey('hex'));
</code></pre>
<pre><code class=""language-cjs"">const {
  createECDH,
  ECDH,
} = require('node:crypto');

const ecdh = createECDH('secp256k1');
ecdh.generateKeys();

const compressedKey = ecdh.getPublicKey('hex', 'compressed');

const uncompressedKey = ECDH.convertKey(compressedKey,
                                        'secp256k1',
                                        'hex',
                                        'hex',
                                        'uncompressed');

// The converted key and the uncompressed public key should be the same
console.log(uncompressedKey === ecdh.getPublicKey('hex'));
</code></pre>",5,,
1699,KeyObject,,from,KeyObject.from,"<p>Example: Converting a <code>CryptoKey</code> instance to a <code>KeyObject</code>:</p>
<pre><code class=""language-mjs"">const { KeyObject } = await import('node:crypto');
const { subtle } = globalThis.crypto;

const key = await subtle.generateKey({
  name: 'HMAC',
  hash: 'SHA-256',
  length: 256,
}, true, ['sign', 'verify']);

const keyObject = KeyObject.from(key);
console.log(keyObject.symmetricKeySize);
// Prints: 32 (symmetric key size in bytes)
</code></pre>
<pre><code class=""language-cjs"">const { KeyObject } = require('node:crypto');
const { subtle } = globalThis.crypto;

(async function() {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash: 'SHA-256',
    length: 256,
  }, true, ['sign', 'verify']);

  const keyObject = KeyObject.from(key);
  console.log(keyObject.symmetricKeySize);
  // Prints: 32 (symmetric key size in bytes)
})();
</code></pre>",1,Others,
1700,process,,exit,process.exit,The `exit` function in the `process` object in JavaScript is used to terminate the Node.js process synchronously with an exit status code.,,Others,
1701,process,,getuid,process.getuid,"The `getuid` function in JavaScript, when used with `process`, typically returns the numerical user identity of the process' running user. This is commonly used in environments like Node.js to get the Unix user ID of the process owner.",,5,
1704,JSON,,zS,JSON.zS,,,Others,"The code `zS` does not directly reference a standard or common function in JavaScript or within the context of handling JSON data. Without specific context or definition, it's not possible to accurately determine the function of `zS`. In JavaScript or when dealing with JSON, function names are arbitrary and chosen by the developer, so `zS` could virtually represent any operation, from parsing JSON strings to manipulating data structures, depending on its implementation in the codebase."
1705,process,,stdout.write,process.stdout.write,,,13,"The `stdout.write` function in JavaScript is used to write data directly to the standard output stream, typically the console or terminal, without appending a new line at the end."
1706,process,,env,process.env,"The `process.env` in JavaScript, particularly in Node.js, is an object that contains the user environment's key-value pairs. It provides access to environment variables, allowing the application to adapt its behavior based on the runtime environment without hardcoding sensitive data like database passwords or API keys directly into the codebase.",,4,
1708,net,,Socket,net.Socket,,,22,A Socket is a communication endpoint that allows bidirectional data flow between a client and a server.
1709,process,,platform,process.platform,The process.platform property returns a string identifying the operating system platform on which the Node.js process is running.,,4,
1710,process,,arch,process.arch,The process.arch property returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.,,4,
1711,process,,config,process.config,The process.config property returns an Object containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the config.gypi file that was produced when running the ./configure script.,,4,
1712,process,,pid,process.pid,The process.pid property returns the PID of the process.,,4,
1713,process,,release,process.release,"The process.release property returns an Object containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.",,4,
1714,process,,versions,process.versions,The `versions` property in the `process` object in Node.js returns an object containing the versions of Node.js and its dependencies.,,4,
1715,socket,,on,socket.on,,,Others,The `on` function in JavaScript is used to attach an event listener to a specified event.
1717,util,,pump,util.pump,,,38,The `pump` function in JavaScript is used to read data from a readable stream and write it to a writable stream.
1719,process.stdout,,write,process.stdout.write,,,13,The `write` function in `process.stdout.write` is used to write data to the standard output stream.
1720,process,,argv,process.argv,The process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched,,4,
1721,Symbol,,Symbol,Symbol.Symbol,,,Others,The `Symbol` function in JavaScript creates a unique symbol primitive data type.
1722,process,,version,process.version,The process.version property contains the Node.js version string.,,4,
1723,String,,String,String.String,,,28,The `String` function in JavaScript is used to create a new string object.
1724,Array,,Array,Array.Array,,,28,The `Array` function in JavaScript is used to create a new array.
1726,process.argv,,slice,process.argv.slice,,,Others,Returns a portion of an array.
1728,document,,cookie,document.cookie,"In the code above allCookies is a string containing a semicolon-separated list of all cookies (i.e. key=value pairs). Note that each key and value may be surrounded by whitespace (space and tab characters): in fact, RFC 6265 mandates a single space after each semicolon, but some user agents may not abide by this.",,26,
1730,process,,constrainedMemory,process.constrainedMemory,"Gets the amount of memory available to the process (in bytes) based on limits imposed by the OS. If there is no such constraint, or the constraint is unknown, undefined is returned",,4,
1731,process,,versions,process.versions,"The process.versions property returns an object listing the version strings of Node.js and its dependencies. process.versions.modules indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.",,4,
1732,process,,getActiveResourcesInfo,process.getActiveResourcesInfo,The process.getActiveResourcesInfo() method returns an array of strings containing the types of the active resources that are currently keeping the event loop alive,,4,
1733,process,,getegid,process.getegid,The process.getegid() method returns the numerical effective group identity of the Node.js process,,4,
1734,process,,geteuid,process.geteuid,The process.geteuid() method returns the numerical effective user identity of the process,,4,
1735,process,,getgid,process.getgid,The process.getgid() method returns the numerical group identity of the process.,,4,
1736,process,,getgroups,process.getgroups,The process.getgroups() method returns an array with the supplementary group IDs.,,4,
1737,tlsSocket,,write,tlsSocket.write,"<p>Sends data on the socket. The second parameter specifies the encoding in the
case of a string. It defaults to UTF8 encoding.</p>
<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel
buffer. Returns <code>false</code> if all or part of the data was queued in user memory.
<a href=""net.html#event-drain""><code>'drain'</code></a> will be emitted when the buffer is again free.</p>
<p>The optional <code>callback</code> parameter will be executed when the data is finally
written out, which may not be immediately.</p>
<p>See <code>Writable</code> stream <a href=""stream.html#writablewritechunk-encoding-callback""><code>write()</code></a> method for more
information.</p>",,23,
1738,tlsSocket,,connect,tlsSocket.connect,"<p>Initiate a connection on a given socket.</p>
<p>Possible signatures:</p>
<ul>
<li><a href=""net.html#socketconnectoptions-connectlistener""><code>socket.connect(options[, connectListener])</code></a></li>
<li><a href=""net.html#socketconnectpath-connectlistener""><code>socket.connect(path[, connectListener])</code></a>
for <a href=""net.html#ipc-support"">IPC</a> connections.</li>
<li><a href=""net.html#socketconnectport-host-connectlistener""><code>socket.connect(port[, host][, connectListener])</code></a>
for TCP connections.</li>
<li>Returns: <a href=""net.html#class-netsocket"" class=""type"">&lt;net.Socket&gt;</a> The socket itself.</li>
</ul>
<p>This function is asynchronous. When the connection is established, the
<a href=""net.html#event-connect""><code>'connect'</code></a> event will be emitted. If there is a problem connecting,
instead of a <a href=""net.html#event-connect""><code>'connect'</code></a> event, an <a href=""net.html#event-error_1""><code>'error'</code></a> event will be emitted with
the error passed to the <a href=""net.html#event-error_1""><code>'error'</code></a> listener.
The last parameter <code>connectListener</code>, if supplied, will be added as a listener
for the <a href=""net.html#event-connect""><code>'connect'</code></a> event <strong>once</strong>.</p>
<p>This function should only be used for reconnecting a socket after
<code>'close'</code> has been emitted or otherwise it may lead to undefined
behavior.</p>",,27,
1739,request,,request,request.request,,,20,Makes a request to a secure web server
1740,readStream,,read,readStream.read,reads data out of the internal buffer and returns it,,11,
1741,writeStream,,write,writeStream.write,writes some data to the stream,,13,
1742,writeStream,,end,writeStream.end,,,Others,Ends a write stream.
1743,request,,on,request.on,,,Others,Event listener for handling events on a target element.
1744,vm,,Script,vm.Script,"Creating a new vm.Script object compiles code but does not run it. The compiled vm.Script can be run later multiple times. The code is not bound to any global object; rather, it is bound before each run, just for that run.",,Others,
1746,socket,,pipe,socket.pipe,Transfer data from one stream to another stream.,,38,Unknown
1747,request,,post,request.post,,,20,Make a POST request to a specified URL.
1753,document,,getElementsByTagName,document.getElementsByTagName,,,Others,Returns a collection of elements with the specified tag name.
1754,document,,forms,document.forms,,,26,Accesses HTML forms within a document.
1755,document,,createElement,document.createElement,,,28,Creates a new HTML element.
1756,document.head,,appendChild,document.head.appendChild,,,25,Add a child node to a parent node.
1757,Date,,toGMTString,Date.toGMTString,,,Others,Converts date to a GMT string representation.
1758,events,,EventEmitter,events.EventEmitter,Allows event-driven programming in JavaScript.,,Others,
1759,emitter,,call,emitter.call,,,Others,trigger an event explicitly.
1760,path,,endsWith,path.endsWith,,,Others,Checks if a string ends with a specified value.
1761,stream,,Writable,stream.Writable,,,17,Create a writeable stream
1762,console.l,,changeJsonSync,console.l.changeJsonSync,,,Others,Unknown
1763,Number,,Number,Number.Number,,,Others,Parse string to number.
1764,stream,,Readable,stream.Readable,,,18,Create a readable stream
1765,path,,split,path.split,,,Others,Splits a string into an array of substrings.
1766,path,,startsWith,path.startsWith,,,Others,String method to check if a string starts with a specified value.
1767,os,,user,os.user,,,Others,Unknown
1768,it,,trim,it.trim,,,Others,Remove whitespace from both ends of a string.
1769,response,,on,response.on,,,Others,Event handling function.
1770,path,,map,path.map,,,Others,Transforms each element of an array using a callback function
1771,path,,reduce,path.reduce,,,Others,Aggregate array values into a single value.
1772,context,,set,context.set,,,Others,Set value in context.
1773,date,,format,date.format,,,Others,Format date and time values in specified format.
1774,document,,getElementById,document.getElementById,,,26,Get HTML element by ID.
1775,date,,minute,date.minute,,,Others,Get the minutes of the hour from a date object.
1776,date,,toDate,date.toDate,,,Others,Converts a date object to a date.
1777,Intl,,DateTimeFormat,Intl.DateTimeFormat,,,Others,Date and time formatting functionality.
1778,date,,hour,date.hour,,,Others,Get the hour from a date object.
1779,error.errors,,map,error.errors.map,,,Others,Transforms each element in an array.
1780,Error,,createFromModel,Error.createFromModel,,,Others,Unknown
1781,Response.headers,,set,Response.headers.set,,,Others,Manipulates or updates a value in an object.
1782,Response.headers,,append,Response.headers.append,,,Others,Adds a new header to the response object.
1783,document.body,,appendChild,document.body.appendChild,,,Others,Appends a node as the last child of a parent.
1784,document,,createElementNS,document.createElementNS,,,28,Creates an element with a specified namespace.
1785,context,,createImageData,context.createImageData,,,28,Create a new ImageData object.
1786,path,,push,path.push,,,Others,Add an element to the end of an array.
1787,path,,charAt,path.charAt,,,Others,Returns the character at a specified index in a string.
1788,path,,substr,path.substr,,,Others,Extracts a portion of a string.
1789,path,,toLowerCase,path.toLowerCase,,,Others,Converts a string to lowercase.
1790,url,,indexOf,url.indexOf,,,Others,Find index of first occurrence of specified value in string/array.
1791,fs.promises,,readFile,fs.promises.readFile,,,11,Reads file asynchronously.
1792,process,,chdir,process.chdir,,,1,Change current working directory.
1793,Object.hasOwnProperty,,call,Object.hasOwnProperty.call,,,Others,Invokes a function with a specified `this` value.
1794,Error,,captureStackTrace,Error.captureStackTrace,,,Others,Capture current stack trace in Error object.
1795,Object.setPrototypeOf,,bind,Object.setPrototypeOf.bind,,,Others,Bind method binds a function to a context.
1796,Object.getPrototypeOf,,bind,Object.getPrototypeOf.bind,,,Others,Binds a function to a context.
1797,Reflect.get,,bind,Reflect.get.bind,,,33,Binds `this` context to a function.
1798,Reflect,,decorate,Reflect.decorate,,,Others,Wraps a function with additional functionality.
1799,process,,on,process.on,,,Others,Event handling function.
1800,message,,trim,message.trim,,,Others,Removes whitespace from both ends of a string.
1801,fs.promises,,copyFile,fs.promises.copyFile,,,7,Copy a file asynchronously.
1802,stream,,on,stream.on,,,Others,Event handling function for a stream.
1803,stream,,PassThrough,stream.PassThrough,,,Others,Unknown
1804,Boolean,,Boolean,Boolean.Boolean,,,Others,Unknown
1805,fs.promises,,mkdir,fs.promises.mkdir,,,10,Creates a new directory.
1806,fs.promises,,writeFile,fs.promises.writeFile,,,14,Writes data to a file asynchronously.
1807,context.project,,getWorkspaceByFilePath,context.project.getWorkspaceByFilePath,,,Others,Unknown
1808,stream.Readable,,from,stream.Readable.from,,,18,"Transforms input into readable stream
"
1809,document,,querySelector,document.querySelector,,,26,Returns the first element within the document that matches the specified selector.
1810,document,,document,document.document,,,26,Get document object of the webpage.
1811,buffer,,toString,buffer.toString,,,29,Converts a buffer to a string.
1812,fs,,copy,fs.copy,,,7,Copy file or directory.
1813,RegExp,,RegExp,RegExp.RegExp,,,Others,Unknown
1814,url,,slice,url.slice,,,Others,Extracts a section of a string.
1815,path,,slice,path.slice,,,Others,Extracts a section of an array.
1816,generator,,apply,generator.apply,,,Others,Call the function with a specified this value and arguments.
1817,mime,,getType,mime.getType,,,Others,Returns the MIME type of a file based on its extension.
1818,process,,kill,process.kill,,,Others,Terminate a process.
1819,request,,reject,request.reject,,,Others,Return a rejected Promise.
1820,request,,call,request.call,,,Others,Method to call a function.
1821,Reflect,,metadata,Reflect.metadata,,,Others,Unknown
1822,handler,,handler,handler.handler,,,Others,Unknown
1823,document,,querySelectorAll,document.querySelectorAll,,,Others,Selects all elements that match a specified CSS selector.
1824,event,,waitUntil,event.waitUntil,,,Others,Unknown
1825,dir,,replace,dir.replace,,,Others,String replacement method.
1826,Reflect,,getMetadata,Reflect.getMetadata,,,Others,Get metadata information based on method name.
1827,Reflect,,defineMetadata,Reflect.defineMetadata,,,Others,Set metadata on an object.
1828,Object,,Object,Object.Object,,,Others,Unknown
1829,context,,switchToRpc,context.switchToRpc,,,Others,Unknown
1830,context,,getHandler,context.getHandler,,,Others,Unknown
1831,response.channels,,find,response.channels.find,,,Others,Searches for a specific element in an array.
1832,context,,drawImage,context.drawImage,,,Others,Draws an image on a canvas.
1833,document,,execCommand,document.execCommand,,,37,Execute a command on the current document.
1834,document,,getElementsByClassName,document.getElementsByClassName,,,26,Find HTML elements by class name.
1835,context.response,,buffer,context.response.buffer,,,28,Buffer is used to manipulate binary data in JavaScript.
1836,context.response,,timing,context.response.timing,,,Others,Unknown
1837,socket,,emit,socket.emit,,,23,Emit events to trigger listeners subscribed to the socket.
1838,it,,next,it.next,,,Others,Iterator method to retrieve the next value in sequence.
1839,response,,sendFile,response.sendFile,,,Others,Unknown
1840,document.body,,removeChild,document.body.removeChild,,,Others,Remove a child element from a parent element.
1841,symbol,,replace,symbol.replace,,,Others,String replacement method.
1842,process,,removeAllListeners,process.removeAllListeners,,,Others,Removes all event listeners from an emitter.
1843,context,,getImageData,context.getImageData,,,Others,Get image data from canvas.
1844,document.documentElement,,attr,document.documentElement.attr,,,Others,Unknown
1845,rl,,on,rl.on,,,Others,Event listener registration.
1846,tracker,,has,tracker.has,,,Others,Check if property exists in an object.
1847,tracker,,add,tracker.add,,,Others,Unknown
1848,writeStream,,on,writeStream.on,,,Others,Event handling function.
1849,document,,createEvent,document.createEvent,,,Others,Unknown
1850,path,,match,path.match,,,Others,String matching function.
1851,URL.pathname,,includes,URL.pathname.includes,,,Others,Checks if a string contains a specified substring.
1852,URL.pathname,,split,URL.pathname.split,,,Others,Splits a string into an array of substrings.
1853,socket,,join,socket.join,,,Others,Unknown
1854,socket,,in,socket.in,,,Others,Check if a property exists in an object.
1855,buffer,,slice,buffer.slice,,,Others,Returns a copy of a portion of an array.
1856,process,,memoryUsage,process.memoryUsage,,,4,Returns memory usage information.
1857,readStream,,on,readStream.on,,,Others,Event handling function.
1858,path.posix,,join,path.posix.join,,,1,Joining multiple path segments into a single path.
1859,path.posix,,relative,path.posix.relative,,,1,Resolves the relative path from one path to another.
1860,path.posix,,normalize,path.posix.normalize,,,1,"Normalize file path by resolving "".."" and ""."" segments."
1861,path,,includes,path.includes,,,Others,Check if an array includes a certain element.
1862,emitter,,emitter,emitter.emitter,,,Others,Unknown
1863,document.fonts,,check,document.fonts.check,,,Others,Check if a font is loaded or loading.
1864,channel,,close,channel.close,,,Others,Close the channel or resource.
1865,document.head,,removeChild,document.head.removeChild,,,Others,Removes a child node from the parent node.
1866,process.report,,getReport,process.report.getReport,,,Others,Unknown
1867,module,,processAuthorizationCallback,module.processAuthorizationCallback,,,Others,Unknown
1868,module,,getAuthorizationRequirements,module.getAuthorizationRequirements,,,Others,Unknown
1869,response,,blob,response.blob,,,Others,Unknown
1870,map,,getGeneratedOffsets,map.getGeneratedOffsets,,,Others,Unknown
1871,json,,reduce,json.reduce,,,Others,Aggregate array values into a single value.
1872,json,,forEach,json.forEach,,,Others,Iterates over items in an array.
1873,process,,hrtime,process.hrtime,,,Others,Measure elapsed time in high-resolution.
1874,context.require,,undef,context.require.undef,,,Others,Unknown
1875,context,,makeRequire,context.makeRequire,,,Others,Unknown
1876,context,,enable,context.enable,,,Others,Unknown
1877,console.error,,call,console.error.call,,,Others,Execute a function with a specific context.
1878,context,,nameToUrl,context.nameToUrl,,,Others,Converts a name to a URL.
1879,context,,Module,context.Module,,,Others,Unknown
1880,script,,getAttribute,script.getAttribute,,,Others,Get attribute value of a DOM element.
1881,symbol,,getFlags,symbol.getFlags,,,Others,Return flags of a symbol.
1882,context,,makeShimExports,context.makeShimExports,,,Others,Unknown
1883,handler,,handlerFunction,handler.handlerFunction,,,Others,Unknown
1884,context,,nextTick,context.nextTick,,,Others,Async function execution in next iteration of event loop.
1885,context,,startsWith,context.startsWith,,,Others,Check if a string starts with specified characters.
1886,context,,load,context.load,,,Others,Load data or resources asynchronously.
1887,context,,completeLoad,context.completeLoad,,,Others,Unknown
1888,context.defQueue,,push,context.defQueue.push,,,Others,Add an element to the end of the queue.
1889,context,,execCb,context.execCb,,,Others,Unknown
1890,context,,onError,context.onError,,,Others,Handles errors within a specific context.
1891,context,,getFilename,context.getFilename,,,Others,Return the filename associated with the current context.
1892,context,,report,context.report,,,Others,Unknown
1893,set,,trim,set.trim,,,Others,Remove whitespace from beginning and end of a string.
1894,url,,split,url.split,,,Others,Splits a string into an array of substrings.
1895,https,,Agent,https.Agent,,,Others,Unknown
1896,document.documentElement,,removeEventListener,document.documentElement.removeEventListener,,,Others,Removes an event listener from the document element.
1897,document.documentElement,,addEventListener,document.documentElement.addEventListener,,,Others,Attaches an event listener to the document element.
1898,message,,toString,message.toString,,,Others,Converts an object to a string.
1899,Function,,Function,Function.Function,,,39,Unknown
1900,context,,abrupt,context.abrupt,,,Others,Unknown
1901,context,,dispatchException,context.dispatchException,,,Others,Unknown
1902,ctx,,command,ctx.command,,,Others,Unknown
1903,Function,,importDynamic,Function.importDynamic,,,Others,Dynamic import of JavaScript modules.
1904,Function.call,,bind,Function.call.bind,,,Others,Binds a function to a specific context.
1905,ctx,,__nextDelay,ctx.__nextDelay,,,Others,Unknown
1906,ctx,,__nextTick,ctx.__nextTick,,,Others,Async function to execute after current event loop cycle.
1907,ctx,,emit,ctx.emit,,,Others,Event emitter method for triggering custom events in JavaScript.
1908,ctx,,stop,ctx.stop,,,Others,Stop the execution of a function or program.
1909,ctx,,reset,ctx.reset,,,Others,Resets the context or object to its default state.
1910,mime,,extension,mime.extension,,,Others,Unknown
1911,mime,,lookup,mime.lookup,,,Others,Returns the MIME type based on a file extension.
1912,server,,route,server.route,,,Others,Unknown
1913,crypto.default,,createHash,crypto.default.createHash,,,31,Hashing function for cryptographic operations.
1914,it,,call,it.call,,,Others,Calls a function with a given `this` value.
1915,ctx.request,,getName,ctx.request.getName,,,Others,Get the name of a request parameter.
1916,ctx.request,,getMethod,ctx.request.getMethod,,,Others,Returns the HTTP method of the request.
1917,ctx.response,,getStatusCode,ctx.response.getStatusCode,,,24,Returns the status code of the HTTP response.
1918,Message,,text,Message.text,,,Others,Unknown
1919,context,,getSourceCode,context.getSourceCode,,,Others,Return the source code of the context.
1920,ctx,,drawImage,ctx.drawImage,,,Others,Draws an image on a canvas.
1921,ctx,,getImageData,ctx.getImageData,,,Others,Get image data from canvas.
1922,response.body,,getReader,response.body.getReader,,,18,Reads data from a readable stream.
1923,session,,run,session.run,,,35,Execute code/function in a JavaScript session.
1924,session,,release,session.release,,,Others,Unknown
1925,response.headers,,get,response.headers.get,,,Others,Retrieve a specific value from an object.
1926,document.body,,insertAdjacentHTML,document.body.insertAdjacentHTML,,,Others,Inserts HTML into a specified position in relation to an element
1927,message,,substring,message.substring,,,Others,Extracts a portion of a string.
1928,Math.min,,apply,Math.min.apply,,,Others,Calls a function with a given `this` value.
1929,Error.stack,,toString,Error.stack.toString,,,28,Converts an object to a string representation.
1930,response,,json,response.json,,,30,Parses JSON data into a JavaScript object.
1931,document.selection,,createRange,document.selection.createRange,,,Others,Text range creation for selected document elements.
1932,document,,addEventListener,document.addEventListener,,,Others,Unknown
1933,document,,removeEventListener,document.removeEventListener,,,Others,Remove event listener from an element.
1934,response,,ignoreMatch,response.ignoreMatch,,,Others,Unknown
1935,session,,send,session.send,,,23,Sends data to a target in a JavaScript session.
1936,assert,,strict,assert.strict,,,Others,Data type and value comparison in JavaScript.
1937,process,,send,process.send,,,38,Send message to parent process.
1938,Object.assign,,bind,Object.assign.bind,,,Others,Binds a function to a context.
1939,ctx,,setTransform,ctx.setTransform,,,Others,Transforms the current drawing.
1940,map,,map,map.map,,,Others,Returns a new array with the results of a function.
1941,dir,,endsWith,dir.endsWith,,,Others,Check if a string ends with a specific substring.
1942,context.subscriptions,,push,context.subscriptions.push,,,Others,Add item to end of array.
1943,ctx,,clearRect,ctx.clearRect,,,Others,Clears a rectangular area on a canvas.
1944,ctx,,fillRect,ctx.fillRect,,,Others,Draws a filled rectangle in a canvas.
1945,ctx,,strokeRect,ctx.strokeRect,,,Others,Draws a rectangular outline.
1946,ctx,,fillText,ctx.fillText,,,Others,Draws text on the canvas.
1947,console.error,,bind,console.error.bind,,,Others,Binds `this` context to a function.
1948,Set.array,,sum,Set.array.sum,,,Others,Calculates the sum of an array.
1949,server,,shutdown,server.shutdown,,,Others,Stop server execution.
1950,process,,nextTick,process.nextTick,,,Others,Asynchronous execution of a callback function.
1951,agent,,fetchRootKey,agent.fetchRootKey,,,Others,Unknown
1952,response,,text,response.text,,,Others,Unknown
1953,crypto.getRandomValues,,bind,crypto.getRandomValues.bind,,,Others,Binds `crypto.getRandomValues` function to a specific context.
1954,event.source,,postMessage,event.source.postMessage,,,23,Sends a message from one window to another.
1955,resolver,,apply,resolver.apply,,,Others,Apply the function to an object.
1956,process,,openStdin,process.openStdin,,,18,Allows to open a readable stream for standard input.
1957,process,,succeed,process.succeed,,,37,Execute a successful operation.
1958,url,,toLocaleLowerCase,url.toLocaleLowerCase,,,Others,Converts a string to lowercase.
1959,message,,fetch,message.fetch,,,20,HTTP request method for fetching resources.
1960,ctx.http,,post,ctx.http.post,,,20,Sends data to a server via HTTP POST request.
1961,console.log,,apply,console.log.apply,,,Others,"Calls a function with a given 'this' value."
1962,console.log,,bind,console.log.bind,,,Others,Binds a function to a specific context.
1963,message.content,,split,message.content.split,,,Others,Split a string into an array of substrings.
1964,url,,includes,url.includes,,,Others,Checks if a string includes a specified value.
1965,url,,replace,url.replace,,,Others,String replacement method.
1966,url,,startsWith,url.startsWith,,,Others,Check if a string starts with specified characters.
1967,ctx,,inject,ctx.inject,,,Others,Unknown
1968,ctx.console,,addEntry,ctx.console.addEntry,,,Others,Unknown
1969,Math.max,,apply,Math.max.apply,,,Others,Calls a function with a given this value and arguments.
1970,server,,getMiddleware,server.getMiddleware,,,Others,Unknown
1971,date,,date_obj_array,date.date_obj_array,,,Others,Unknown
1972,date,,check_timestamp,date.check_timestamp,,,Others,Unknown
1973,date,,_dd,date._dd,,,Others,Unknown
1974,date,,timestamp,date.timestamp,,,Others,Converts date to timestamp.
1975,date,,date_format,date.date_format,,,Others,Date formatting function.
1976,util,,obj_merge,util.obj_merge,,,Others,Merge two objects into one object.
1977,util,,preg_replace,util.preg_replace,,,Others,Unknown
1978,hash,,end,hash.end,,,Others,Unknown
1979,hash,,read,hash.read,,,Others,Reads data from a hash or similar data structure.
1980,stream,,getVideoTracks,stream.getVideoTracks,,,Others,Get video tracks from a stream.
1981,date,,date_diff,date.date_diff,,,Others,Calculate the difference between two dates.
1982,util,,get_ipv4_addr,util.get_ipv4_addr,,,Others,Unknown
1983,util,,mt_rand,util.mt_rand,,,Others,Generate random numbers using Mersenne Twister algorithm.
1984,util,,humanize,util.humanize,,,Others,Capitalize and format strings to be more human-readable.
1985,Intl,,NumberFormat,Intl.NumberFormat,,,Others,Formatting numbers for different locales.
1986,response,,status,response.status,,,24,Returns the HTTP status code of the response from the server.
1987,document,,createTextNode,document.createTextNode,,,Others,Creates a new text node.
1988,document.body,,contains,document.body.contains,,,Others,Check if element is a descendant of another element.
1989,Error,,call,Error.call,,,Others,Unknown
1990,context,,filter,context.filter,,,Others,Filters elements in an array based on a condition.
1991,context,,replace,context.replace,,,Others,String replacement within a given context.
1992,path,,replace,path.replace,,,Others,String replacement method.
1993,map.editTools,,startPolygon,map.editTools.startPolygon,,,Others,Draws a polygon on a map.
1994,map.editTools,,clearLayers,map.editTools.clearLayers,,,Others,Remove all layers from map.
1995,map,,off,map.off,,,Others,Event unbinding method.
1996,map,,on,map.on,,,Others,Event listener attachment function.
1997,map.editTools,,drawing,map.editTools.drawing,,,Others,Unknown
1998,map.editTools,,startRectangle,map.editTools.startRectangle,,,Others,Draws a rectangle on the map.
1999,map.editTools,,commitDrawing,map.editTools.commitDrawing,,,Others,Unknown
2000,map.editTools,,startPolyline,map.editTools.startPolyline,,,Others,Draw new polyline on the map.
2001,map.editTools,,startMarker,map.editTools.startMarker,,,Others,Add a marker to the map.
2002,map.editTools,,stopDrawing,map.editTools.stopDrawing,,,Others,Stop drawing on the map.
2003,map.editTools,,startCircle,map.editTools.startCircle,,,Others,Create and start drawing a circle shape on the map.
2004,fs.promises,,access,fs.promises.access,,,Others,Check if file/directory accessibility.
2005,fs.promises,,stat,fs.promises.stat,,,Others,Unknown
2006,document,,elementFromPoint,document.elementFromPoint,,,Others,Returns the element at a specified point on the webpage.
2007,ctx,,logger,ctx.logger,,,Others,Unknown
2008,ctx,,on,ctx.on,,,Others,Event listener registration and handling.
2009,buffer,,readUintLE,buffer.readUintLE,,,Others,Reads an unsigned integer from a buffer in little-endian format.
2010,buffer,,subarray,buffer.subarray,,,Others,Slice of a buffer without copying the data.
2011,buffer,,at,buffer.at,,,Others,Accesses element at specified index in buffer.
2012,test,,number,test.number,,,Others,Unknown
2013,request,,__destroy_into_raw,request.__destroy_into_raw,,,Others,Unknown
2014,context.request,,setAuthenticationParameter,context.request.setAuthenticationParameter,,,Others,Set authentication parameter for request.
2015,context.store,,setItem,context.store.setItem,,,Others,Stores an item in the context.
2016,context.store,,getItem,context.store.getItem,,,Others,Retrieve an item from a storage context.
2017,context.store,,removeItem,context.store.removeItem,,,Others,Remove an item from the store.
2018,context.app,,alert,context.app.alert,,,Others,Display a pop-up message box.
2019,context.app,,prompt,context.app.prompt,,,Others,User input dialog box for JavaScript.
2020,Crypto,,displayInfo,Crypto.displayInfo,,,Others,Unknown
2021,Crypto,,updatePrice,Crypto.updatePrice,,,Others,Unknown
2022,document.head,,querySelector,document.head.querySelector,,,Others,DOM element selection method.
2023,Map.parameters,,set,Map.parameters.set,,,28,Set value for a key in a map.
2024,ctx,,beginPath,ctx.beginPath,,,Others,Unknown
2025,ctx,,moveTo,ctx.moveTo,,,Others,Draws a path to a new point on the canvas.
2026,ctx,,lineTo,ctx.lineTo,,,Others,Draws a line to a specified point.
2027,ctx,,closePath,ctx.closePath,,,Others,Closes the current subpath by connecting the last point.
2028,ctx,,fill,ctx.fill,,,Others,Fill - Fills the current path with the current fill style.
2029,ctx,,createRadialGradient,ctx.createRadialGradient,,,Others,Create a radial gradient for rendering in JavaScript.
2030,fs,,relative,fs.relative,,,1,Returns the relative path between two file paths.
2031,fs,,readText,fs.readText,,,Others,Unknown
2032,end,,getTime,end.getTime,,,Others,"Returns the number of milliseconds since January 1, 1970."
2033,Set.parsed,,add,Set.parsed.add,,,Others,Add an element to a Set.
2034,error.cli,,printHelp,error.cli.printHelp,,,Others,Unknown
2035,process,,removeListener,process.removeListener,,,Others,Unknown
2036,process,,getMaxListeners,process.getMaxListeners,,,4,Return the maximum number of event listeners.
2037,process,,setMaxListeners,process.setMaxListeners,,,4,Set maximum number of event listeners for a process.
2038,request.method,,toUpperCase,request.method.toUpperCase,,,Others,Converts a string to uppercase.
2039,socket.broadcast,,emit,socket.broadcast.emit,,,23,Sends a message to all clients except the sender.
2040,end,,shift,end.shift,,,Others,Remove first element of array and return removed element.
2041,start,,shift,start.shift,,,Others,Remove the first element from an array.
2042,start,,toArray,start.toArray,,,Others,Converts a data structure into an array.
2043,Date,,find,Date.find,,,Others,Searches for specific element in an array.
2044,stream,,getTracks,stream.getTracks,,,Others,Get an array of tracks from a media stream.
2045,event.inputBuffer,,getChannelData,event.inputBuffer.getChannelData,,,11,Returns channel data from the input buffer.
2046,module,,arrayBuffer,module.arrayBuffer,,,28,Converts data to an ArrayBuffer.
2047,module.headers,,get,module.headers.get,,,Others,"Returns a specific value from a module's headers."
2048,message,,downloadMedia,message.downloadMedia,,,Others,Download media content from a source.
2049,domain,,endsWith,domain.endsWith,,,Others,Check if a string ends with a specified character sequence.
2050,domain,,substring,domain.substring,,,Others,Returns a portion of a string.
2051,http,,post,http.post,,,20,Makes a POST request to a specified URL.
2052,watcher,,on,watcher.on,,,Others,Event listener registration.
2053,error.message,,includes,error.message.includes,,,Others,Checks if a string contains a specified value.
2054,tls,,TLSSocket,tls.TLSSocket,,,22,create and manage a secure TLS (Transport Layer Security) connection
2055,object.appData,,find,object.appData.find,,,Others,Searches for an element in an array and returns it.
2056,error.message,,startsWith,error.message.startsWith,,,Others,Check if a string starts with a specified value.
2057,event.target,,querySelectorAll,event.target.querySelectorAll,,,Others,Returns a list of elements matching a specified CSS selector.
2058,event.target,,appendChild,event.target.appendChild,,,Others,Inserts a node as the last child of a parent.
2059,iterator,,iterator,iterator.iterator,,,Others,Unknown
2060,server,,includes,server.includes,,,Others,Check if an array includes a certain element.
2061,server,,split,server.split,,,Others,Splits a string into an array based on a delimiter.
2062,inspector,,prepare,inspector.prepare,,,Others,Unknown
2063,handler,,invoke,handler.invoke,,,Others,Unknown
2064,context,,getComponent,context.getComponent,,,Others,Get component specified by name from context in JavaScript.
2065,Intl,,DisplayNames,Intl.DisplayNames,,,Others,Unknown
2066,start,,toDate,start.toDate,,,Others,Converts a value to a Date object.
2067,document.defaultView,,getComputedStyle,document.defaultView.getComputedStyle,,,Others,Get computed style of an element.
2068,event.data,,includes,event.data.includes,,,Others,Check if an array or string includes a specific element.
2069,url,,replaceAll,url.replaceAll,,,Others,Replace all occurrences of a substring in a string.
2070,process.stdin,,setEncoding,process.stdin.setEncoding,,,29,Converts input to character encoding specified.
2071,process.stdin,,on,process.stdin.on,,,Others,Event handling function.
2072,process.stdin,,read,process.stdin.read,,,11,Reads input from stdin.
2073,response.body,,pipe,response.body.pipe,,,Others,Unknown
2074,readStream,,pipe,readStream.pipe,,,Others,Unknown
2075,json,,map,json.map,,,Others,Transforms each element of an array using a function.
2076,request,,json,request.json,,,30,Parse JSON data into JavaScript object or value.
2077,document.referrer,,includes,document.referrer.includes,,,Others,Check if a string includes another specified string.
2078,request,,formData,request.formData,,,Others,Access data from a form.
2079,request,,arrayBuffer,request.arrayBuffer,,,Others,Converts response body into an ArrayBuffer.
2080,request,,text,request.text,,,Others,Returns the text content of the request.
2081,url.searchParams,,entries,url.searchParams.entries,,,Others,Returns an iterator of all key/value pairs.
2082,request.headers,,get,request.headers.get,,,Others,Accesses a specific header value.
2083,server,,requestIP,server.requestIP,,,Others,Unknown
2084,error,,getResponse,error.getResponse,,,Others,Unknown
2085,URL.pathname,,startsWith,URL.pathname.startsWith,,,Others,Check if a string starts with specified characters.
2086,URL.pathname,,slice,URL.pathname.slice,,,Others,Extracts a section of a string.
2087,url,,lastIndexOf,url.lastIndexOf,,,Others,Returns the last occurrence index of a specified value.
2088,url,,substring,url.substring,,,Others,Extracts a section of a string.
2089,stream,,pipeThrough,stream.pipeThrough,,,Others,Unknown
2090,url.searchParams,,append,url.searchParams.append,,,Others,Add a new key-value pair to the URL search parameters.
2091,ctx.db,,getCollection,ctx.db.getCollection,,,Others,Unknown
2092,ctx,,get,ctx.get,,,Others,Returns a value from an object based on a key.
2093,ctx,,throw,ctx.throw,,,Others,Throw an exception.
2094,message,,split,message.split,,,Others,Splits a string into an array of substrings.
2095,message,,charAt,message.charAt,,,Others,Returns the character at a specified index in a string.
2096,fs,,emptyDirSync,fs.emptyDirSync,,,8,Delete all files and directories in a directory.
2097,fs,,copySync,fs.copySync,,,7,Copy files synchronously.
2098,stats,,toJson,stats.toJson,,,Others,Converts stats object to JSON format.
2099,map,,setView,map.setView,,,Others,Updates the view of the map.
2100,map,,getZoom,map.getZoom,,,Others,Get current zoom level of a map.
2101,map,,getCenter,map.getCenter,,,Others,Returns the center coordinates of a map.
2102,event.target,,getAttribute,event.target.getAttribute,,,Others,Get attribute value from HTML element.
2103,path,,getNextSibling,path.getNextSibling,,,Others,Get the next sibling of a DOM element.
2104,context,,fillText,context.fillText,,,Others,Draws text on a canvas.
2105,BigInt,,BigInt,BigInt.BigInt,,,Others,Unknown
2106,ctx,,platform,ctx.platform,,,Others,Unknown
2107,session.platform,,startsWith,session.platform.startsWith,,,Others,String method to check if a string starts with a specified value.
2108,session.bot,,createMessage,session.bot.createMessage,,,Others,Unknown
2109,ctx.bots,,find,ctx.bots.find,,,Others,Searches for a specific element in an array or object.
2110,ctx.bots,,map,ctx.bots.map,,,Others,Transforms elements of an array using a callback function.
2111,hash,,write,hash.write,,,33,Write data to a hash.
2112,generator,,generator,generator.generator,,,Others,Unknown
2113,assert,,typeof,assert.typeof,,,Others,Returns the data type of a variable in JavaScript.
2114,assert,,error,assert.error,,,Others,Throw an error.
2115,assert,,note,assert.note,,,Others,Unknown
2116,resolver,,resolve,resolver.resolve,,,Others,Unknown
2117,resolver,,reject,resolver.reject,,,Others,Promise rejection with a specified reason.
2118,document.documentElement,,setAttribute,document.documentElement.setAttribute,,,Others,Sets an attribute on the HTML document element.
2119,path,,attr,path.attr,,,Others,Get or set attribute value of path element.
2120,response,,pipe,response.pipe,,,Others,Unknown
2121,ctx,,stroke,ctx.stroke,,,Others,Draws the outline of a shape.
2122,fs.promises,,rename,fs.promises.rename,,,7,Move file or directory to new location.
2123,String.fromCharCode,,apply,String.fromCharCode.apply,,,Others,Calls a function with a given this value and arguments
2124,request.url,,indexOf,request.url.indexOf,,,Others,Returns the index of a specified value within a string.
2125,Map.validateMap,,set,Map.validateMap.set,,,Others,Unknown
2126,document,,createTreeWalker,document.createTreeWalker,,,Others,Traverses and filters nodes in a tree structure.
2127,document,,createDocumentFragment,document.createDocumentFragment,,,Others,Create a new empty document fragment.
2128,Date,,isExpired,Date.isExpired,,,Others,Check if a date is expired.
2129,Date,,store,Date.store,,,Others,Store data in the Date object.
2130,Date,,read,Date.read,,,Others,Reads input or data.
2131,Date,,clear,Date.clear,,,Others,Resets the date to its initial state.
2132,message,,concat,message.concat,,,Others,Concatenates two or more strings.
2133,console,,err,console.err,,,Others,Outputs an error message to the console.
2134,context.differentTypes,,includes,context.differentTypes.includes,,,Others,Check if an array includes a certain element.
2135,context.differentTypes,,push,context.differentTypes.push,,,Others,Add element to end of array.
2136,crypto.subtle,,digest,crypto.subtle.digest,,,33,Hashes input data using a specified cryptographic hash function.
2137,process.stderr,,write,process.stderr.write,,,38,Writes data to the standard error stream.
2138,path,,concat,path.concat,,,Others,Join two or more arrays.
2139,date,,isValid,date.isValid,,,Others,Date validation check.
2140,response,,clone,response.clone,,,Others,Deep copy of an object.
2141,response.headers,,forEach,response.headers.forEach,,,Others,Iterates over elements in an array or object.
2142,request,,clone,request.clone,,,Others,Unknown
2143,event,,respondWith,event.respondWith,,,Others,Unknown
2144,URL.searchParams,,get,URL.searchParams.get,,,Others,Returns the value of the given parameter in the URL
2145,message.content,,includes,message.content.includes,,,Others,Checks if a string contains a specified substring.
2146,message,,hasOwnProperty,message.hasOwnProperty,,,Others,Check if an object has a specified property.
2147,assert,,isFalse,assert.isFalse,,,Others,"Returns true if the value is false, false otherwise."
2148,assert,,isTrue,assert.isTrue,,,Others,Check if a value is true.
2149,server,,send,server.send,,,Others,Unknown
2150,process,,_rawDebug,process._rawDebug,,,Others,Unknown
2151,ctx.yinglish,,chs2yin,ctx.yinglish.chs2yin,,,Others,Converts Chinese characters to Yinglish phonetic transcription.
2152,context,,fillRect,context.fillRect,,,Others,Draws a filled rectangle.
2153,fs,,outputFileSync,fs.outputFileSync,,,14,Writes data to a file synchronously.
2154,http,,Server,http.Server,,,Others,Unknown
2155,socket,,notify,socket.notify,,,23,Notify users or clients of a specific event or message.
2156,buffer,,push,buffer.push,,,Others,Add an element to the end of an array.
2157,stream,,resume,stream.resume,,,17,Resumes a paused stream.
2158,module,,fileTypeFromBuffer,module.fileTypeFromBuffer,,,Others,Returns file type based on buffer content.
2159,process,,emit,process.emit,,,Others,Event emitter method to trigger custom events.
2160,path,,reverse,path.reverse,,,Others,Reverses the order of elements in an array.
2161,stream,,push,stream.push,,,Others,Add item to end of array or stream.
2162,stream,,emit,stream.emit,,,Others,Event emitter method to trigger named event with data.
2163,stream,,listeners,stream.listeners,,,Others,Returns an array of listeners for a given event.
2164,stats,,hasWarnings,stats.hasWarnings,,,Others,Check if there are any warnings in the statistics data.
2165,stats,,hasErrors,stats.hasErrors,,,Others,Unknown
2166,context.parserServices,,getDocumentFragment,context.parserServices.getDocumentFragment,,,Others,Unknown
2167,ctx,,redirect,ctx.redirect,,,Others,Redirect user to a different URL.
2168,message,,reply,message.reply,,,23,Send a response message.
2169,message.content,,toLowerCase,message.content.toLowerCase,,,Others,Converts a string to lowercase.
2170,Error.stack,,split,Error.stack.split,,,Others,Splits a string into an array of substrings.
2171,events,,map,events.map,,,Others,Transforms each element in an array using a callback function.
2172,ctx,,addPage,ctx.addPage,,,Others,Unknown
2173,module,,dispose,module.dispose,,,Others,Unknown
2174,module,,add,module.add,,,Others,Unknown
2175,event.args,,map,event.args.map,,,Others,Transforms each element of an array using a callback function.
2176,events,,forEach,events.forEach,,,Others,Iterates over elements in an array.
2177,response,,includes,response.includes,,,Others,Check if an array or string includes a specific element.
2178,dir,,isDirectory,dir.isDirectory,,,3,Check if a directory exists.
2179,event.currentTarget,,getAttribute,event.currentTarget.getAttribute,,,Others,Get attribute value from HTML element.
2180,message.content,,startsWith,message.content.startsWith,,,Others,Checks if a string starts with a specified value.
2181,message,,react,message.react,,,Others,Add a reaction to a message.
2182,Buffer,,write,Buffer.write,,,13,Writes data to a buffer.
2183,message,,slice,message.slice,,,Others,Extracts a section of a string.
2184,module.hot,,accept,module.hot.accept,,,Others,Enables hot module replacement for JavaScript modules.
2185,module,,module,module.module,,,Others,Unknown
2186,context,,func,context.func,,,Others,Unknown
2187,util,,matchWildcardPattern,util.matchWildcardPattern,,,Others,Unknown
2188,Reflect,,hasMetadata,Reflect.hasMetadata,,,Others,Check if metadata exists on an object.
2189,Reflect,,getMetadataKeys,Reflect.getMetadataKeys,,,Others,Returns an array of keys for metadata associated with an object.
2190,path,,replaceWith,path.replaceWith,,,Others,Replace an element with another element.
2191,path,,replaceWithMultiple,path.replaceWithMultiple,,,Others,Unknown
2192,path.scope,,registerBinding,path.scope.registerBinding,,,Others,Unknown
2193,path,,unshiftContainer,path.unshiftContainer,,,Others,Inserts elements at the beginning of an array.
2194,path.scope,,hasBinding,path.scope.hasBinding,,,Others,Checks if a binding exists in the current scope.
2195,dir,,split,dir.split,,,Others,String method to split a string into an array.
2196,stream,,shift,stream.shift,,,Others,Remove first element from a data structure.
2197,context.cordova,,findProjectRoot,context.cordova.findProjectRoot,,,Others,Unknown
2198,path,,get,path.get,,,Others,Accessing a value from an object.
2199,path,,isExpressionStatement,path.isExpressionStatement,,,Others,Checks if given path is an expression statement.
2200,request.send,,bind,request.send.bind,,,Others,Binds the function to a specific context.
2201,sourceMap,,toJSON,sourceMap.toJSON,,,Others,Converts source map data to JSON format.
2202,domain,,split,domain.split,,,Others,Splits a string into an array of substrings.
2203,stream,,pipeTo,stream.pipeTo,,,Others,Unknown
2204,document,,createComment,document.createComment,,,23,Creates a comment node.
2205,script,,onclick,script.onclick,,,23,Event listener for click events.
2206,hash,,match,hash.match,,,Others,String match method returns an array of matches.
2207,hash,,substr,hash.substr,,,Others,Extracts a portion of a string.
2208,context.diagnostics,,push,context.diagnostics.push,,,Others,Add item to the end of an array.
2209,context.checker,,getTypeOfSymbolAtLocation,context.checker.getTypeOfSymbolAtLocation,,,40,Get type of symbol at a specific location in code.
2210,context.checker,,getNonNullableType,context.checker.getNonNullableType,,,40,Returns non-nullable type from context in JavaScript.
2211,context.checker,,getTypeAtLocation,context.checker.getTypeAtLocation,,,Others,Unknown
2212,context,,superTransformExpression,context.superTransformExpression,,,Others,Unknown
2213,context,,transformExpression,context.transformExpression,,,Others,Unknown
2214,process.stdin,,resume,process.stdin.resume,,,11,Reads input from a stream.
2215,process.stdin,,once,process.stdin.once,,,Others,Run function once for a given event.
2216,process.stdin,,pause,process.stdin.pause,,,Others,Unknown
2217,crypto.subtle,,sign,crypto.subtle.sign,,,33,Produces a cryptographic signature of the data.
2218,crypto.subtle,,importKey,crypto.subtle.importKey,,,31,Import cryptographic key into the Web Crypto API.
2219,crypto.subtle,,encrypt,crypto.subtle.encrypt,,,33,Encrypt data using cryptographic algorithm.
2220,context,,setFillStyle,context.setFillStyle,,,38,Set the fill color/style for a drawing context.
2221,context,,beginPath,context.beginPath,,,Others,Initiates a new path in a canvas drawing.
2222,context,,moveTo,context.moveTo,,,Others,Move the drawing cursor to specified coordinates.
2223,context,,lineTo,context.lineTo,,,Others,Draws a line to specified coordinates.
2224,context,,stroke,context.stroke,,,Others,Draws the outline of a shape.
2225,context,,closePath,context.closePath,,,19,Closes the current path.
2226,context,,arc,context.arc,,,Others,Draws an arc on a canvas.
2227,context,,fill,context.fill,,,Others,Fill the current path with the current fill style.
2228,context,,setFontSize,context.setFontSize,,,Others,Unknown
2229,context,,setLineWidth,context.setLineWidth,,,Others,Set the width of a line in a canvas context.
2230,context,,setStrokeStyle,context.setStrokeStyle,,,Others,Set the stroke style for rendering shapes.
2231,module,,_compile,module._compile,,,Others,Unknown
2232,symbol,,toLowerCase,symbol.toLowerCase,,,Others,Converts a string to lowercase.
2233,context,,measureText,context.measureText,,,Others,Measure the width of a text string on a canvas.
2234,channel,,isErrored,channel.isErrored,,,34,Check if the channel has encountered an error.
2235,channel,,isLeaving,channel.isLeaving,,,Others,Check if the channel is leaving.
2236,channel,,isClosed,channel.isClosed,,,Others,Returns whether a channel is closed.
2237,channel,,trigger,channel.trigger,,,Others,Unknown
2238,channel,,joinRef,channel.joinRef,,,Others,Returns join reference of channel.
2239,channel,,channel,channel.channel,,,Others,Unknown
2240,url,,match,url.match,,,Others,String matching using a regular expression.
2241,event,,callBack,event.callBack,,,Others,Unknown
2242,event.target,,removeEventListener,event.target.removeEventListener,,,23,Stop listening for events on a specific element.
2243,document.body,,addEventListener,document.body.addEventListener,,,38,Attaches an event listener to the specified element.
2244,event.target,,addEventListener,event.target.addEventListener,,,Others,Attaches an event listener to the target element.
2245,stream,,once,stream.once,,,40,Runs a function only once.
2246,stream,,removeListener,stream.removeListener,,,34,Remove a listener from an event emitter.
2247,stream,,destroy,stream.destroy,,,34,Close the stream and release any resources associated with it.
2248,stream,,stream,stream.stream,,,Others,Unknown
2249,test,,fullTitle,test.fullTitle,,,Others,Unknown
2250,test.consoleErrors,,join,test.consoleErrors.join,,,Others,Concatenates all elements of an array into a string.
2251,fs.promises,,readdir,fs.promises.readdir,,,3,Reads the content of a directory.
2252,event,,isPropagationStopped,event.isPropagationStopped,,,31,Prevents event propagation from continuing.
2253,object,,apply,object.apply,,,40,Call a function with a given this value and arguments.
2254,Error,,isPrototypeOf,Error.isPrototypeOf,,,Others,Checks if an object is a prototype of another object.
2255,ctx,,stylize,ctx.stylize,,,Others,Unknown
2256,ctx.seen,,indexOf,ctx.seen.indexOf,,,Others,Searches for a specified item in an array and returns its index.
2257,ctx.seen,,pop,ctx.seen.pop,,,Others,Remove and return the last element of an array.
2258,ctx.seen,,push,ctx.seen.push,,,Others,Add one or more elements to the end of an array.
2259,events.EventEmitter,,call,events.EventEmitter.call,,,Others,Unknown
2260,stream.Transform,,call,stream.Transform.call,,,Others,Unknown
2261,process.stdin,,destroy,process.stdin.destroy,,,Others,"Ends input stream and triggers 'end' event."
2262,path,,indexOf,path.indexOf,,,Others,Returns the index of the first occurrence of a value.
2263,response.statusCode,,toString,response.statusCode.toString,,,29,Converts object to a string representation.
2264,event,,addMetadata,event.addMetadata,,,Others,Unknown
2265,ctx,,commit,ctx.commit,,,Others,Unknown
2266,Object.hasOwnProperty,,bind,Object.hasOwnProperty.bind,,,40,Binds a function to a context.
2267,start,,getFullYear,start.getFullYear,,,Others,Get the year from a date object.
2268,end,,apply,end.apply,,,Others,Call a function with a given `this` value.
2269,path,,buildCodeFrameError,path.buildCodeFrameError,,,38,Generates an error message with code frame details.
2270,path,,traverse,path.traverse,,,Others,Recursively traverse a data structure.
2271,Set,,map,Set.map,,,33,Transforms each element of a set using a callback function.
2272,session,,sendJson,session.sendJson,,,20,Serialize data into JSON and send in a response.
2273,document,,createAttribute,document.createAttribute,,,39,Create a new attribute.
2274,path,,setAttribute,path.setAttribute,,,Others,Sets an attribute on an element.
2275,response,,getOutputs,response.getOutputs,,,Others,Returns outputs based on the given response.
2276,response,,setSchema,response.setSchema,,,Others,Unknown
2277,event.timestamp,,getTime,event.timestamp.getTime,,,34,Returns the Unix timestamp of the Date object.
2278,events,,indexOf,events.indexOf,,,Others,Searches for an element in an array and returns its index.
2279,buffer,,copyWithin,buffer.copyWithin,,,33,Copy elements within a buffer.
2280,ctx.props,,render,ctx.props.render,,,Others,Unknown
2281,JSON.stringify,,apply,JSON.stringify.apply,,,Others,"Combines an array-like object with a function's arguments."
2282,message,,startsWith,message.startsWith,,,Others,Check if a string starts with specified characters.
2283,document,,createRange,document.createRange,,,40,Creates a range object.
2284,array,,hasOwnProperty,array.hasOwnProperty,,,Others,Check if an object has a specified property.
2285,request,,setRequestHeader,request.setRequestHeader,,,20,Set HTTP request header with specified header and value.
2286,Intl,,RelativeTimeFormat,Intl.RelativeTimeFormat,,,Others,Formatting relative time strings.
2287,number,,slice,number.slice,,,Others,Returns a portion of an array.
2288,number,,split,number.split,,,Others,Splits a string into an array of substrings.
2289,number,,replace,number.replace,,,Others,String replacement method.
2290,stream,,getReader,stream.getReader,,,11,Reads data from a stream.
2291,context,,resolveRequest,context.resolveRequest,,,Others,Unknown
2292,path,,getNode,path.getNode,,,Others,Return the node from a given path.
2293,path,,call,path.call,,,Others,Invoke a function with a given context.
2294,number,,substring,number.substring,,,Others,Returns a portion of a string.
2295,path,,forEach,path.forEach,,,10,Iterates over elements in an array.
2296,it,,end,it.end,,,Others,Returns the end position of an iterable object.
2297,TextDecoder.decode,,bind,TextDecoder.decode.bind,,,33,Binds `TextDecoder.decode` function to a specific context.
2298,TextEncoder.encode,,bind,TextEncoder.encode.bind,,,40,Binds a function with a specified context.
2299,server,,on,server.on,,,Others,Event handling function.
2300,path.parentPath,,isProgram,path.parentPath.isProgram,,,Others,Unknown
2301,message,,toLowerCase,message.toLowerCase,,,29,Converts a string to lowercase.
2302,ctx.logger,,warn,ctx.logger.warn,,,Others,Log a warning message.
2303,ctx.http,,get,ctx.http.get,,,20,Make GET request to a server.
2304,ctx,,rotate,ctx.rotate,,,40,Transformation function for rotating elements in a canvas.
2305,ctx,,translate,ctx.translate,,,34,Transforms the canvas origin point by a specified distance.
2306,context.containerRuntime,,orderSequentially,context.containerRuntime.orderSequentially,,,Others,Order tasks sequentially one after another.
2307,request,,addListener,request.addListener,,,Others,Unknown
2308,module,,onCreate,module.onCreate,,,Others,Unknown
2309,MAP,,queryRenderedFeatures,MAP.queryRenderedFeatures,,,Others,Returns rendered features at a specified point on the map.
2310,module,,onUpdate,module.onUpdate,,,Others,Unknown
2311,module,,onDestroy,module.onDestroy,,,Others,Unknown
2312,MAP,,fitBounds,MAP.fitBounds,,,Others,Set map viewport to show all provided geographical points.
2313,MAP,,flyTo,MAP.flyTo,,,Others,Unknown
2314,MAP,,getSource,MAP.getSource,,,Others,Function to retrieve the source of a map element.
2315,path,,replaceWithSourceString,path.replaceWithSourceString,,,Others,Unknown
2316,message,,toUpperCase,message.toUpperCase,,,30,Converts a string to uppercase.
2317,context,,revokeSession,context.revokeSession,,,Others,Unknown
2318,Date,,Date,Date.Date,,,Others,Get current date and time.
2319,set,,set,set.set,,,Others,Unknown
2320,stream,,write,stream.write,,,17,Writes data to a stream.
2321,channel,,send,channel.send,,,23,Send a message or data to a specified destination.
2322,event.detail,,addEventListener,event.detail.addEventListener,,,Others,Unknown
2323,cluster,,toString,cluster.toString,,,30,Converts an object to a string representation.
2324,start,,after,start.after,,,Others,Delaying function execution until after a specified period.
2325,path,,unshift,path.unshift,,,Others,Adds elements to the beginning of an array.
2326,path,,shift,path.shift,,,Others,Removes and returns the first element of an array.
2327,querystring,,indexOf,querystring.indexOf,,,Others,Searches for a specified value within a string.
2328,querystring,,substring,querystring.substring,,,Others,Extracts part of a string.
2329,stats,,then,stats.then,,,34,Returns a promise for handling asynchronous operations.
2330,buffer,,getBuffer,buffer.getBuffer,,,28,Returns the buffer stored in the buffer object.
2331,document,,exitFullscreen,document.exitFullscreen,,,Others,Exit full screen mode.
2332,path,,entries,path.entries,,,Others,Unknown
2333,document,,getElementsByName,document.getElementsByName,,,Others,Get elements by name attribute.
2334,event.measurement,,toString,event.measurement.toString,,,29,Converts an object to a string representation.
2335,queryString,,getParam,queryString.getParam,,,38,Retrieve parameter value from query string.
2336,event.clipboardData,,getData,event.clipboardData.getData,,,Others,Returns the data of the specified data type.
2337,stats,,toString,stats.toString,,,29,Converts object into a string.
2338,path,,lastIndexOf,path.lastIndexOf,,,Others,Returns the index of the last occurrence of a substring.
2339,path,,substring,path.substring,,,Others,Extracts part of a string.
2340,Util,,logCyan,Util.logCyan,,,Others,Unknown
2341,Util,,replace,Util.replace,,,Others,Unknown
2342,Util,,logRed,Util.logRed,,,Others,Prints red colored log messages.
2343,Util,,writeFileSync,Util.writeFileSync,,,14,Write data to a file synchronously.
2344,document.body,,insertBefore,document.body.insertBefore,,,10,Inserts a node before a specified child node.
2345,date,,split,date.split,,,Others,Split a string into an array of substrings.
2346,response,,match,response.match,,,Others,Searches a string for a match against a regular expression.
2347,error,,hasOwnProperty,error.hasOwnProperty,,,Others,Check if an object has a specified property.
2348,buffer,,put,buffer.put,,,33,Add data to buffer.
2349,ctx,,plugin,ctx.plugin,,,Others,Unknown
2350,worker,,handler,worker.handler,,,Others,Unknown
2351,it,,close,it.close,,,38,Close the iterator or resource.
2352,ctx,,quadraticCurveTo,ctx.quadraticCurveTo,,,Others,Draws a quadratic curve.
2353,ctx,,save,ctx.save,,,33,Saves the current state of the canvas.
2354,ctx,,measureText,ctx.measureText,,,29,Measures the width of a text string.
2355,ctx,,setLineDash,ctx.setLineDash,,,Others,Set the dash pattern for the lines.
2356,agent,,file,agent.file,,,Others,Unknown
2357,agent,,call,agent.call,,,Others,Unknown
2358,fs,,File,fs.File,,,Others,Unknown
2359,agent,,out,agent.out,,,Others,Prints an output to the console.
2360,document.querySelector,,bind,document.querySelector.bind,,,40,Binds a function to a specific context.
2361,agent,,f2o,agent.f2o,,,Others,Converts a function to an object.
2362,agent,,write,agent.write,,,13,Output data or text to a specified location.
2363,response.data,,match,response.data.match,,,39,String matching method for finding patterns in text data.
2364,before,,pushStack,before.pushStack,,,Others,Unknown
2365,session.bot,,sendMessage,session.bot.sendMessage,,,23,Send a message to a recipient.
2366,cipher,,setEncoding,cipher.setEncoding,,,33,Converts the output of cipher to a specific encoding.
2367,cipher,,write,cipher.write,,,13,Write data to a file or stream.
2368,cipher,,end,cipher.end,,,Others,Unknown
2369,response,,arrayBuffer,response.arrayBuffer,,,33,Converts response to an ArrayBuffer.
2370,cipher,,read,cipher.read,,,Others,Unknown
2371,Math,,easeInOutQuad,Math.easeInOutQuad,,,40,Easing function for smooth acceleration and deceleration.
2372,process,,process,process.process,,,Others,Unknown
2373,Object.assign,,apply,Object.assign.apply,,,40,Call a function with a given `this` value.
2374,context,,hasOwnProperty,context.hasOwnProperty,,,Others,Checks if an object has a specified property.
2375,Array.nodes,,keys,Array.nodes.keys,,,Others,Returns an array of keys in an object.
2376,hash,,toString,hash.toString,,,29,Converts a value to a string.
2377,path.el,,getPointAtLength,path.el.getPointAtLength,,,Others,Returns a point at a specified distance along a path.
2378,hash,,replace,hash.replace,,,Others,String replacement method.
2379,context,,match,context.match,,,Others,String matching function.
2380,buffer,,readUInt8,buffer.readUInt8,,,11,Reads an unsigned 8-bit integer from a buffer.
2381,buffer,,readUInt16BE,buffer.readUInt16BE,,,11,Reads an unsigned 16-bit integer from a buffer in big-endian format
2382,buffer,,readUInt32BE,buffer.readUInt32BE,,,11,Reads an unsigned 32-bit integer from a buffer in big-endian.
2383,Function,,conditionFunction,Function.conditionFunction,,,Others,Unknown
2384,document,,write,document.write,,,Others,Output text or HTML content to the document.
2385,url,,endsWith,url.endsWith,,,Others,Check if a string ends with a specified substring.
2386,module.exports,,generate,module.exports.generate,,,Others,Unknown
2387,crypto,,sha1,crypto.sha1,,,33,Hashing function for generating SHA-1 cryptographic hash values.
2388,stream,,queue,stream.queue,,,Others,Unknown
2389,ctx,,roundRect,ctx.roundRect,,,Others,Draws a rounded rectangle.
2390,ctx,,createLinearGradient,ctx.createLinearGradient,,,Others,Create a linear gradient for drawing in HTML5 canvas.
2391,ctx,,arcTo,ctx.arcTo,,,1,Draws an arc between two tangents in a path.
2392,date,,clone,date.clone,,,Others,Unknown
2393,response.data,,toString,response.data.toString,,,29,Converts data to a string representation.
2394,queryString,,substr,queryString.substr,,,Others,Extracts a portion of a string.
2395,url.pathname,,match,url.pathname.match,,,38,String matching function in JavaScript.
2396,stream,,read,stream.read,,,11,Read data from a stream.
2397,stream,,available,stream.available,,,11,Returns the number of bytes that can be read.
2398,stream,,readByte,stream.readByte,,,11,Reads a single byte of data from a stream.
2399,path,,pop,path.pop,,,Others,Remove and return the last element from an array.
2400,perf_hooks.performance,,now,perf_hooks.performance.now,,,4,High-resolution time measurement for performance in JavaScript.
2401,document.head,,insertBefore,document.head.insertBefore,,,25,Inserts a node before a specified child node.
2402,document.head,,getElementsByTagName,document.head.getElementsByTagName,,,Others,Returns a collection of elements with a specific tag name.
2403,context,,getRemainingTimeInMillis,context.getRemainingTimeInMillis,,,4,Returns the remaining time in milliseconds for the function execution.
2404,assert,,web3SomeEvents,assert.web3SomeEvents,,,Others,Unknown
2405,Response,,redirect,Response.redirect,,,23,Redirecting to a new URL.
2406,process,,cpuUsage,process.cpuUsage,,,4,Get CPU usage information.
2407,event.passThroughOnException,,bind,event.passThroughOnException.bind,,,40,Binds event.passThroughOnException method to a context.
2408,event.waitUntil,,bind,event.waitUntil.bind,,,40,Binds a function to a particular context.
2409,cluster,,charCodeAt,cluster.charCodeAt,,,34,Returns the Unicode value of a character.
2410,request,,resourceType,request.resourceType,,,Others,Unknown
2411,request,,continue,request.continue,,,Others,Skip current iteration and continue to the next iteration in loop
2412,process.stdout,,clearLine,process.stdout.clearLine,,,Others,Clears the current line in the standard output.
2413,process.stdout,,cursorTo,process.stdout.cursorTo,,,Others,Moves cursor to a specified position.
2414,Buffer,,Buffer,Buffer.Buffer,,,Others,Unknown
2415,Promise,,toAsync,Promise.toAsync,,,37,Converts a synchronous function to an asynchronous function.
2416,Promise,,getTrackedPromise,Promise.getTrackedPromise,,,Others,Unknown
2417,Promise,,asyncMap,Promise.asyncMap,,,35,Executes asynchronous functions in parallel and returns results.
2418,process,,binding,process.binding,,,Others,Accesses C++ bindings in Node.js.
2419,context,,abort,context.abort,,,Others,Unknown
2420,context,,continue_to_handler,context.continue_to_handler,,,Others,Unknown
2421,context,,add_fileinfo,context.add_fileinfo,,,Others,Unknown
2422,mock,,test,mock.test,,,Others,Unknown
2423,handler.url,,test,handler.url.test,,,Others,Unknown
2424,handler.type,,toLowerCase,handler.type.toLowerCase,,,30,Converts a string to lowercase.
2425,handler.url,,indexOf,handler.url.indexOf,,,Others,Returns the index of a specified value within a string.
2426,handler.url,,replace,handler.url.replace,,,40,String replacement within a JavaScript function.
2427,it,,match,it.match,,,Others,String pattern matching function.
2428,it,,at,it.at,,,Others,Get element at specific index in an array or string.
2429,worker,,on,worker.on,,,23,Event listener registration method.
2430,JSON,,decycled,JSON.decycled,,,Others,Unknown
2431,path,,trim,path.trim,,,Others,Removes white space from the beginning and end of a string.
2432,cluster,,on,cluster.on,,,Others,Event listener registration.
2433,worker.process,,pid,worker.process.pid,,,4,Process ID of the worker.
2434,session,,on,session.on,,,23,Event listener registration.
2435,session,,setEncoding,session.setEncoding,,,34,Set the encoding for the session.
2436,stream.Duplex,,call,stream.Duplex.call,,,Others,Unknown
2437,socket,,unshift,socket.unshift,,,Others,Add elements to the beginning of an array.
2438,context,,done,context.done,,,Others,Marks the completion of a function or operation.
2439,events,,push,events.push,,,Others,Add element to the end of an array.
2440,document.body,,prepend,document.body.prepend,,,Others,Insert content at the beginning of the parent element.
2441,event.touches,,item,event.touches.item,,,Others,Returns the touch point at a specific index.
2442,events,,onClick,events.onClick,,,Others,Unknown
2443,map,,addSource,map.addSource,,,28,Creates a new data source for a map.
2444,map,,addLayer,map.addLayer,,,Others,Add a layer to a map.
2445,console.warn,,bind,console.warn.bind,,,40,Binds a function to a specific context.
2446,ctx,,bezierCurveTo,ctx.bezierCurveTo,,,35,Draws a Bezier curve.
2447,ctx,,clip,ctx.clip,,,Others,Clipping the drawing area.
2448,ctx,,embedImage,ctx.embedImage,,,Others,Unknown
2449,ctx,,fillOpacity,ctx.fillOpacity,,,29,Sets the opacity for fill color.
2450,response,,split,response.split,,,Others,Splits a string into an array of substrings.
2451,ctx,,formField,ctx.formField,,,Others,Unknown
2452,ctx,,image,ctx.image,,,38,Draws an image on a canvas.
2453,ctx,,scale,ctx.scale,,,Others,Transforms the current transformation matrix by scaling factors.
2454,events,,emit,events.emit,,,Others,Unknown
2455,ctx,,initForm,ctx.initForm,,,Others,Unknown
2456,process,,uptime,process.uptime,,,4,Returns the uptime of the process.
2457,ctx.transform,,apply,ctx.transform.apply,,,39,Transforms the context using the specified transformation.
2458,ctx,,skew,ctx.skew,,,39,Transforms the shape of an element in a 2D plane.
2459,ctx,,rect,ctx.rect,,,17,Draws a rectangle on a canvas.
2460,events,,removeAllListeners,events.removeAllListeners,,,Others,Removes all listeners from an event in JavaScript.
2461,ctx,,strokeColor,ctx.strokeColor,,,Others,Sets the color for stroking operations in a canvas.
2462,ctx,,lineWidth,ctx.lineWidth,,,Others,Set the width of lines drawn on the canvas.
2463,ctx,,dash,ctx.dash,,,Others,Unknown
2464,ctx,,undash,ctx.undash,,,Others,Unknown
2465,ctx.model,,extend,ctx.model.extend,,,40,Extends the properties and methods of a JavaScript object.
2466,context.resourcePath,,match,context.resourcePath.match,,,Others,Regular expression matching function.
2467,process,,emitWarning,process.emitWarning,,,38,Emit a warning message.
2468,run.positions,,map,run.positions.map,,,40,Transforms each element in an array.
2469,String.fromCodePoint,,apply,String.fromCodePoint.apply,,,40,Method to apply a function with a given context.
2470,run.glyphs,,concat,run.glyphs.concat,,,Others,Concatenates two or more arrays.
2471,run.positions,,concat,run.positions.concat,,,Others,Concatenates two or more arrays.
2472,buffer,,copy,buffer.copy,,,13,Copy data from one buffer to another buffer.
2473,regexp,,constructor,regexp.constructor,,,40,Returns a reference to the Object constructor function.
2474,array,,constructor,array.constructor,,,40,Returns the constructor function that creates an array.
2475,error.issues,,map,error.issues.map,,,Others,Transforms each element in an array.
2476,arrayBuffer,,constructor,arrayBuffer.constructor,,,28,Returns function that created the array buffer.
2477,error.issues,,flatMap,error.issues.flatMap,,,15,Transform and flatten array elements into a new array.
2478,Function.toString,,call,Function.toString.call,,,33,Call a function with a given `this` value.
2479,URL.hash,,split,URL.hash.split,,,Others,Splits a string into an array of substrings.
2480,TextEncoder.readable,,pipeTo,TextEncoder.readable.pipeTo,,,Others,Unknown
2481,TextEncoder.writable,,getWriter,TextEncoder.writable.getWriter,,,17,Returns a writable stream writer.
2482,script,,find,script.find,,,Others,Searches for an element in an array and returns it.
2483,events,,destroy,events.destroy,,,Others,Unknown
2484,events,,write,events.write,,,Others,Unknown
2485,module,,import,module.import,,,Others,Dynamic module import in JavaScript.
2486,ctx.request,,is,ctx.request.is,,,Others,Content type validation based on provided type parameter.
2487,date,,year,date.year,,,Others,Get the current year.
2488,date,,second,date.second,,,Others,Return the second component of a date object.
2489,ctx,,set,ctx.set,,,Others,Set value to a property in a JavaScript object.
2490,date,,month,date.month,,,20,Get the current month.
2491,date,,add,date.add,,,Others,Date addition function.
2492,date,,millisecond,date.millisecond,,,Others,Returns the milliseconds of a date.
2493,date,,locale,date.locale,,,Others,Unknown
2494,start,,getTime,start.getTime,,,5,"Returns the number of milliseconds since January 1, 1970."
2495,ctx,,w,ctx.w,,,Others,Unknown
2496,ctx,,deindent,ctx.deindent,,,33,Deindents a multi-line string of text.
2497,ctx,,indent,ctx.indent,,,Others,Unknown
2498,date,,endOf,date.endOf,,,Others,Returns the end of a specific time frame.
2499,ctx,,write,ctx.write,,,13,Writes data to a stream or buffer.
2500,ctx,,error,ctx.error,,,Others,Throw an error message.
2501,url.searchParams,,set,url.searchParams.set,,,Others,Manipulates a value in a URL search query parameters.
2502,verify,,isFunction,verify.isFunction,,,Others,Check if a variable is a function.
2503,verify,,isObject,verify.isObject,,,Others,Check if the input is an object.
2504,intl,,formatMessage,intl.formatMessage,,,40,Internationalization message formatting function.
2505,array,,pick,array.pick,,,Others,Return a random element from an array.
2506,document.head,,querySelectorAll,document.head.querySelectorAll,,,Others,Selects all elements that match a specified CSS selector.
2507,context,,putImageData,context.putImageData,,,Others,Draws image data onto a canvas.
2508,context,,traverES,context.traverES,,,Others,Unknown
2509,context.log,,i,context.log.i,,,Others,Prints informational message to the console.
2510,context.log,,e,context.log.e,,,Others,Unknown
2511,context,,traverRef,context.traverRef,,,Others,Unknown
2512,number,,map,number.map,,,40,Transforms elements of an array without mutating the original array.
2513,context,,traverJSON,context.traverJSON,,,Others,Traverse JSON data structure recursively.
2514,buf,,push,buf.push,,,10,Add an element to the end of an array.
2515,dns.promises,,resolveMx,dns.promises.resolveMx,,,21,Resolve MX records for a domain.
2516,fs.promises,,rm,fs.promises.rm,,,8,Delete a file or directory.
2517,ctx.service,,get,ctx.service.get,,,23,Retrieve data from a service.
2518,fs.promises,,lstat,fs.promises.lstat,,,Others,File system method to get file status.
2519,ctx,,upload,ctx.upload,,,39,File upload functionality.
2520,request,,get,request.get,,,20,Make a GET request to a server.
2521,process.stdout,,getWindowSize,process.stdout.getWindowSize,,,Others,Get size of the window.
2522,document,,adoptNode,document.adoptNode,,,Others,Unknown
2523,Event,,isPrototypeOf,Event.isPrototypeOf,,,Others,Check if object is prototype of another object.
2524,context,,requireCordovaModule,context.requireCordovaModule,,,Others,Unknown
2525,handler,,call,handler.call,,,Others,Unknown
2526,handler,,handleEvent,handler.handleEvent,,,Others,Unknown
2527,TLSSocket._sockets,,delete,TLSSocket._sockets.delete,,,8,Remove an item from a collection.
2528,TLSSocket._sockets,,add,TLSSocket._sockets.add,,,Others,Unknown
2529,Date,,string,Date.string,,,29,Converts Date object to a string.
2530,ctx,,run,ctx.run,,,Others,Unknown
2531,inspector,,columnInfo,inspector.columnInfo,,,Others,Return column information for a specified data table.
2532,map,,each,map.each,,,Others,Iterates over elements in an array or object.
2533,intl,,formatDate,intl.formatDate,,,Others,Date formatting function in JavaScript.
2534,intl,,formatNumber,intl.formatNumber,,,33,Number formatting based on international locales.
2535,Buffer,,writeUInt32LE,Buffer.writeUInt32LE,,,33,Writes an unsigned 32-bit integer in little-endian format.
2536,response,,slice,response.slice,,,Others,Extracts a section of an array.
2537,message,,replace,message.replace,,,Others,String replacement method.
2538,response,,setEncoding,response.setEncoding,,,31,Converts buffer data to string with specified encoding.
2539,buffer,,writeUInt32BE,buffer.writeUInt32BE,,,Others,Writes an unsigned 32-bit integer in big-endian format.
2540,readline,,Interface,readline.Interface,,,Others,Unknown
2541,request.length,,map,request.length.map,,,40,Transforms each element of an array using a callback function
2542,Map.languages,,set,Map.languages.set,,,28,Set values in a Map object.
2543,Map.languages,,has,Map.languages.has,,,Others,Check if a key exists in the Map.
2544,message,,copy,message.copy,,,Others,Unknown
2545,event,,forEach,event.forEach,,,10,Iterates over elements in an array.
2546,handler,,init,handler.init,,,Others,Unknown
2547,process,,umask,process.umask,,,Others,Unknown
2548,event.target,,closest,event.target.closest,,,Others,Find the closest ancestor element that matches a specified selector.
2549,Array,,apply,Array.apply,,,33,Call function with given context and arguments.
2550,math,,connect,math.connect,,,Others,Unknown
2551,context.services,,get,context.services.get,,,Others,Retrieve data or value from a service.
2552,event.data,,split,event.data.split,,,Others,Splits a string into an array of substrings.
2553,message,,match,message.match,,,Others,Pattern matching for strings.
2554,object.toString,,toString,object.toString.toString,,,29,Returns a string representation of the object.
2555,String.prototype,,indexOf,String.prototype.indexOf,,,Others,Searches for a specific substring within a string.
2556,message,,substr,message.substr,,,Others,Extracts part of a string.
2557,message,,validateLength,message.validateLength,,,38,Validate input length.
2558,document,,attachEvent,document.attachEvent,,,Others,Unknown
2559,event.tags,,forEach,event.tags.forEach,,,Others,Iterates over array elements in JavaScript.
2560,ctx,,arc,ctx.arc,,,Others,Draws an arc.
2561,object,,removeEventListener,object.removeEventListener,,,Others,Removes an event listener from an object.
2562,response.answers,,forEach,response.answers.forEach,,,Others,Iterates over elements in an array.
2563,response.additionals,,forEach,response.additionals.forEach,,,10,Iterates over each element in an array.
2564,object,,addEventListener,object.addEventListener,,,23,Attaches an event handler to the specified element.
2565,vm.$store,,commit,vm.$store.commit,,,Others,Unknown
2566,Error,,apply,Error.apply,,,Others,Call a function with a given `this` value.
2567,response,,buffer,response.buffer,,,33,Buffer data in response object for manipulation or storage.
2568,path,,skip,path.skip,,,Others,Skip elements in an array or iterator.
2569,path,,findParent,path.findParent,,,28,Find and return the parent element in the DOM tree.
2570,path,,toString,path.toString,,,34,Converts an object to a string representation.
2571,path,,remove,path.remove,,,Others,Unknown
2572,path,,isImportDeclaration,path.isImportDeclaration,,,Others,Check if a given path is an import declaration.
2573,Promise,,includes,Promise.includes,,,Others,Check if an array includes a certain element.
2574,context,,pages,context.pages,,,Others,Unknown
2575,ctx,,reply,ctx.reply,,,37,Send a reply message in JavaScript.
2576,ctx,,editMessageText,ctx.editMessageText,,,Others,Edit the text of a message.
2577,ctx,,answerCbQuery,ctx.answerCbQuery,,,35,Send response to a callback query.
2578,util,,getConnection,util.getConnection,,,35,Database connection function.
2579,ctx.path,,slice,ctx.path.slice,,,Others,Returns a portion of an array without modifying the original.
2580,Reflect,,getOwnMetadata,Reflect.getOwnMetadata,,,Others,Retrieve metadata for a key on an object.
2581,message,,join,message.join,,,Others,Concatenates all elements of an array into a string.
2582,process,,once,process.once,,,35,Run a function only once.
2583,ctx,,loadScriptTag,ctx.loadScriptTag,,,35,Load external script tag dynamically in JavaScript.
2584,request,,replace,request.replace,,,Others,String replacement operation.
2585,document.head,,append,document.head.append,,,25,Adds content to the end of the specified element.
2586,map,,getView,map.getView,,,Others,Returns the current view of the map.
2587,map,,setMaxBounds,map.setMaxBounds,,,Others,Restrict map movement within specified bounds.
2588,http,,Agent,http.Agent,,,22,Manages connections for HTTP client requests.
2589,event,,hasOwnProperty,event.hasOwnProperty,,,Others,Check if object has a specific property.
2590,context.options,,at,context.options.at,,,Others,Return the value at a specified index position.
2591,context,,getCwd,context.getCwd,,,Others,Get current working directory.
2592,vm,,createScript,vm.createScript,,,Others,Unknown
2593,Set,,filter,Set.filter,,,Others,Returns a new array with elements that pass a test.
2594,module.require,,bind,module.require.bind,,,Others,Binds a function to a specified context.
2595,hash,,slice,hash.slice,,,Others,Extracts a section of an array and returns a new array
2596,Error.stack,,shift,Error.stack.shift,,,10,Remove and return the first element of an array.
2597,set,,remove,set.remove,,,8,Delete an element from a set.
2598,document.head,,prepend,document.head.prepend,,,Others,Inserts content at the beginning of the specified element.
2599,message,,getIsbn,message.getIsbn,,,Others,Unknown
2600,message,,getTitle,message.getTitle,,,38,Get the title of a message.
2601,message,,getAuthor,message.getAuthor,,,23,Returns the author of a message.
2602,message,,getName,message.getName,,,Others,Returns the name of a message.
2603,message,,getBooksMap,message.getBooksMap,,,Others,Unknown
2604,symbol,,charCodeAt,symbol.charCodeAt,,,33,Returns Unicode value of character at specified index.
2605,script.parentNode,,replaceChild,script.parentNode.replaceChild,,,33,Replaces a child node with a new node.
2606,path.scope,,getBinding,path.scope.getBinding,,,40,Returns the binding object for a variable in the scope.
2607,path.scope,,rename,path.scope.rename,,,Others,Unknown
2608,context,,header,context.header,,,Others,Unknown
2609,path,,insertAfter,path.insertAfter,,,Others,Inserts element after specified element in DOM.
2610,Event,,bookTicket,Event.bookTicket,,,Others,Unknown
2611,Event,,viewBookings,Event.viewBookings,,,Others,Unknown
2612,ctx.database,,get,ctx.database.get,,,33,Retrieve data from the database.
2613,ctx.database,,set,ctx.database.set,,,Others,Unknown
2614,ctx.database,,remove,ctx.database.remove,,,Others,Delete data from the database.
2615,ctx.database,,create,ctx.database.create,,,35,Creates a new entry or object in the database.
2616,document,,elementsFromPoint,document.elementsFromPoint,,,Others,Return elements at a specific point on the document page.
2617,path.scope,,generateUidIdentifier,path.scope.generateUidIdentifier,,,39,Generate unique identifier in JavaScript.
2618,path,,isBlockStatement,path.isBlockStatement,,,Others,Checks if a node is a block statement.
2619,server,,once,server.once,,,33,Registers a one-time event listener.
2620,path,,isStatement,path.isStatement,,,Others,Unknown
2621,path,,isExpression,path.isExpression,,,Others,Check if path represents an expression.
2622,path,,insertBefore,path.insertBefore,,,Others,Inserts a new node before a specified node.
2623,context,,importModule,context.importModule,,,Others,Dynamic module import in JavaScript.
2624,buffer.Buffer,,from,buffer.Buffer.from,,,28,Converts data into a Buffer.
2625,path,,isFunctionExpression,path.isFunctionExpression,,,Others,Check if a path represents a function expression.
2626,path,,isArrowFunctionExpression,path.isArrowFunctionExpression,,,Others,Check if a function is an arrow function.
2627,path,,isClassExpression,path.isClassExpression,,,Others,Check if a given path represents a class expression.
2628,context,,emitError,context.emitError,,,Others,Unknown
2629,context.logger,,debug,context.logger.debug,,,39,Logging debug information to the console.
2630,context.logger,,info,context.logger.info,,,39,Logging information messages in the console.
2631,path.scope,,getProgramParent,path.scope.getProgramParent,,,40,Returns the program parent scope.
2632,path,,stop,path.stop,,,Others,Unknown
2633,path.scope,,getFunctionParent,path.scope.getFunctionParent,,,Others,Returns the parent function of the current function.
2634,path,,isClassMethod,path.isClassMethod,,,Others,Check if a method belongs to a class.
2635,message,,charCodeAt,message.charCodeAt,,,29,Returns Unicode value of character at specified index.
2636,error.message,,match,error.message.match,,,Others,String matching operation.
2637,error.message,,indexOf,error.message.indexOf,,,10,Search for a specified value within a string.
2638,url.pass,,startsWith,url.pass.startsWith,,,Others,Check if a string starts with a specified value.
2639,url.pass,,replace,url.pass.replace,,,Others,String replacement method.
2640,URL.protocol,,replace,URL.protocol.replace,,,Others,String replacement method.
2641,session.participants,,join,session.participants.join,,,Others,Concatenates array elements into a string.
2642,socket,,onTransaction,socket.onTransaction,,,Others,Listen for transaction event and execute function.
2643,socket,,onBlock,socket.onBlock,,,Others,Unknown
2644,async_hooks,,AsyncLocalStorage,async_hooks.AsyncLocalStorage,,,37,Manage asynchronous context in JavaScript applications.
2645,response,,throw,response.throw,,,35,Throw an error or exception.
2646,fs.promises,,unlink,fs.promises.unlink,,,8,Delete a file from the filesystem.
2647,string,,S,string.S,,,29,Converts a value to a string.
2648,readable,,destroy,readable.destroy,,,Others,Unknown
2649,readable,,once,readable.once,,,38,Call function only once.
2650,readable,,removeListener,readable.removeListener,,,Others,Remove listener for a specific event.
2651,ctx.canvas,,loadImage,ctx.canvas.loadImage,,,18,Load an image for use on a canvas.
2652,worker,,toString,worker.toString,,,29,Converts an object to a string.
2653,event.formData,,append,event.formData.append,,,23,Adding data to a form object.
2654,process.stdin,,pipe,process.stdin.pipe,,,Others,Unknown
2655,hmac,,hmac,hmac.hmac,,,Others,Unknown
2656,events,,some,events.some,,,Others,Check if at least one element meets the condition.
2657,buffer.buffer,,slice,buffer.buffer.slice,,,Others,Extracts a portion of an array into a new array.
2658,request,,addEventListener,request.addEventListener,,,Others,Attaches an event handler to the specified element.
2659,readStream,,destroy,readStream.destroy,,,26,"get the client's IP address"
2660,readStream,,resume,readStream.resume,,,17,Resumes a paused stream.
2661,readStream,,pause,readStream.pause,,,Others,Pauses the stream.
2662,document.implementation,,createDocument,document.implementation.createDocument,,,40,Create a new XML document.
2663,document.documentElement,,doScroll,document.documentElement.doScroll,,,6,Scroll the document to a specific position.
2664,document.implementation,,hasFeature,document.implementation.hasFeature,,,34,Feature detection method in JavaScript.
2665,document,,detachEvent,document.detachEvent,,,40,Remove an event handler attached with `attachEvent` method.
2666,document._qc_cross_request_flash_proxy,,initConn,document._qc_cross_request_flash_proxy.initConn,,,Others,Unknown
2667,object,,extend,object.extend,,,Others,Unknown
2668,process.execArgv,,indexOf,process.execArgv.indexOf,,,Others,Returns the index of the first occurrence of a value.
2669,url,,URL,url.URL,,,Others,Unknown
2670,Date,,findIndex,Date.findIndex,,,38,Return the index of the first element that meets criteria.
2671,Date,,sort,Date.sort,,,Others,Sorts elements of an array.
2672,Date,,splice,Date.splice,,,Others,Remove or replace elements in an array.
2673,Date,,push,Date.push,,,Others,Adds elements to the end of an array.
2674,context,,addTask,context.addTask,,,Others,Unknown
2675,event.url,,indexOf,event.url.indexOf,,,Others,Returns the index of the first occurrence of a substring.
2676,event.url,,slice,event.url.slice,,,Others,Extracts a section of a string.
2677,event,,affectsConfiguration,event.affectsConfiguration,,,Others,Unknown
2678,generator,,GenerateFile,generator.GenerateFile,,,Others,Unknown
2679,context,,addInitializer,context.addInitializer,,,Others,Unknown
2680,Context,,_makeMapping,Context._makeMapping,,,Others,Unknown
2681,context,,getMetadata,context.getMetadata,,,4,Get metadata information.
2682,context,,closeStep,context.closeStep,,,Others,Unknown
2683,context,,openStep,context.openStep,,,Others,Open a step in the context.
2684,context,,with,context.with,,,Others,Unknown
2685,context,,addModule,context.addModule,,,Others,Unknown
2686,context,,addUsingFunctionStack,context.addUsingFunctionStack,,,Others,Unknown
2687,context,,addUsingFunction,context.addUsingFunction,,,Others,Unknown
2688,context,,addUsingClass,context.addUsingClass,,,Others,Unknown
2689,context,,addFunction,context.addFunction,,,Others,Unknown
2690,request,,auth,request.auth,,,Others,Authentication function.
2691,context,,addInstance,context.addInstance,,,Others,Unknown
2692,context,,addRawValue,context.addRawValue,,,Others,Unknown
2693,request,,set,request.set,,,Others,Set a property on an object.
2694,request,,query,request.query,,,Others,Extracts the query parameters from the request URL.
2695,context,,addNumber,context.addNumber,,,40,Adds a number to the context.
2696,Array.prototype,,concat,Array.prototype.concat,,,Others,Combines multiple arrays into a new array.
2697,context,,addValue,context.addValue,,,39,Adds a value to the context.
2698,context,,addReplacement,context.addReplacement,,,Others,Replace a value in the context.
2699,ctx,,dispatch,ctx.dispatch,,,Others,Unknown
2700,stream,,respond,stream.respond,,,Others,Unknown
2701,stream,,end,stream.end,,,Others,Ends a stream of data.
2702,error.inner,,reduce,error.inner.reduce,,,Others,Aggregate values array into a single value.
2703,buffer,,readUInt16LE,buffer.readUInt16LE,,,11,Reads an unsigned 16-bit integer in little-endian format.
2704,message.from,,endsWith,message.from.endsWith,,,Others,Checks if a string ends with a specified character(s).
2705,message.body,,startsWith,message.body.startsWith,,,Others,Check if a string starts with specified characters.
2706,message,,getQuotedMessage,message.getQuotedMessage,,,33,Function that retrieves quoted message within a message.
2707,crypto.subtle,,verify,crypto.subtle.verify,,,Others,Verify a signature.
2708,document,,body,document.body,,,26,Accesses the body element of a HTML document.
2709,document,,parentNode,document.parentNode,,,6,Traverse to the parent node of a DOM element.
2710,document,,dispatchEvent,document.dispatchEvent,,,Others,Triggers events on the document.
2711,Date,,set,Date.set,,,40,Set a specific value in a JavaScript Date object.
2712,iterator,,call,iterator.call,,,Others,Function invocation with specified `this` context and arguments.
2713,context,,toString,context.toString,,,30,Converts an object to a string representation.
2714,net,,toUpperCase,net.toUpperCase,,,Others,Converts a string to uppercase.
2715,Worker,,addEventListener,Worker.addEventListener,,,Others,Unknown
2716,iterator,,next,iterator.next,,,Others,Iterator method to retrieve next value in sequence.
2717,process.hrtime,,bigint,process.hrtime.bigint,,,28,Returns a high-resolution time in nanoseconds as a bigint.
2718,url,,substr,url.substr,,,Others,Extracts part of a string.
2719,end,,call,end.call,,,Others,Unknown
2720,ctx.logger,,debug,ctx.logger.debug,,,Others,Unknown
2721,stream,,getBits,stream.getBits,,,11,Reads bits from a stream.
2722,readable,,on,readable.on,,,23,Event listener registration method.
2723,buffer,,join,buffer.join,,,Others,Joining array elements into a string with a specified separator.
2724,buffer,,shift,buffer.shift,,,10,Remove the first element from an array.
2725,message.classList,,add,message.classList.add,,,Others,Add a class to an element.
2726,message.classList,,remove,message.classList.remove,,,36,Remove a class from an element.
2727,readableStream,,pipe,readableStream.pipe,,,Others,Unknown
2728,response,,request,response.request,,,Others,Unknown
2729,domain,,slice,domain.slice,,,Others,Extracts a section of an array.
2730,event,,unbindTree,event.unbindTree,,,34,Remove event listeners from all elements in a tree structure.
2731,event,,bindTree,event.bindTree,,,Others,Unknown
2732,event,,unbindEvent,event.unbindEvent,,,33,Remove event listener.
2733,event,,bindEvent,event.bindEvent,,,40,Attach an event handler to an element.
2734,stream,,readBytes,stream.readBytes,,,11,Reads a certain number of bytes from a stream.
2735,stream,,peekBytes,stream.peekBytes,,,11,Reads bytes from a stream without advancing the position.
2736,stream,,peekByte,stream.peekByte,,,11,Returns the next byte without consuming it.
2737,Intl,,PluralRules,Intl.PluralRules,,,Others,Unknown
2738,document,,createEventObject,document.createEventObject,,,Others,create an event object for custom events
2739,context,,exit,context.exit,,,35,Terminate the current process or function.
2740,socket,,timeout,socket.timeout,,,Others,Unknown
2741,event,,doProxy,event.doProxy,,,Others,Unknown
2742,date,,indexOf,date.indexOf,,,Others,Returns the index of the first occurrence of a substring.
2743,map,,getTilt,map.getTilt,,,Others,Unknown
2744,map,,getHeading,map.getHeading,,,10,Return the heading value from a map object.
2745,script,,addEventListener,script.addEventListener,,,40,Attaches an event handler to the specified element.
2746,handler,,_handler,handler._handler,,,Others,Unknown
2747,URL.search,,slice,URL.search.slice,,,Others,Extracts a section of a string.
2748,path,,filter,path.filter,,,Others,Array method to filter elements based on a condition.
2749,set,,reduce,set.reduce,,,29,Combine array elements into a single value.
2750,URL.pathname,,substring,URL.pathname.substring,,,Others,Returns a portion of a string.
2751,test.title,,match,test.title.match,,,Others,String matching function.
2752,Util,,isAndroid,Util.isAndroid,,,4,Check if the device is running on Android operating system.
2753,Util,,isIOS,Util.isIOS,,,4,Check if device is running on iOS.
2754,Util,,retExec,Util.retExec,,,Others,Unknown
2755,Util,,ifExec,Util.ifExec,,,Others,Unknown
2756,Util,,tryCatch,Util.tryCatch,,,39,Exception handling in JavaScript.
2757,Util,,exec,Util.exec,,,37,Execute a command or function.
2758,Util,,checkObjTrue,Util.checkObjTrue,,,Others,Unknown
2759,Util,,getExtension,Util.getExtension,,,3,Get file extension from a given file path.
2760,error,,includes,error.includes,,,Others,Check if an element is included in an array.
2761,server.watcher,,add,server.watcher.add,,,Others,Unknown
2762,Promise,,error,Promise.error,,,35,Rejects a promise with a reason (error).
2763,array,,validate,array.validate,,,37,Data validation function.
2764,event.target,,matches,event.target.matches,,,33,Element selector method for event target in JavaScript.
2765,module,,exports,module.exports,,,Others,Unknown
2766,Map.overlay,,set,Map.overlay.set,,,Others,Unknown
2767,Map.stack,,set,Map.stack.set,,,28,Set key-value pair in Map data structure.
2768,String.fromCharCode,,bind,String.fromCharCode.bind,,,40,Binds the context of a function.
2769,process.stdin,,setRawMode,process.stdin.setRawMode,,,Others,Enables raw mode input in Node.js terminal.
2770,module.context,,match,module.context.match,,,Others,Pattern matching and extraction in JavaScript.
2771,buffer,,indexOf,buffer.indexOf,,,38,Searches for a specified value in an array buffer.
2772,buffer,,readInt32BE,buffer.readInt32BE,,,34,Reads 32-bit integer from buffer in big-endian format.
2773,module,,size,module.size,,,Others,Return the size of the module.
2774,module,,nameForCondition,module.nameForCondition,,,Others,Unknown
2775,response,,map,response.map,,,40,Transforms each element in an array with a callback function
2776,socket,,removeAllListeners,socket.removeAllListeners,,,Others,Removes all event listeners.
2777,error,,startsWith,error.startsWith,,,Others,Check if a string starts with a specified value.
2778,readline,,close,readline.close,,,35,Closes the readline interface.
2779,readline,,question,readline.question,,,2,Reads input from the user in the terminal.
2780,path,,r,path.r,,,Others,Unknown
2781,fs,,has,fs.has,,,Others,Check if object has a specified property.
2782,promise,,promise,promise.promise,,,Others,Unknown
2783,response,,once,response.once,,,28,Event listener that triggers only once.
2784,request,,removeAllListeners,request.removeAllListeners,,,Others,Detaches all registered event listeners from the specified event.
2785,request,,once,request.once,,,Others,Execute a function only once.
2786,event,,match,event.match,,,6,Search for a specified value within a string.
2787,URL.search,,substring,URL.search.substring,,,Others,Extracts part of a string.
2788,domain,,toLowerCase,domain.toLowerCase,,,30,Converts a string to lowercase.
2789,Promise,,create,Promise.create,,,Others,Unknown
2790,error.stack,,includes,error.stack.includes,,,10,Searches for a specified value within an array.
2791,URL.searchParams,,forEach,URL.searchParams.forEach,,,Others,Iterates over search parameters.
2792,ctx,,getHandler,ctx.getHandler,,,Others,Unknown
2793,ctx,,getClass,ctx.getClass,,,40,Return the class of an object.
2794,request.url,,split,request.url.split,,,Others,Splits a string into an array of substrings.
2795,error,,errorMessage,error.errorMessage,,,Others,Unknown
2796,cipher,,on,cipher.on,,,Others,Unknown
2797,response,,toString,response.toString,,,34,Converts an object to a string representation.
2798,ctx.markdownToImage,,convertToImage,ctx.markdownToImage.convertToImage,,,Others,Converts markdown text to an image.
2799,mime,,getExtension,mime.getExtension,,,3,Get file extension from a filename.
2800,ctx.database,,extend,ctx.database.extend,,,40,Merge properties of objects.
2801,session.content,,match,session.content.match,,,Others,Returns an array of all matches in a string.
2802,map,,getPanes,map.getPanes,,,Others,Returns the panes of a map.
2803,session.content,,replace,session.content.replace,,,Others,String replacement method.
2804,session,,execute,session.execute,,,Others,Unknown
2805,event,,setState,event.setState,,,33,"Updates the component's state."
2806,event,,on,event.on,,,Others,Attach event handler.
2807,event,,once,event.once,,,33,Runs a callback function only once.
2808,event,,emit,event.emit,,,Others,Triggering an event.
2809,event,,getState,event.getState,,,38,Get the state of an event.
2810,module.resource,,includes,module.resource.includes,,,Others,Check if an array includes a certain element.
2811,module.resource,,match,module.resource.match,,,Others,String matching function.
2812,module,,identifier,module.identifier,,,Others,Unknown
2813,module.type,,startsWith,module.type.startsWith,,,Others,Check if a string starts with a specified value.
2814,error.message,,search,error.message.search,,,Others,String search within error message.
2815,module.dependencies,,forEach,module.dependencies.forEach,,,Others,Iterates over each element in an array.
2816,request.challenge,,replace,request.challenge.replace,,,6,String replacement method in JavaScript.
2817,module.exports,,readFilePromise,module.exports.readFilePromise,,,39,Reads file asynchronously and returns a promise.
2818,dir,,includes,dir.includes,,,Others,Check if an array includes a certain element.
2819,dir,,lastIndexOf,dir.lastIndexOf,,,Others,Searches for the last occurrence of a specified value.
2820,dir,,substring,dir.substring,,,Others,Extracts a portion of a string.
2821,socket,,addEventListener,socket.addEventListener,,,Others,Unknown
2822,it,,has,it.has,,,Others,Check if an object has a specific property.
2823,it,,get,it.get,,,Others,Return value from object based on specified key.
2824,it,,set,it.set,,,28,Modify existing element in a set.
2825,context,,reportError,context.reportError,,,Others,Unknown
2826,util,,TextDecoder,util.TextDecoder,,,33,Converts encoded data to text.
2827,ctx.response,,sendMetadata,ctx.response.sendMetadata,,,Others,Unknown
2828,ctx.res,,pipe,ctx.res.pipe,,,Others,Unknown
2829,ctx.res,,on,ctx.res.on,,,Others,Event listener registration and handling.
2830,ctx.call,,emit,ctx.call.emit,,,23,Event emission or broadcasting.
2831,ctx.app,,emit,ctx.app.emit,,,38,Event emitter method to trigger events.
2832,ctx.call,,on,ctx.call.on,,,22,Event listener attachment method.
2833,ctx.response,,getStatusMetadata,ctx.response.getStatusMetadata,,,Others,Unknown
2834,server,,addService,server.addService,,,Others,Unknown
2835,server,,start,server.start,,,Others,Unknown
2836,readable,,pipe,readable.pipe,,,Others,Unknown
2837,Set,,join,Set.join,,,15,Join elements of a set into a string.
2838,request.url,,replace,request.url.replace,,,Others,String replacement method.
2839,fs,,remove,fs.remove,,,8,Delete a file or directory.
2840,response.url,,indexOf,response.url.indexOf,,,Others,Searches for a specified value within a string.
2841,it,,sample,it.sample,,,Others,Unknown
2842,it,,nth,it.nth,,,18,Return the nth element from a collection.
2843,map,,fileCoverageFor,map.fileCoverageFor,,,Others,Unknown
2844,map,,files,map.files,,,Others,Unknown
2845,Date,,padZero,Date.padZero,,,Others,Add leading zeros to a number.
2846,dir,,substr,dir.substr,,,Others,Extracts a portion of a string.
2847,json.subjects,,forEach,json.subjects.forEach,,,Others,Iterates over elements in an array.
2848,URL.searchParams,,keys,URL.searchParams.keys,,,Others,Returns an iterator of all keys in a URLSearchParams object.
2849,json.rows,,hasOwnProperty,json.rows.hasOwnProperty,,,Others,Check if an object has a specified property.
2850,URL.searchParams,,delete,URL.searchParams.delete,,,Others,Removes a parameter from the URL query string.
2851,json.subjects,,includes,json.subjects.includes,,,Others,Check if an array includes a certain value.
2852,Util,,checkArgs,Util.checkArgs,,,Others,Unknown
2853,Util,,getShortDate,Util.getShortDate,,,Others,Return Unknown
2854,Util.exec,,try,Util.exec.try,,,35,Execute code block and handle errors in JavaScript.
2855,test,,uglify,test.uglify,,,40,Minify code to reduce size and improve performance.
2856,socket,,ping,socket.ping,,,Others,Check connection status and response time between client and server.
2857,buffer,,writeUInt16BE,buffer.writeUInt16BE,,,28,Writes unsigned 16-bit integer in big-endian format.
2858,process.execArgv,,join,process.execArgv.join,,,29,Join array elements into a string.
2859,buffer,,writeDoubleBE,buffer.writeDoubleBE,,,33,Writes a double value to a buffer in big-endian order
2860,buffer,,writeInt8,buffer.writeInt8,,,13,Write 8-bit integer value to buffer.
2861,buffer,,writeInt16BE,buffer.writeInt16BE,,,34,Writes a 16-bit signed integer in big-endian format.
2862,buffer,,writeInt32BE,buffer.writeInt32BE,,,33,Writes a 32-bit signed integer to a buffer in big-endian format
2863,buffer,,writeInt64BE,buffer.writeInt64BE,,,33,Writes a 64-bit big-endian integer to a buffer.
2864,buffer,,writeUInt64BE,buffer.writeUInt64BE,,,34,Writes an unsigned 64-bit big-endian integer to a buffer
2865,set,,split,set.split,,,Others,Split a string into an array based on a separator.
2866,fs,,existSync,fs.existSync,,,Others,Check if a file or directory exists.
2867,module,,handle,module.handle,,,Others,Unknown
2868,util,,error,util.error,,,Others,Unknown
2869,channel,,take,channel.take,,,Others,Unknown
2870,port,,write,port.write,,,33,Write data to a port.
2871,document.body,,append,document.body.append,,,38,Add content to end of document body.
2872,path,,hasOwnProperty,path.hasOwnProperty,,,Others,Checks if an object has a specified property.
2873,session,,set,session.set,,,33,Set value in session storage.
2874,session,,unset,session.unset,,,Others,Unknown
2875,request,,defaults,request.defaults,,,25,Set default options for HTTP requests in JavaScript.
2876,ctx.walked,,has,ctx.walked.has,,,Others,Check if property exists in an object.
2877,ctx.walked,,add,ctx.walked.add,,,Others,Unknown
2878,ctx.notProdOnly,,add,ctx.notProdOnly.add,,,Others,Unknown
2879,ctx.notProdOnly,,has,ctx.notProdOnly.has,,,Others,Check if a property exists in an object.
2880,Set.walked,,has,Set.walked.has,,,Others,Check if the Set contains a specific value.
2881,Set.walked,,add,Set.walked.add,,,38,Add an item to a set.
2882,Set.notProdOnly,,add,Set.notProdOnly.add,,,Others,Unknown
2883,Set.notProdOnly,,has,Set.notProdOnly.has,,,Others,Check if an element exists in the Set object.
2884,session,,get,session.get,,,Others,Retrieve data from a server.
2885,response._chunks,,forEach,response._chunks.forEach,,,Others,Iterates over elements in an array.
2886,response._formData,,get,response._formData.get,,,26,Accessing data from a form.
2887,request.completedErrorChunks,,push,request.completedErrorChunks.push,,,Others,Add one or more elements to the end of an array.
2888,request.writtenObjects,,set,request.writtenObjects.set,,,13,Set value in an object.
2889,request.completedRegularChunks,,push,request.completedRegularChunks.push,,,10,Add element to end of array.
2890,request.abortableTasks,,delete,request.abortableTasks.delete,,,10,Removes a task from the list.
2891,message.content,,toString,message.content.toString,,,30,Converts an object to a string.
2892,message,,getContent,message.getContent,,,33,Return the content of a message.
2893,event.key,,toLowerCase,event.key.toLowerCase,,,29,Converts a string to lowercase.
2894,document,,hasFocus,document.hasFocus,,,23,Check if the document has focus.
2895,Error.value,,toLowerCase,Error.value.toLowerCase,,,30,Converts a string to lowercase.
2896,error,,replace,error.replace,,,Others,String manipulation method.
2897,module,,_resolveFilename,module._resolveFilename,,,Others,Resolve filename for a JavaScript module.
2898,readStream,,close,readStream.close,,,Others,Close the stream or resource.
2899,request,,head,request.head,,,20,Retrieve header information from a HTTP request.
2900,date,,replace,date.replace,,,Others,String replacement method.
2901,script,,init,script.init,,,Others,Initialization of the script or module.
2902,stream,,pipe,stream.pipe,,,Others,Unknown
2903,module.exports,,simplify,module.exports.simplify,,,Others,Simplify mathematical expressions.
2904,Date,,getMinuutes,Date.getMinuutes,,,Others,Unknown
2905,Object,,handleResponse,Object.handleResponse,,,Others,Unknown
2906,Object,,didReceiveError,Object.didReceiveError,,,Others,Unknown
2907,Object,,fetchRequests,Object.fetchRequests,,,Others,Unknown
2908,context,,emit,context.emit,,,Others,Unknown
2909,channel.members,,removeMember,channel.members.removeMember,,,35,Remove a member from a channel.
2910,context,,sendHeaders,context.sendHeaders,,,Others,Unknown
2911,channel,,emit,channel.emit,,,Others,Unknown
2912,context.res,,end,context.res.end,,,Others,Ends the response cycle in a server request.
2913,context,,destroyContext,context.destroyContext,,,Others,Unknown
2914,channel.members,,addMember,channel.members.addMember,,,6,Add a member to a channel.
2915,request,,respond,request.respond,,,Others,Unknown
2916,request,,url,request.url,,,Others,Unknown
2917,request,,isNavigationRequest,request.isNavigationRequest,,,Others,Check if the request is a navigation request.
2918,request,,headers,request.headers,,,24,Returns the headers of a request.
2919,request,,frame,request.frame,,,Others,Unknown
2920,response,,frame,response.frame,,,Others,Unknown
2921,response,,headers,response.headers,,,24,Retrieve or manipulate headers of a response object.
2922,response,,securityDetails,response.securityDetails,,,Others,Unknown
2923,URL.hostname,,replace,URL.hostname.replace,,,Others,String replacement method.
2924,response,,url,response.url,,,Others,Returns the URL of the current webpage.
2925,event.type,,indexOf,event.type.indexOf,,,Others,Returns the index of the first occurrence of a substring.
2926,String.raw,,apply,String.raw.apply,,,40,Call function with context and arguments provided in an array.
2927,Document,,parseHTML,Document.parseHTML,,,25,Parses HTML content into a DOM tree.
2928,message.format,,bind,message.format.bind,,,Others,Binds a function to a specified context.
2929,buffer,,charCodeAt,buffer.charCodeAt,,,34,Returns Unicode value of character at specified index.
2930,Function,,evaluate,Function.evaluate,,,Others,Unknown
2931,module.exports,,getAccessToken,module.exports.getAccessToken,,,Others,Unknown
2932,module.exports,,addPersistedImage,module.exports.addPersistedImage,,,Others,Unknown
2933,module.exports,,addPersistedBlogImage,module.exports.addPersistedBlogImage,,,Others,Unknown
2934,server,,use,server.use,,,6,Middleware function for handling requests in Express.js.
2935,module,,hasOwnProperty,module.hasOwnProperty,,,Others,Checks if an object has a specific property.
2936,map,,setProperty,map.setProperty,,,40,Set a property on an object.
2937,map,,toComment,map.toComment,,,Others,Converts data to a comment.
2938,error,,toJSON,error.toJSON,,,31,Converts object to JSON string.
2939,channel,,has,channel.has,,,Others,Check if a property exists in an object.
2940,context.matches,,map,context.matches.map,,,40,Transforms array elements with the provided function.
2941,event.sender,,startDrag,event.sender.startDrag,,,Others,Drag and drop functionality for an element.
2942,Function,,finalFn,Function.finalFn,,,Others,Unknown
2943,tty,,setRawMode,tty.setRawMode,,,33,Enable raw mode in the terminal.
2944,process.stdin,,removeAllListeners,process.stdin.removeAllListeners,,,Others,Removes all listeners for a specified event.
2945,repl,,exit,repl.exit,,,35,Exit the current REPL session.
2946,Promise,,pipe,Promise.pipe,,,Others,Unknown
2947,start,,toUTCString,start.toUTCString,,,Others,Convert date to a UTC string.
2948,it,,export,it.export,,,Others,Unknown
2949,socket,,once,socket.once,,,Others,Unknown
2950,util.format,,apply,util.format.apply,,,40,Calls a function with a given `this` value.
2951,Crypto,,addHolder,Crypto.addHolder,,,Others,Unknown
2952,Crypto,,displayCryptoInfo,Crypto.displayCryptoInfo,,,Others,Unknown
2953,test.subtests,,map,test.subtests.map,,,40,Transforms each element in an array.
2954,stream,,getAudioTracks,stream.getAudioTracks,,,33,Get audio tracks from the stream.
2955,map,,removeOverlay,map.removeOverlay,,,Others,Removes overlay from map.
2956,map,,addOverlay,map.addOverlay,,,38,Add overlay to map.
2957,resolver.resolveSync,,apply,resolver.resolveSync.apply,,,40,Call a function with a given `this` value and arguments
2958,certificate,,lookup,certificate.lookup,,,Others,Lookup information based on the given certificate name.
2959,response,,render,response.render,,,Others,Renders content to the webpage.
2960,document.body,,querySelector,document.body.querySelector,,,Others,Returns the first element within the document that matches the specified selector.
2961,ctx,,getChatMember,ctx.getChatMember,,,5,Get information about a chat member.
2962,context,,clearRect,context.clearRect,,,Others,Clears a rectangular area on a canvas.
2963,context,,translate,context.translate,,,Others,Transforms the coordinate system.
2964,context,,rotate,context.rotate,,,40,Rotate the canvas in JavaScript.
2965,json.name,,indexOf,json.name.indexOf,,,Others,Searches for a specified value within an array.
2966,Blob,,__wrap,Blob.__wrap,,,Others,Unknown
2967,emitter,,catch,emitter.catch,,,33,Catch errors during promise execution.
2968,socket,,off,socket.off,,,Others,Unsubscribes event listener.
2969,agent,,includes,agent.includes,,,Others,Checks if an array includes a certain element.
2970,console,,setSize,console.setSize,,,Others,Unknown
2971,console,,show,console.show,,,Others,Display information in the console.
2972,console,,setPosition,console.setPosition,,,23,Move the console to a specific position.
2973,console,,hide,console.hide,,,Others,Unknown
2974,events,,onKeyDown,events.onKeyDown,,,2,Listen for key press events.
2975,message,,type,message.type,,,Others,Return the data type of the variable.
2976,message,,talker,message.talker,,,Others,Unknown
2977,message,,room,message.room,,,Others,Unknown
2978,ctx,,ctx,ctx.ctx,,,Others,Unknown
2979,Error,,create,Error.create,,,Others,Unknown
2980,Error,,getById,Error.getById,,,Others,Get item by id from a data source.
2981,Error,,template,Error.template,,,Others,Unknown
2982,Error,,renderer,Error.renderer,,,Others,Unknown
2983,it,,split,it.split,,,Others,String method that splits a string into an array.
2984,ctx,,broadcast,ctx.broadcast,,,Others,Unknown
2985,ctx,,once,ctx.once,,,33,Registers event handler to be executed only once.
2986,regexp.source,,replaceAll,regexp.source.replaceAll,,,Others,Replace all occurrences of a specified value in a string
2987,regexp.flags,,includes,regexp.flags.includes,,,Others,Check if a string contains a specified substring.
2988,fs.promises,,cp,fs.promises.cp,,,7,Copy file asynchronously.
2989,context.nodeModel,,getNodeById,context.nodeModel.getNodeById,,,5,Returns a node object by its unique identifier.
2990,map,,triggerRepaint,map.triggerRepaint,,,Others,Unknown
2991,stream,,Transform,stream.Transform,,,Others,Unknown
2992,url,,matchAll,url.matchAll,,,Others,Returns an iterator of all results matching a regex pattern.
2993,buf,,toArray,buf.toArray,,,29,Converts buffer to array.
2994,crypto,,raandomBytes,crypto.raandomBytes,,,28,Generate random bytes.
2995,port,,inc,port.inc,,,Others,Increments a value by 1.
2996,document,,append,document.append,,,10,Add element to the end of a document.
2997,buffer,,pop,buffer.pop,,,10,Remove and return the last element from an array.
2998,message,,getReceiver,message.getReceiver,,,Others,Unknown
2999,response,,getTxhash,response.getTxhash,,,Others,Unknown
3000,response,,getError,response.getError,,,Others,Unknown
3001,request,,serializeBinary,request.serializeBinary,,,33,Serialize data into binary format.
3002,message,,getTxhash,message.getTxhash,,,33,Returns transaction hash from a message.
3003,message,,getError,message.getError,,,Others,Returns error message.
3004,document.selection,,getSelectedBlocks,document.selection.getSelectedBlocks,,,Others,Unknown
3005,event,,persist,event.persist,,,Others,Prevent event from being garbage collected prematurely.
3006,agent,,kill,agent.kill,,,Others,Kill - Terminates the agent execution.
3007,request.path,,startsWith,request.path.startsWith,,,Others,Check if a string starts with a specified value.
3008,response,,_track_middleware_cursor,response._track_middleware_cursor,,,Others,Unknown
3009,context,,scale,context.scale,,,Others,Transforms the size of the canvas context.
3010,ctx.telegram,,getFile,ctx.telegram.getFile,,,6,Retrieve file information from Telegram.
3011,buffer,,readUInt32LE,buffer.readUInt32LE,,,33,Reads an unsigned 32-bit integer from buffer in little-endian.
3012,process,,abort,process.abort,,,Others,Unknown
3013,request,,hasOwnProperty,request.hasOwnProperty,,,Others,Check if an object has a specified property.
3014,request.params,,hasOwnProperty,request.params.hasOwnProperty,,,Others,Check if an object has a specified property.
3015,message,,push,message.push,,,10,Add element(s) to end of an array.
3016,Map,,N,Map.N,,,Others,Unknown
3017,context,,collect,context.collect,,,Others,Aggregate values into a single result.
3018,context,,output,context.output,,,Others,Unknown
3019,hmac,,read,hmac.read,,,Others,Unknown
3020,document.body,,createTextRange,document.body.createTextRange,,,Others,Text selection or manipulation on HTML elements.
3021,ctx.http,,file,ctx.http.file,,,14,Read or write to a file.
3022,watcher,,watcher,watcher.watcher,,,Others,Unknown
3023,ctx,,verifyEnum,ctx.verifyEnum,,,Others,Check if value is a valid option in an enumeration.
3024,ctx,,createClient,ctx.createClient,,,Others,Unknown
3025,document.documentElement,,removeChild,document.documentElement.removeChild,,,Others,Remove a child element from the DOM.
3026,document.documentElement,,appendChild,document.documentElement.appendChild,,,40,Add a child node to the specified element.
3027,object,,forEach,object.forEach,,,Others,Iterates over elements of an object.
3028,object,,charAt,object.charAt,,,Others,Returns the character at a specified index in a string.
3029,domain,,addEventListener,domain.addEventListener,,,23,Adds an event listener to a specified element.
3030,context,,node,context.node,,,Others,Unknown
3031,ctx.database,,upsert,ctx.database.upsert,,,Others,"Update if exists, insert if not."
3032,set.storageKeys,,join,set.storageKeys.join,,,Others,Combines elements of an array into a string.
3033,context,,get,context.get,,,Others,Accessing a value or property from an object.
3034,asynciterator,,ArrayIterator,asynciterator.ArrayIterator,,,Others,Iterates over an array asynchronously.
3035,ctx.http,,put,ctx.http.put,,,28,Update data in the server.
3036,Hash,,sha1_buffer,Hash.sha1_buffer,,,Others,Unknown
3037,hash,,on,hash.on,,,Others,Event handling function.
3038,readStream,,once,readStream.once,,,Others,Runs the callback function only once.
3039,path,,resolvePath,path.resolvePath,,,Others,Unknown
3040,Date.UTC,,apply,Date.UTC.apply,,,Others,Passes an array as arguments to a function.
3041,buffer,,isError,buffer.isError,,,33,Check if buffer contains an error.
3042,buffer,,raw,buffer.raw,,,33,Converts data into a raw binary format.
3043,buffer,,error,buffer.error,,,Others,Unknown
3044,buf,,isError,buf.isError,,,34,Check if a buffer object has an error.
3045,buf,,error,buf.error,,,Others,Unknown
3046,buffer,,save,buffer.save,,,Others,Unknown
3047,buffer,,restore,buffer.restore,,,33,Restore the buffer to its previous state.
3048,buffer,,skip,buffer.skip,,,Others,Skip elements in a buffer.
3049,buffer,,isEmpty,buffer.isEmpty,,,33,Check if buffer is empty.
3050,Set,,sort,Set.sort,,,6,Sorts the elements of a Set.
3051,context,,strokeRect,context.strokeRect,,,Others,Draws a rectangular outline.
3052,url,,push,url.push,,,Others,Add an element to the end of an array.
3053,url,,sort,url.sort,,,Others,Sorts the elements of an array in place.
3054,url,,forEach,url.forEach,,,Others,"Iterates over array elements, executes a callback function."
3055,url,,map,url.map,,,Others,Transforms each element of an array.
3056,context.logger,,error,context.logger.error,,,Others,Logs an error message.
3057,module,,addTemplate,module.addTemplate,,,39,Add a template to the module.
3058,cluster,,getMarkerClusterer,cluster.getMarkerClusterer,,,23,Marker clustering for group of markers on a map.
3059,cluster,,getMap,cluster.getMap,,,38,Return an object or map associated with the cluster.
3060,test.attempts,,some,test.attempts.some,,,Others,Check if at least one element in array meets condition.
3061,dir,,startsWith,dir.startsWith,,,Others,String method to check if a string starts with specific characters.
3062,String,,fromArrayBuffer,String.fromArrayBuffer,,,29,Converts an array buffer to a string.
3063,ArrayBuffer,,fromString,ArrayBuffer.fromString,,,Others,Converts a string to an ArrayBuffer.
3064,json,,hasOwnProperty,json.hasOwnProperty,,,Others,Check if an object has a specified property.
3065,Date.resources,,push,Date.resources.push,,,Others,Add element to the end of the array.
3066,script,,replace,script.replace,,,33,String replacement method in JavaScript.
3067,module.test,,test,module.test.test,,,Others,Unknown
3068,domain,,replace,domain.replace,,,15,String replacement method in JavaScript.
3069,error.fileContent,,replace,error.fileContent.replace,,,38,String replacement operation in JavaScript.
3070,event,,replace,event.replace,,,Others,String replacement method.
3071,ctx.tags,,includes,ctx.tags.includes,,,Others,Check if array includes a certain element.
3072,ctx.tags,,push,ctx.tags.push,,,10,Add element(s) to the end of an array.
3073,ctx.response,,get,ctx.response.get,,,28,Accesses a value from a response object.
3074,ctx.path,,startsWith,ctx.path.startsWith,,,Others,Check if a string starts with a specific substring.
3075,document,,mozcancelFullScreen,document.mozcancelFullScreen,,,Others,Exit full screen mode in Mozilla Firefox.
3076,document,,webkitExitFullscreen,document.webkitExitFullscreen,,,23,Exit full-screen mode in webkit browsers.
3077,document,,msExitFullscreen,document.msExitFullscreen,,,22,Exit full screen mode in Microsoft browsers.
3078,document.createComment,,bind,document.createComment.bind,,,40,Binds a function to a context.
3079,document.createElement,,bind,document.createElement.bind,,,33,Binds a function to a context.
3080,document.createElementNS,,bind,document.createElementNS.bind,,,Others,Binds a function to a specific context.
3081,document.createTextNode,,bind,document.createTextNode.bind,,,40,Binds a function to a context.
3082,worker,,once,worker.once,,,40,Executes a function only once.
3083,session,,save,session.save,,,Others,Unknown
3084,module.exports,,getCurrentPackage,module.exports.getCurrentPackage,,,Others,Unknown
3085,Error,,setBundleHost,Error.setBundleHost,,,Others,Unknown
3086,Error,,setUpdateChecker,Error.setUpdateChecker,,,4,Check for updates in the system.
3087,Error,,setFallbackToAppCenter,Error.setFallbackToAppCenter,,,23,Fallback to App Center error handling.
3088,script,,remove,script.remove,,,Others,Unknown
3089,script,,removeEventListener,script.removeEventListener,,,40,Removes an event listener from an element.
3090,RegExp,,like,RegExp.like,,,Others,Unknown
3091,event,,getSource,event.getSource,,,Others,Return the source of an event.
3092,map.types,,indexOf,map.types.indexOf,,,Others,Returns the index of the first occurrence of a value.
3093,it,,map,it.map,,,40,Transforms each element of array with provided function.
3094,error,,json,error.json,,,Others,Unknown
3095,document.body,,hasAttribute,document.body.hasAttribute,,,Others,Check if an element has a specific attribute.
3096,document.body,,getAttribute,document.body.getAttribute,,,Others,Returns the value of the specified attribute from an element.
3097,module,,getProvider,module.getProvider,,,35,Return the provider from the module.
3098,array,,split,array.split,,,Others,Splits a string into an array of substrings.
3099,start,,toUTCDate,start.toUTCDate,,,Others,Unknown
3100,server,,setMaxListeners,server.setMaxListeners,,,33,Sets the maximum number of listeners for an event.
3101,server.key,,equals,server.key.equals,,,Others,Comparison function to check equality between two values.
3102,server.cert,,equals,server.cert.equals,,,Others,Checks if two values are equal.
3103,context,,ref,context.ref,,,Others,Unknown
3104,context,,resolve,context.resolve,,,Others,Return the resolved value.
3105,event,,watch,event.watch,,,Others,Unknown
3106,event,,stopWatching,event.stopWatching,,,39,Stop watching for event changes.
3107,path,,charCodeAt,path.charCodeAt,,,29,Returns Unicode value of character at specified index in string.
3108,Date,,start,Date.start,,,Others,Unknown
3109,serializer,,serializeVariantIndex,serializer.serializeVariantIndex,,,40,Serialize variant index in JavaScript.
3110,serializer,,serializeStr,serializer.serializeStr,,,39,Serialize a string.
3111,serializer,,serializeOptionTag,serializer.serializeOptionTag,,,35,Serialize an option tag.
3112,deserializer,,deserializeOptionTag,deserializer.deserializeOptionTag,,,Others,Unknown
3113,deserializer,,deserializeVariantIndex,deserializer.deserializeVariantIndex,,,35,Deserialize a variant index.
3114,deserializer,,deserializeStr,deserializer.deserializeStr,,,33,Deserialize a string.
3115,deserializer,,deserializeU64,deserializer.deserializeU64,,,34,Converts serialized data to a 64-bit unsigned integer.
3116,console.error,,apply,console.error.apply,,,40,Calls a function with a given `this` value and arguments
3117,deserializer,,deserializeLen,deserializer.deserializeLen,,,Others,Unknown
3118,Event,,createId,Event.createId,,,Others,Generate unique identifier for events.
3119,serializer,,serializeLen,serializer.serializeLen,,,39,Serialize length of data.
3120,deserializer,,getBufferOffset,deserializer.getBufferOffset,,,Others,Unknown
3121,deserializer,,checkThatKeySlicesAreIncreasing,deserializer.checkThatKeySlicesAreIncreasing,,,Others,Ensure key slices are in increasing order.
3122,serializer,,serializeU8,serializer.serializeU8,,,29,Converts data into a Uint8Array.
3123,serializer,,serializeU16,serializer.serializeU16,,,33,Serialize 16-bit unsigned integer data.
3124,serializer,,serializeU64,serializer.serializeU64,,,33,Serialize unsigned 64-bit integer.
3125,Event,,appendChild,Event.appendChild,,,22,Add child element to parent element.
3126,Events.one,,apply,Events.one.apply,,,Others,Unknown
3127,Events.on,,apply,Events.on.apply,,,Others,Call a function with a given context and arguments.
3128,object,,scope,object.scope,,,Others,Unknown
3129,object,,url,object.url,,,28,Get the URL of the object.
3130,object.className,,toLowerCase,object.className.toLowerCase,,,30,Converts a string to lowercase.
3131,Events.off,,apply,Events.off.apply,,,Others,Call a function with a given this value and arguments
3132,Events.trigger,,apply,Events.trigger.apply,,,Others,Call a function with a given `this` value and arguments
3133,document,,getSelection,document.getSelection,,,Others,Returns the currently selected text in a document.
3134,path.join,,apply,path.join.apply,,,40,Call a function with a given this value and arguments.
3135,ctx,,waitUntil,ctx.waitUntil,,,Others,Unknown
3136,readable,,getReader,readable.getReader,,,Others,Unknown
3137,document,,registerElement,document.registerElement,,,Others,Unknown
3138,UTIL,,toInt,UTIL.toInt,,,34,Converts a value to an integer.
3139,UTIL,,assertInt,UTIL.assertInt,,,31,Asserts integer value.
3140,UTIL,,isTrueString,UTIL.isTrueString,,,Others,Unknown
3142,UTIL,,assertEntity,UTIL.assertEntity,,,35,Generic entity assertion function for JavaScript applications.
3143,UTIL,,assert,UTIL.assert,,,39,Assertion and error handling function.
3144,UTIL,,concat,UTIL.concat,,,Others,Combines two or more arrays into a single array.
3145,UTIL,,insertSorted,UTIL.insertSorted,,,Others,Inserts element into sorted array while maintaining ascending order.
3146,UTIL,,randomInt,UTIL.randomInt,,,33,Generate a random integer.
3147,UTIL,,assertFunction,UTIL.assertFunction,,,Others,Unknown
3148,buffer,,forEach,buffer.forEach,,,40,Iterates over elements in an array.
3149,Math.random,,bind,Math.random.bind,,,Others,Binds a function to a context.
3150,ctx,,createImageData,ctx.createImageData,,,40,"Creates a new, blank ImageData object."
3151,ctx,,putImageData,ctx.putImageData,,,Others,Draws image data onto a canvas.
3152,channel,,ack,channel.ack,,,33,Acknowledges the message received from the message queue.
3153,response.body,,toString,response.body.toString,,,29,Converts a value to a string.
3154,response.data,,pipe,response.data.pipe,,,Others,Unknown
3155,stream,,writeUint8,stream.writeUint8,,,13,Write unsigned 8-bit integer to a stream.
3156,ctx.reader,,readUint16,ctx.reader.readUint16,,,33,Reads a 16-bit unsigned integer from the input stream.
3157,ctx.reader,,readUint8,ctx.reader.readUint8,,,11,Reads an unsigned 8-bit integer from a stream.
3158,ctx.reader,,readUint32,ctx.reader.readUint32,,,11,Reads a 32-bit unsigned integer from the input.
3159,ctx,,mixin,ctx.mixin,,,17,Combines objects - merges their properties.
3160,buffer,,getUint8,buffer.getUint8,,,11,Get unsigned 8-bit integer from buffer.
3161,ctx.loader,,update,ctx.loader.update,,,Others,Unknown
3162,URL.pathname,,trim,URL.pathname.trim,,,Others,Removes whitespace from both ends of a string.
3163,it,,endsWith,it.endsWith,,,Others,Check if a string ends with a specified value.
3164,server,,startServer,server.startServer,,,Others,Unknown
3165,response.body,,on,response.body.on,,,Others,Event handling function.
3166,events,,get,events.get,,,Others,Retrieve data from events.
3167,stream.Writable,,call,stream.Writable.call,,,40,Call a function with a specified `this` value.
3168,stream.Readable,,call,stream.Readable.call,,,Others,Unknown
3169,ctx,,setInterval,ctx.setInterval,,,33,Repeats a function at specified intervals.
3170,map,,hasOwnProperty,map.hasOwnProperty,,,Others,Check if object has a property.
3171,ctx.$elBusCookie,,getRefreshToken,ctx.$elBusCookie.getRefreshToken,,,Others,Unknown
3172,ctx.$elBusCookie,,setToken,ctx.$elBusCookie.setToken,,,Others,Set a token value in a cookie.
3173,ctx.$elBusCookie,,getAccessToken,ctx.$elBusCookie.getAccessToken,,,Others,Unknown
3174,ctx.$elBusCookie,,removeToken,ctx.$elBusCookie.removeToken,,,33,Remove token from a cookie.
3175,test.array,,join,test.array.join,,,Others,Join elements of an array into a string.
3176,path,,getTotalLength,path.getTotalLength,,,Others,Returns the total length of a path.
3177,ctx.puppeteer,,page,ctx.puppeteer.page,,,23,Web page manipulation and automation in headless browser.
3178,url.url,,includes,url.url.includes,,,Others,Checks if a string includes a specified value.
3179,document.body,,removeEventListener,document.body.removeEventListener,,,Others,Removes event listener from element.
3180,it.innerText,,toLowerCase,it.innerText.toLowerCase,,,Others,Converts string to lowercase.
3181,document.title,,replace,document.title.replace,,,Others,String replacement method.
3182,context,,complate,context.complate,,,Others,Unknown
3183,end,,getOrElse,end.getOrElse,,,Others,"Returns value if exists, otherwise returns a default value."
3184,module.path,,join,module.path.join,,,1,Joining path segments.
3185,module.path,,slice,module.path.slice,,,Others,Extracts a section of an array and returns a new array
3186,document,,caretPositionFromPoint,document.caretPositionFromPoint,,,6,Return caret position from given coordinates.
3187,document,,caretRangeFromPoint,document.caretRangeFromPoint,,,Others,Get caret range from a point on the document.
3188,module.interfaces,,map,module.interfaces.map,,,40,Transforms each element in an array based on a callback.
3189,module.exports,,map,module.exports.map,,,40,Transforms elements of an array based on a callback function.
3190,module.functions,,map,module.functions.map,,,40,Transforms elements of an array based on a function.
3191,module.constants,,map,module.constants.map,,,40,Transforms each element of an array using a callback function.
3192,module.classes,,map,module.classes.map,,,11,Transforms each element of an array according to a function.
3193,module.typeAliases,,map,module.typeAliases.map,,,40,Transforms each element of an array using a callback function.
3194,eval,,call,eval.call,,,40,Execute a function within a specific context.
3195,path.scope,,registerDeclaration,path.scope.registerDeclaration,,,Others,Unknown
3196,Tracker.trap,,setUseWsTransport,Tracker.trap.setUseWsTransport,,,Others,Enable WebSocket transport for Tracker.trap communication.
3197,Tracker.trap,,url,Tracker.trap.url,,,Others,Unknown
3198,Tracker.trap,,idleTimeout,Tracker.trap.idleTimeout,,,Others,Unknown
3199,Tracker.trap,,bufferSizeLimit,Tracker.trap.bufferSizeLimit,,,33,Limit the size of the buffer.
3200,Tracker.trap,,bufferTimeout,Tracker.trap.bufferTimeout,,,Others,Unknown
3201,Tracker.trap,,apiKeyName,Tracker.trap.apiKeyName,,,Others,Unknown
3202,Tracker.trap,,apiKeyValue,Tracker.trap.apiKeyValue,,,Others,Unknown
3203,Tracker.trap,,enableCompression,Tracker.trap.enableCompression,,,15,Enable data compression for tracking purposes.
3204,Tracker,,applyConfigurations,Tracker.applyConfigurations,,,Others,Unknown
3205,Tracker.trap,,start,Tracker.trap.start,,,Others,Unknown
3206,path,,isObjectExpression,path.isObjectExpression,,,Others,Checks if a node is an object expression.
3207,path,,isIdentifier,path.isIdentifier,,,Others,Check if given path is an identifier.
3208,path,,isJSXAttribute,path.isJSXAttribute,,,Others,Check if the path represents a JSX attribute.
3209,URL.pathname,,replace,URL.pathname.replace,,,Others,String replacement method.
3210,it.function,,toLowerCase,it.function.toLowerCase,,,Others,Converts a string to lowercase.
3211,repl,,defineCommand,repl.defineCommand,,,39,Creates a custom command in a REPL environment.
3212,FS,,init,FS.init,,,Others,Unknown
3213,context,,incremental,context.incremental,,,Others,Unknown
3214,context,,self,context.self,,,Others,Unknown
3215,FS,,quit,FS.quit,,,Others,Unknown
3216,context,,when,context.when,,,Others,Event listener for a specific condition.
3217,TTY,,init,TTY.init,,,2,Initialize TTY (Teletypewriter) settings.
3218,TTY,,shutdown,TTY.shutdown,,,Others,Unknown
3219,FS,,mount,FS.mount,,,Others,Mounts a filesystem into a specified directory.
3220,process,,listeners,process.listeners,,,Others,Unknown
3221,watcher,,add,watcher.add,,,Others,Unknown
3222,message,,done,message.done,,,Others,Return Unknown
3223,JSON.parse,,bind,JSON.parse.bind,,,33,Binds `this` context to a function.
3224,path.scope,,buildUndefinedNode,path.scope.buildUndefinedNode,,,Others,Return a node representing undefined value.
3225,path,,getSource,path.getSource,,,3,Returns the source of a given path.
3226,stream,,subscribe,stream.subscribe,,,Others,Unknown
3227,module.exports,,closest,module.exports.closest,,,38,Find the closest element that matches a given selector.
3228,module.exports,,_defaultComparitor,module.exports._defaultComparitor,,,Others,Unknown
3229,module.exports,,range,module.exports.range,,,Others,Generates a range of numbers or values.
3230,ctx,,requestEmitHelper,ctx.requestEmitHelper,,,Others,Unknown
3231,ctx,,readEmitHelpers,ctx.readEmitHelpers,,,Others,Unknown
3232,http,,listen,http.listen,,,27,Starts a server to listen for incoming HTTP requests.
3233,request,,encode,request.encode,,,Others,Unknown
3234,request,,isIdentity,request.isIdentity,,,Others,Check if the request represents an identity.
3235,request,,setInfoKey,request.setInfoKey,,,Others,Unknown
3236,ctx.monetary,,gain,ctx.monetary.gain,,,Others,Unknown
3237,Promise,,removeEventListener,Promise.removeEventListener,,,33,Removes event listener from event target.
3238,Promise,,querySelector,Promise.querySelector,,,19,Returns the first element within the document that matches the selector.
3239,Map,,_trigger,Map._trigger,,,Others,Unknown
3240,Promise,,addEventListener,Promise.addEventListener,,,Others,Unknown
3241,session.content,,trim,session.content.trim,,,Others,Removes whitespace from beginning and end of a string.
3242,buf,,findIndex,buf.findIndex,,,Others,Find the index of the first matching element in an array.
3243,ctx.ffmpeg,,builder,ctx.ffmpeg.builder,,,40,Creates or configures FFmpeg command for audio/video processing.
3244,ctx.silk,,encode,ctx.silk.encode,,,Others,Unknown
3245,ctx,,slice,ctx.slice,,,Others,Returns a shallow copy of a portion of an array.
3246,request,,catch,request.catch,,,Others,Handles errors in promises.
3247,path,,valueOf,path.valueOf,,,33,Returns the primitive value of the specified object.
3248,error.stdout,,toString,error.stdout.toString,,,29,Converts a value to a string.
3249,object,,trim,object.trim,,,Others,Remove whitespace from start and end of string.
3250,Error.stack,,slice,Error.stack.slice,,,Others,Extracts a portion of an array without modifying the original.
3251,hash,,split,hash.split,,,Others,Splits a string into an array of substrings.
3252,events,,reduce,events.reduce,,,Others,Aggregate array elements into single value using callback function.
3253,request.emitter,,emit,request.emitter.emit,,,33,Event emitter method to trigger custom events.
3254,request.log,,debug,request.log.debug,,,Others,Unknown
3255,event.resourceIds,,includes,event.resourceIds.includes,,,Others,Checks if an element is included in an array.
3256,request._raw,,write,request._raw.write,,,17,Writes data to a writable stream.
3257,request._raw,,end,request._raw.end,,,Others,Ends the request process.
3258,request.emitter,,once,request.emitter.once,,,23,Registers a one-time event handler.
3259,event.resourceIds,,map,event.resourceIds.map,,,33,Transforms each element in an array.
3260,buffer,,writeUInt16LE,buffer.writeUInt16LE,,,13,Writes 16-bit unsigned integer to buffer in little-endian.
3261,ctx.container,,get,ctx.container.get,,,Others,Get a service or dependency from the container.
3262,Error,,from,Error.from,,,34,Converts data into an Error object.
3263,console.info,,bind,console.info.bind,,,40,Binds a function to a context.
3264,context.api,,postStatus,context.api.postStatus,,,Others,Unknown
3265,context.api2,,postMediaAttachment,context.api2.postMediaAttachment,,,Others,Unknown
3266,response,,body,response.body,,,Others,Unknown
3267,response,,ok,response.ok,,,20,HTTP response status 200 OK - success.
3268,response,,statusText,response.statusText,,,28,Get the status text of the HTTP response.
3269,domain,,trim,domain.trim,,,Others,Removes white space from beginning and end of a string.
3270,crypto,,X509Certificate,crypto.X509Certificate,,,Others,Unknown
3271,request,,unpipe,request.unpipe,,,38,Detaches readable stream from writable stream.
3272,request,,resume,request.resume,,,Others,Unknown
3273,ctx.req,,on,ctx.req.on,,,23,Event handling functionality.
3274,stream,,unpipe,stream.unpipe,,,Others,Stop sending data from readable stream to writable stream.
3275,request,,pipe,request.pipe,,,Others,Unknown
3276,response,,send,response.send,,,Others,Unknown
3277,request,,is,request.is,,,Others,Check if the object matches a certain condition.
3278,event,,$set,event.$set,,,Others,Update object properties in JavaScript.
3279,document.location,,toString,document.location.toString,,,31,Converts object to a string representation.
3280,message.message,,toString,message.message.toString,,,29,Converts an object to a string.
3281,message,,applySignature,message.applySignature,,,38,Apply signature to a message.
3282,document.implementation,,createHTMLDocument,document.implementation.createHTMLDocument,,,Others,Unknown
3283,Date,,getDayFormatted,Date.getDayFormatted,,,Others,Format day of the week.
3284,Date,,getMonthFormatted,Date.getMonthFormatted,,,Others,Return month in formatted style.
3285,handler,,end,handler.end,,,Others,Unknown
3286,handler,,start,handler.start,,,Others,Unknown
3287,buffer,,lastIndexOf,buffer.lastIndexOf,,,11,Searches for last occurrence of specified value in buffer.
3288,buffer,,splice,buffer.splice,,,Others,Modify array by removing or replacing existing elements.
3289,handler,,chars,handler.chars,,,Others,Extracts characters from a string.
3290,handler,,doctype,handler.doctype,,,Others,Unknown
3291,handler,,comment,handler.comment,,,Others,Unknown
3292,context,,switchToHttp,context.switchToHttp,,,Others,Converts context to HTTP format.
3293,ctx.slots,,default,ctx.slots.default,,,Others,Unknown
3294,server,,dispose,server.dispose,,,Others,Unknown
3295,Promise,,on,Promise.on,,,23,Event handling or callback function registration.
3296,ctx,,onBuildFinish,ctx.onBuildFinish,,,Others,Unknown
3297,assert,,isNull,assert.isNull,,,40,"Returns true if value is null, false otherwise."
3298,test,,apply,test.apply,,,Others,Calls a function with a given `this` value.
3299,error.details,,map,error.details.map,,,40,Transforms each element in an array.
3300,Function,,isRunningInNode,Function.isRunningInNode,,,4,Checks if code is running in a Node.js environment.
3301,handler,,onError,handler.onError,,,38,Function to handle errors in the program.
3302,handler,,onSuccess,handler.onSuccess,,,Others,Unknown
3303,handler,,onProgress,handler.onProgress,,,Others,Unknown
3304,RegExp.$1,,indexOf,RegExp.$1.indexOf,,,Others,String method to find index of specified value.
3305,ctx.gimg,,generateLiveImg,ctx.gimg.generateLiveImg,,,Others,Generate a live image; Unknown
3306,ctx.biliAPI,,getMasterInfo,ctx.biliAPI.getMasterInfo,,,Others,Unknown
3307,ctx.biliAPI,,getUserInfo,ctx.biliAPI.getUserInfo,,,Others,Unknown
3308,ctx.notifier,,create,ctx.notifier.create,,,Others,Unknown
3309,session,,prompt,session.prompt,,,23,User input dialog box for web browsers.
3310,ctx.bots,,forEach,ctx.bots.forEach,,,38,Iterates over each element in an array.
3311,ctx.biliAPI,,getLiveRoomInfo,ctx.biliAPI.getLiveRoomInfo,,,Others,Unknown
3312,ctx.biliAPI,,getLoginQRCode,ctx.biliAPI.getLoginQRCode,,,23,Generate QR code for login.
3313,ctx.biliAPI,,getCookies,ctx.biliAPI.getCookies,,,Others,Unknown.
3314,array,,subarray,array.subarray,,,Others,Extracts a portion of an array.
3315,ctx.biliAPI,,getLoginStatus,ctx.biliAPI.getLoginStatus,,,22,Check login status using Bilibili API.
3316,ctx.wbi,,encrypt,ctx.wbi.encrypt,,,33,Encryption function.
3317,ctx.biliAPI,,disposeNotifier,ctx.biliAPI.disposeNotifier,,,Others,Unknown
3318,ctx.biliAPI,,enableRefreshCookiesDetect,ctx.biliAPI.enableRefreshCookiesDetect,,,Others,Enable detection of cookie refresh in Bilibili API.
3319,ctx.biliAPI,,getLoginInfoIsLoaded,ctx.biliAPI.getLoginInfoIsLoaded,,,28,Check if login information is loaded.
3320,ctx,,setTimeout,ctx.setTimeout,,,37,Asynchronous code execution after a specified delay.
3321,ctx.gimg,,getTimeDifference,ctx.gimg.getTimeDifference,,,Others,Calculate time difference between two dates.
3322,ctx,,middleware,ctx.middleware,,,Others,Unknown
3323,ctx.biliAPI,,getUserSpaceDynamic,ctx.biliAPI.getUserSpaceDynamic,,,Others,Unknown
3324,ctx.gimg,,generateDynamicImg,ctx.gimg.generateDynamicImg,,,Others,Unknown
3325,ctx.biliAPI,,getTimeOfUTC8,ctx.biliAPI.getTimeOfUTC8,,,Others,Return unknown
3326,ctx.sm,,disposePlugin,ctx.sm.disposePlugin,,,Others,Unknown
3327,ctx.sm,,registerPlugin,ctx.sm.registerPlugin,,,Others,Unknown
3328,url.fileURLToPath,,call,url.fileURLToPath.call,,,Others,Unknown
3329,path.dirname,,call,path.dirname.call,,,40,Method to call a function with a specified context.
3330,path.resolve,,call,path.resolve.call,,,39,Execute a function with a specific context or arguments.
3331,error.connection,,close,error.connection.close,,,Others,Unknown
3332,event,,getEventName,event.getEventName,,,40,Returns the name of the event.
3333,event.rows,,forEach,event.rows.forEach,,,38,Iterates over array elements and executes a callback function.
3334,event.affectedColumns,,indexOf,event.affectedColumns.indexOf,,,Others,Returns the index of the first occurrence of a value.
3335,session.content,,lastIndexOf,session.content.lastIndexOf,,,Others,Returns the last occurrence index of a specified value.
3336,session.content,,slice,session.content.slice,,,Others,Extracts a portion of an array or string.
3337,session,,text,session.text,,,Others,Unknown
3338,ctx.database,,select,ctx.database.select,,,Others,Query data from database.
3339,ctx.i18n,,define,ctx.i18n.define,,,38,Define translations for internationalization in the context object.
3340,tlsSocket,,end,tlsSocket.end,,,24,Closes the TLS connection.
3341,ctx,,call,ctx.call,,,40,Invokes a function with a specified `this` context.
3342,Error,,getAcceesData,Error.getAcceesData,,,Others,Unknown
3343,init,,resolve,init.resolve,,,37,Promise resolution handler function.
3344,init,,reject,init.reject,,,40,Promise rejection with a specified reason.
3345,process.execArgv,,slice,process.execArgv.slice,,,Others,Extracts a portion of an array.
3346,event.instances,,map,event.instances.map,,,40,Transforms each element of the array with a callback function.
3347,url,,URLSearchParams,url.URLSearchParams,,,Others,Parses URL search parameters from a string.
3348,stream,,cancel,stream.cancel,,,Others,Stop the stream operation.
3349,test.state,,toLowerCase,test.state.toLowerCase,,,30,Converts a string to lowercase.
3350,fs,,outputJson,fs.outputJson,,,14,Write JSON data to a file.
3351,session,,close,session.close,,,Others,Close the session or resource in use.
3352,ctx.http,,extend,ctx.http.extend,,,40,Extends object with properties from another object.
3353,buffer,,replace,buffer.replace,,,33,Replace string/character with another string/character in a buffer.
3354,ctx.url,,match,ctx.url.match,,,Others,String matching using regular expressions.
3355,event.tags,,find,event.tags.find,,,Others,Array method to find element in an array.
3356,event.tags,,filter,event.tags.filter,,,Others,Array method to filter elements based on a condition.
3357,session.content,,includes,session.content.includes,,,6,Check if element is included in array or string.
3358,json,,replace,json.replace,,,Others,String replacement method.
3359,server,,request,server.request,,,22,handling incoming requests in a custom server or making HTTP requests in a custom library
3360,server,,emit,server.emit,,,23,Triggering an event or sending data to connected clients.
3361,session.localPeer,,toB58String,session.localPeer.toB58String,,,33,"Base58 encoding for the local Peer's information."
3362,session.insecureLp,,write,session.insecureLp.write,,,17,Writes data to a stream.
3363,session.insecureLp,,once,session.insecureLp.once,,,Others,Unknown
3364,session.localKey,,sign,session.localKey.sign,,,Others,Digital signature generation using a local key.
3365,decipher.output,,length,decipher.output.length,,,10,Returns the number of elements in an array or string.
3366,decipher.output,,getBytes,decipher.output.getBytes,,,Others,Converts string to an array of bytes.
3367,cipher.output,,length,cipher.output.length,,,Others,Returns the number of elements in an object.
3368,cipher.output,,getBytes,cipher.output.getBytes,,,33,Converts output to an array of bytes.
3369,message,,get,message.get,,,Others,Returns a value from an object based on a key.
3370,path,,isProgram,path.isProgram,,,Others,Unknown
3371,ctx,,strokeText,ctx.strokeText,,,23,Draws outlined text on the canvas.
3372,process.domain,,bind,process.domain.bind,,,Others,Binds a function to a specific context.
3373,RegExp,,heartbeat,RegExp.heartbeat,,,Others,Unknown
3374,document.location,,reload,document.location.reload,,,23,Refreshes the current page.
3375,symbol,,toUpperCase,symbol.toUpperCase,,,Others,Converts a string to uppercase.
3376,context,,findConfigFile,context.findConfigFile,,,Others,Find and return the configuration file location.
3377,run,,push,run.push,,,10,Add element to end of array.
3378,Promise,,get,Promise.get,,,Others,Unknown
3379,message,,getTypeUrl,message.getTypeUrl,,,Others,Returns the type URL of a message.
3380,message,,getValue_asU8,message.getValue_asU8,,,33,Convert value to unsigned 8-bit integer.
3381,context,,filename,context.filename,,,Others,Unknown
3382,test,,call,test.call,,,40,Function for calling a method with a specified this value.
3383,message,,delete,message.delete,,,8,Delete a specified item or element.
3384,message.content,,slice,message.content.slice,,,Others,Extracts a section of a string.
3385,message.channel,,sendTyping,message.channel.sendTyping,,,Others,Simulate typing indicator in chat.
3386,message.channel,,send,message.channel.send,,,23,Sends a message to a channel.
3387,map,,updateMap,map.updateMap,,,Others,Unknown
3388,server,,sendCommand,server.sendCommand,,,35,Send a command to the server.
3389,map,,addMarkers,map.addMarkers,,,Others,Unknown
3390,map,,getLayer,map.getLayer,,,Others,Return a layer based on the specified name.
3391,map,,removeLayer,map.removeLayer,,,Others,Remove a layer from a map.
3392,map,,removeSource,map.removeSource,,,8,Remove a source from the map.
3393,map,,removeMarkers,map.removeMarkers,,,Others,Remove markers from a map.
3394,map,,getAllMarkers,map.getAllMarkers,,,Others,Returns all markers from a map.
3395,ctx,,removeCache,ctx.removeCache,,,Others,Unknown
3396,ctx,,reload,ctx.reload,,,Others,Refreshes the current page.
3397,stream,,createStream,stream.createStream,,,Others,Unknown
3398,ctx,,isolate,ctx.isolate,,,Others,Unknown
3399,ctx.loader,,reload,ctx.loader.reload,,,Others,Unknown
3400,ctx.openTelemetry,,trace,ctx.openTelemetry.trace,,,Others,Unknown
3401,Function,,fn,Function.fn,,,Others,Unknown
3402,event.dataTransfer,,setData,event.dataTransfer.setData,,,39,Set data in drag-and-drop operation.
3403,event.dataTransfer,,setDragImage,event.dataTransfer.setDragImage,,,Others,Unknown
3404,ctx,,readRequestBody,ctx.readRequestBody,,,11,Reads the request body data.
3405,ctx,,getRequestHeader,ctx.getRequestHeader,,,Others,Returns the value of a specific request header.
3406,module.hot,,dispose,module.hot.dispose,,,Others,Unknown
3407,module,,forEach,module.forEach,,,Others,Iterates over elements in an array and executes a function.
3408,Error,,extend,Error.extend,,,40,Extends an object by adding properties and methods.
3409,path,,n,path.n,,,Others,Return the last portion of a file path.
3410,crypto,,i,crypto.i,,,Others,Unknown
3411,https,,t,https.t,,,22,Encrypts data using HTTPS protocol.
3412,fs,,replace,fs.replace,,,6,String replacement within a file.
3413,context,,split,context.split,,,Others,String split method splits a string into an array.
3414,process,,superUserGranted,process.superUserGranted,,,Others,Unknown
3415,ctx,,isComplete,ctx.isComplete,,,Others,Check if a condition or process is fully executed.
3416,Date,,join,Date.join,,,Others,Concatenates all elements of an array into a string.
3417,context,,context,context.context,,,Others,Unknown.
3418,ctx.room,,get,ctx.room.get,,,Others,Return the value of a specific property in the room.
3419,server.clients,,values,server.clients.values,,,Others,Returns an array of all values in an object.
3420,request,,cancel,request.cancel,,,Others,Cancels the request.
3421,context,,rect,context.rect,,,40,Draws a rectangle.
3422,resolver,,call,resolver.call,,,35,Execute the function `call` of the `resolver` object.
3423,URL,,revokeObjetURL,URL.revokeObjetURL,,,Others,Unknown
3424,buf,,forEach,buf.forEach,,,38,Iterates over elements in an array.
3425,message.length,,toString,message.length.toString,,,29,Converts value to a string.
3426,context,,each,context.each,,,Others,Iterates over elements in a collection.
3427,handler,,handleRequest,handler.handleRequest,,,Others,Unknown
3428,event,,cancel,event.cancel,,,17,Prevents default behavior or propagation in event handling.
3429,buffer,,split,buffer.split,,,Others,Split a string into an array based on a separator.
3430,ctx,,createPattern,ctx.createPattern,,,Others,Create a pattern for filling shapes in a canvas.
3431,ctx,,drawSvg,ctx.drawSvg,,,Others,Unknown
3432,json,,startsWith,json.startsWith,,,Others,Check if a string starts with a specified value.
3433,json,,substring,json.substring,,,Others,Returns a portion of a string.
3434,ctx,,getJson,ctx.getJson,,,30,Parse JSON data from the context.
3435,ctx.response,,end,ctx.response.end,,,Others,Ends the response process.
3436,ctx.response,,setHeader,ctx.response.setHeader,,,22,Sets a header on the response object.
3437,ctx,,send,ctx.send,,,23,Sends data or a message.
3438,Promise,,raise,Promise.raise,,,Others,Unknown
3439,stream,,JSONStringify,stream.JSONStringify,,,30,Converts a JavaScript object to a JSON string.
3440,stream,,JSONParse,stream.JSONParse,,,30,Parses JSON data into a JavaScript object.
3441,worker,,delegate,worker.delegate,,,Others,Unknown
3442,request,,all,request.all,,,Others,Unknown
3443,response,,trim,response.trim,,,Others,Removes whitespace from both ends of a string.
3444,channel,,_put,channel._put,,,Others,Unknown
3445,channel,,_take,channel._take,,,Others,Unknown
3446,handler,,commit,handler.commit,,,Others,Unknown
3447,buf,,add,buf.add,,,Others,Unknown
3448,buffer,,add,buffer.add,,,34,Add an item to the buffer.
3449,timers,,some,timers.some,,,Others,Array method to check if at least one element passes test.
3450,context.sourceCode,,getText,context.sourceCode.getText,,,Others,Return the text content of the source code.
3451,timers,,push,timers.push,,,Others,Add items to the end of an array.
3453,ctx,,sleep,ctx.sleep,,,39,Delays execution in JavaScript.
3454,message.channel,,permissionsFor,message.channel.permissionsFor,,,Others,Check permissions for a specific channel.
3455,message,,awaitReactions,message.awaitReactions,,,Others,Unknown
3456,channel,,awaitMessages,channel.awaitMessages,,,23,Collects messages sent in a Discord channel.
3457,channel.name,,toLowerCase,channel.name.toLowerCase,,,Others,Converts a string to lowercase.
3458,ctx,,getSrc,ctx.getSrc,,,33,Return the source of an object or element.
3459,ctx,,getRootPath,ctx.getRootPath,,,Others,Unknown
3460,console,,lo,console.lo,,,Others,Unknown
3461,error.stderr,,toString,error.stderr.toString,,,29,Converts data to a string.
3462,server,,removeListener,server.removeListener,,,33,Remove a listener function from an event.
3463,JSON,,minify,JSON.minify,,,Others,Unknown
3464,console,,success,console.success,,,Others,Unknown
3465,context,,makeSlotWithCode,context.makeSlotWithCode,,,39,Creates a slot with provided code.
3466,Function,,dynamicImport,Function.dynamicImport,,,Others,Unknown
3467,context.checker,,getPropertyOfType,context.checker.getPropertyOfType,,,Others,Unknown
3468,context,,getSymbolAtLocation,context.getSymbolAtLocation,,,Others,Unknown
3469,context.project,,getReflectionFromSymbol,context.project.getReflectionFromSymbol,,,Others,Unknown
3470,context.project,,getSymbolFromReflection,context.project.getSymbolFromReflection,,,Others,Unknown
3471,context.checker,,getDeclaredTypeOfSymbol,context.checker.getDeclaredTypeOfSymbol,,,Others,Unknown
3472,context,,withScope,context.withScope,,,Others,Unknown
3473,context,,finalizeDeclarationReflection,context.finalizeDeclarationReflection,,,Others,Unknown
3474,dns,,toUpperCase,dns.toUpperCase,,,Others,Converts a string to uppercase.
3475,dns,,forEach,dns.forEach,,,Others,Iterates over each element in an array.
3476,dns,,trim,dns.trim,,,Others,String method to remove whitespace from beginning and end.
3478,crypto,,"""pbkdf2""","crypto.""pbkdf2""",,,32,Key derivation function for password-based cryptography.
3479,Date,,substring,Date.substring,,,Others,Returns a subset of characters within a string.
3480,crypto.subtle,,decrypt,crypto.subtle.decrypt,,,34,decrypt encrypted data (ciphertext) into its original form (plaintext) using a given cryptographic key and algorithm
3481,Path,,down,Path.down,,,6,Move downward in a path.
3482,URL.searchParams,,toString,URL.searchParams.toString,,,Others,Converts the URL parameters to a string.
3483,Date.events,,emit,Date.events.emit,,,23,Event triggering or broadcasting mechanism.
3484,XMLHttpRequest,,XMLHttpRequest,XMLHttpRequest.XMLHttpRequest,XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.,,22,
3485,xmlHttpRequest,,open,xmlHttpRequest.open,"The XMLHttpRequest method open() initializes a newly-created request, or re-initializes an existing one.",,22,
3486,xmlHttpRequest,,setRequestHeader,xmlHttpRequest.setRequestHeader,"The XMLHttpRequest method setRequestHeader() sets the value of an HTTP request header. When using setRequestHeader(), you must call it after calling open(), but before calling send(). If this method is called several times with the same header, the values are merged into one single request header.",,25,
3487,xmlHttpRequest,,send,xmlHttpRequest.send,The XMLHttpRequest method send() sends the request to the server.,,23,
3488,fetch,,fetch,fetch.fetch,"The global fetch() method starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.",,20,
3491,URLSearchParams,,URLSearchParams,URLSearchParams.URLSearchParams,,,Others,Parse and manipulate URL query parameters in JavaScript.
3492,util,,loadFileConfigs,util.loadFileConfigs,,,Others,Loads configuration settings from a file.
3493,util,,extendDeep,util.extendDeep,,,Others,Deeply merges or clones objects and their properties.
3494,util,,attachProtoDeep,util.attachProtoDeep,,,Others,Attach prototype properties to nested objects.
3495,util,,runStrictnessChecks,util.runStrictnessChecks,,,Others,The function runs strictness validation checks.
3496,promise,,release,promise.release,,,Others,Releases resources or completes a pending operation.
3497,message,,isWarningSeverity,message.isWarningSeverity,,,Others,Determines if message has a warning severity.
3498,watcher,,isWatchingFile,watcher.isWatchingFile,,,Others,Determines if a file is currently being watched.
3499,stats.mtime,,valueOf,stats.mtime.valueOf,,,Others,Returns the primitive value of the object.
3500,message.diagnostics,,map,message.diagnostics.map,,,Others,Transforms array elements based on provided function.
3501,message.lints,,map,message.lints.map,,,Others,Transforms array elements.
3502,message,,getSeverity,message.getSeverity,,,Others,Retrieve the severity level of a message.
3503,message,,getFile,message.getFile,,,11,Retrieve a file from the message object.
3504,message,,getFormattedCode,message.getFormattedCode,,,Others,Formats and returns code in a specified style.
3505,message,,getCharacter,message.getCharacter,,,Others,Retrieve a specific character from a string.
3506,message,,getLine,message.getLine,,,Others,Retrieve a specific line from the message.
3507,context,,reportState,context.reportState,,,Others,Report current status or condition.
3508,context.request,,emit,context.request.emit,,,Others,Trigger an event or signal.
3509,event.data,,indexOf,event.data.indexOf,,,Others,Returns position of first occurrence of specified value.
3510,event.data,,slice,event.data.slice,,,Others,Extracts a portion of a sequence.
3511,WeakMap,,WeakMap,WeakMap.WeakMap,,,Others,Store objects with weakly held keys.
3512,WeakSet,,WeakSet,WeakSet.WeakSet,,,Others,Stores weakly held objects without preventing garbage collection.
3513,resolver,,_read,resolver._read,,,11,Reads data or information from a source.
3514,buf,,set,buf.set,,,Others,Assigns a value to a specified position.
3515,timers,,clearTimeout,timers.clearTimeout,,,Others,Clears a previously set timeout.
3516,Object.isPrototypeOf,,call,Object.isPrototypeOf.call,,,Others,Invoke function with specific `this` context.
3517,timers,,setTimeout,timers.setTimeout,,,Others,Delays execution of a function.
3518,message,,getClientId,message.getClientId,,,Others,"Retrieve the client's unique identifier."
3519,message,,getGuid,message.getGuid,,,28,Generates and returns a unique identifier.
3520,message,,getSubject,message.getSubject,,,24,Retrieve the subject of a message.
3521,message,,getReply,message.getReply,,,Others,Generate a response to a received message.
3522,message,,getData_asU8,message.getData_asU8,,,11,Retrieves data as an unsigned 8-bit array.
3523,message,,getConnId_asU8,message.getConnId_asU8,,,Others,Returns connection ID as an unsigned 8-bit integer array.
3524,message,,getSha256_asU8,message.getSha256_asU8,,,33,Returns SHA-256 hash as a Uint8Array.
3525,message,,getSequence,message.getSequence,,,Others,Retrieve or generate an ordered list or sequence.
3526,message,,getTimestamp,message.getTimestamp,,,Others,Returns the time when the message was created.
3527,message,,getRedelivered,message.getRedelivered,,,Others,Checks if the message has been redelivered.
3528,message,,getRedeliveryCount,message.getRedeliveryCount,,,Others,Tracks the number of message delivery attempts.
3529,message,,getCrc32,message.getCrc32,,,33,Calculates CRC32 checksum of a message.
3530,error,,info,error.info,,,Others,Provides detailed information about an error.
3531,dir,,dir,dir.dir,,,Others,Unknown
3532,error,,showSourceCode,error.showSourceCode,,,Others,Displays the source code of an error.
3533,path,,replaceInline,path.replaceInline,,,Others,Replace a part of the string inline.
3534,response.body,,pipeTo,response.body.pipeTo,,,38,Streams one data source into another destination.
3535,stream,,pause,stream.pause,,,Others,Pause the stream or ongoing process.
3536,stream,,_write,stream._write,,,17,Handles writing data to a stream.
3537,stream,,_writev,stream._writev,,,13,Aggregates multiple write requests into a single operation.
3538,buf.buffer,,slice,buf.buffer.slice,,,Others,Extracts a portion of the buffer.
3539,context,,getScope,context.getScope,,,Others,Retrieve or identify the current operational context.
3540,context,,markVariableAsUsed,context.markVariableAsUsed,,,Others,Marks a variable as utilized within the context.
3541,set,,toUpperCase,set.toUpperCase,,,Others,Converts a string to uppercase letters.
3542,path,,isAssignmentExpression,path.isAssignmentExpression,,,3,Determines if the path is an assignment expression.
3543,path,,isObjectProperty,path.isObjectProperty,,,Others,"Determines if path refers to an object's property."
3544,path,,isVariableDeclarator,path.isVariableDeclarator,,,Others,Identifies if a node is a variable declarator.
3545,path,,find,path.find,,,Others,Finds and returns the first matching element.
3546,before,,slice,before.slice,,,Others,Extracts a portion of an array or string.
3547,after,,slice,after.slice,,,Others,Extracts a portion of an array.
3548,context,,getTokenBefore,context.getTokenBefore,,,Others,Retrieve token preceding the current one.
3549,context,,getFirstToken,context.getFirstToken,,,Others,Returns the first token from the context.
3550,context,,getLastToken,context.getLastToken,,,Others,Retrieve the most recent token from context.
3551,context,,getTokenAfter,context.getTokenAfter,,,Others,Retrieve the next token after a specified position.
3552,context,,getAncestors,context.getAncestors,,,Others,Retrieve all ancestor elements of a given element.
3553,path.parameters,,some,path.parameters.some,,,Others,Tests if some elements pass a given condition.
3554,request.server,,table,request.server.table,,,Others,Unknown
3555,path,,isReferenced,path.isReferenced,,,3,Determines if a path is being referenced.
3556,path.scope,,getBindingIdentifier,path.scope.getBindingIdentifier,,,Others,Identifies variable bindings within a specific scope.
3557,path.parentPath,,isCallExpression,path.parentPath.isCallExpression,,,Others,Determines if the parent path is a call expression.
3558,ctx.set,,bind,ctx.set.bind,,,Others,Binds function to a specific context or object.
3559,ctx.req,,hasOwnProperty,ctx.req.hasOwnProperty,,,Others,Checks if object has a specific property.
3560,ctx,,convertTo,ctx.convertTo,,,Others,Convert data to a specified format or type.
3561,dir,,toUpperCase,dir.toUpperCase,,,Others,Convert string to uppercase.
3562,writeStream,,destroy,writeStream.destroy,,,17,Terminate or close the write stream.
3563,writeStream,,removeListener,writeStream.removeListener,,,Others,Removes a specified event listener.
3564,writeStream,,once,writeStream.once,,,Others,Executes a function only one time.
3565,promise,,_useContext,promise._useContext,,,Others,Provides context-specific behavior for promises.
3566,promise,,_withInput,promise._withInput,,,Others,Handles input within a promise-based workflow.
3567,promise,,_withError,promise._withError,,,Others,Handles promise rejections or errors during execution.
3568,XMLHttpRequest,,getAllResponseHeaders,XMLHttpRequest.getAllResponseHeaders,,,24,Returns all response headers from an XMLHttpRequest.
3569,error.stderr,,includes,error.stderr.includes,,,Others,Checks if a string contains a specified substring.
3570,error.stderr,,replace,error.stderr.replace,,,Others,Replace substring with another in a string.
3571,path.parentPath,,isBlockStatement,path.parentPath.isBlockStatement,,,3,Determines if the parent path is a block statement.
3572,path,,isVariableDeclaration,path.isVariableDeclaration,,,Others,Checks if the path is a variable declaration.
3573,it,,return,it.return,,,Others,Unknown
3574,path,,isFunctionDeclaration,path.isFunctionDeclaration,,,Others,Determines if a path represents a function declaration.
3575,path.scope,,crawl,path.scope.crawl,,,Others,Web pages data extraction or traversal.
3576,path,,isFunction,path.isFunction,,,Others,Determines if a value is a function.
3577,path,,visit,path.visit,,,Others,Traverses or processes nodes or elements in a path.
3578,path,,isForStatement,path.isForStatement,,,Others,"Determines if a node is a 'for' loop statement."
3579,path,,isFor,path.isFor,,,3,Determines if the path is for a specific purpose.
3580,path,,ensureBlock,path.ensureBlock,,,Others,Ensures a code block exists or is created.
3581,path,,isUpdateExpression,path.isUpdateExpression,,,3,Determines if the path is an update expression.
3582,path,,getBindingIdentifiers,path.getBindingIdentifiers,,,Others,Extracts variable names from a given code path.
3583,path,,isReturnStatement,path.isReturnStatement,,,Others,Checks if a node is a return statement.
3584,path,,isLoop,path.isLoop,,,3,Checks if a path contains a loop.
3585,path,,isCompletionRecord,path.isCompletionRecord,,,3,Determines if a path is a completion record.
3586,path.parentPath,,isFor,path.parentPath.isFor,,,3,Determines if the path is for a specific purpose.
3587,path.parentPath,,isUpdateExpression,path.parentPath.isUpdateExpression,,,Others,Determines if the node is an update expression.
3588,path.parentPath,,replaceWith,path.parentPath.replaceWith,,,Others,Replaces the selected element with another.
3589,os,,map,os.map,,,Others,Transforms array elements using a provided function.
3590,process.stdout,,on,process.stdout.on,,,Others,Event listener for handling specific events.
3591,immediate,,immediate,immediate.immediate,,,37,Immediate execution of a function or task.
3592,TextDecoder,,TextDecoder,TextDecoder.TextDecoder,,,30,TextDecoder: Decodes text from binary data.
3593,TextEncoder,,TextEncoder,TextEncoder.TextEncoder,,,29,Encodes text into UTF-8 byte streams.
3594,ctx,,vary,ctx.vary,,,Others,Unknown
3595,XMLHttpRequest,,overrideMimeType,XMLHttpRequest.overrideMimeType,,,Others,Change the MIME type of an XMLHttpRequest.
3596,buffer,,get,buffer.get,,,11,Retrieves data from the buffer.
3597,Event,,Event,Event.Event,,,Others,Unknown
3598,promise.then,,bind,promise.then.bind,,,Others,    Binds context to a function.
3599,path.scope,,generateDeclaredUidIdentifier,path.scope.generateDeclaredUidIdentifier,,,28,Generates a unique identifier within a given scope.
3600,path,,getFunctionParent,path.getFunctionParent,,,3,Returns the parent function of a specified path.
3601,buffer,,constructor,buffer.constructor,,,Others,Returns the constructor function of the buffer.
3602,mime.charsets,,lookup,mime.charsets.lookup,,,Others,Determine character set based on provided MIME type.
3603,RegExp.$2,,trim,RegExp.$2.trim,,,Others,Removes whitespace from both ends of a string.
3604,server,,unregister,server.unregister,,,Others,Unregisters a previously registered entity or service.
3605,process,,off,process.off,,,Others,Unknown
3606,path.resolve,,bind,path.resolve.bind,,,Others,Binds a function to a specific context.
3607,module.require,,apply,module.require.apply,,,Others,Invoke a function with a specified `this` context.
3608,Buffer,,fill,Buffer.fill,,,28,Fills buffer with specified value.
3610,crypto,,pseudoRandomBytes,crypto.pseudoRandomBytes,,,33,Generates cryptographically secure pseudo-random bytes.
3611,ArrayBuffer,,ArrayBuffer,ArrayBuffer.ArrayBuffer,,,28,"
Memory buffer for raw binary data."
3612,context,,setTransform,context.setTransform,,,33,Sets the transformation matrix for drawing operations.
3613,path,,toAbs,path.toAbs,,,1,Converts relative path to absolute path.
3614,message.body,,toLowerCase,message.body.toLowerCase,,,Others,Converts string to lowercase letters.
3615,path,,replaceAll,path.replaceAll,,,Others,Replace all occurrences of a substring.
3616,fs,,r,fs.r,,,Others,Unknown
3617,path,,t,path.t,,,Others,Unknown
3618,process.execArgv,,some,process.execArgv.some,,,3,Checks if any elements pass a test.
3619,ctx.plugin,,getTokenNode,ctx.plugin.getTokenNode,,,40,Retrieve a specific token node from the context.
3620,ctx,,createStatementNode,ctx.createStatementNode,,,40,Creates a new statement node in context.
3621,ctx,,createNode,ctx.createNode,,,Others,Creates a new node within the context provided.
3622,ctx,,getParentByType,ctx.getParentByType,,,Others,Finds parent node of a specified type.
3623,ctx,,createArrowFunctionNode,ctx.createArrowFunctionNode,,,40,Creates an arrow function node in context.
3624,ctx,,createThisNode,ctx.createThisNode,,,Others,Create a new node within the current context.
3625,ctx,,createIdentifierNode,ctx.createIdentifierNode,,,39,Creates a new identifier node in context.
3626,ctx,,createMemberNode,ctx.createMemberNode,,,23,Create a new member node in the context.
3627,ctx,,createCalleeNode,ctx.createCalleeNode,,,40,Creates a node for a function call.
3628,ctx,,genUniVarRefs,ctx.genUniVarRefs,,,Others,Generate unique variable references.
3629,ctx,,createLiteralNode,ctx.createLiteralNode,,,Others,Creates a node representing a literal value.
3630,ctx,,createDeclaratorNode,ctx.createDeclaratorNode,,,Others,Unknown
3631,ctx,,createDeclarationNode,ctx.createDeclarationNode,,,40,Creates a node for variable or function declaration.
3632,ctx,,createAssignmentNode,ctx.createAssignmentNode,,,40,Creates a node representing an assignment operation.
3633,ctx,,createSequenceNode,ctx.createSequenceNode,,,39,Create a sequence of nodes within context.
3634,ctx,,createParenthesNode,ctx.createParenthesNode,,,33,Creates a node representing a parenthesis.
3635,emitter,,addEventListener,emitter.addEventListener,,,23,Registers an event handler for a specified event.
3636,emitter,,removeEventListener,emitter.removeEventListener,,,28,Removes a previously registered event listener.
3637,string,,join,string.join,,,Others,Combines array elements into a single string.
3638,Worker,,Worker,Worker.Worker,,,Others,Unknown
3639,XMLHttpRequest,,addEventListener,XMLHttpRequest.addEventListener,,,Others,Registers an event handler for the specified event.
3640,emitter.off,,bind,emitter.off.bind,,,40,Creates a bound function with specific context.
3641,emitter.on,,bind,emitter.on.bind,,,33,Binds a function to an object.
3642,emitter.once,,bind,emitter.once.bind,,,40,Binds function to specific context or object.
3643,buffer,,writeUInt8,buffer.writeUInt8,,,13,Writes an 8-bit unsigned integer to a buffer.
3644,generator,,gen,generator.gen,,,40,Generates data or values programmatically.
3645,request.url,,query,request.url.query,,,Others,Retrieve URL query parameters.
3646,request.url,,toString,request.url.toString,,,29,Converts object to string representation.
3647,document,,clearParent,document.clearParent,,,10,Removes all child elements from a parent.
3648,document,,getName,document.getName,,,Others,Returns the name of the document.
3649,document,,getId,document.getId,,,Others,Retrieve element by unique identifier.
3650,document,,addParent,document.addParent,,,25,Adds a parent element to the document.
3651,event,,destructor,event.destructor,,,39,Cleans up or finalizes resources.
3652,buf,,substring,buf.substring,,,Others,Extracts a portion of a string.
3653,event.data,,toString,event.data.toString,,,29,Converts data to a string representation.
3654,message,,getOutputPrefixType,message.getOutputPrefixType,,,Others,Retrieve the type of output prefix.
3655,message,,getKeyMaterialType,message.getKeyMaterialType,,,33,Returns the type of key material.
3656,ctx,,createBufferSource,ctx.createBufferSource,,,17,Create audio buffer source for playback.
3657,ctx,,createGain,ctx.createGain,,,33,Create and control audio gain (volume).
3658,message,,getPrimaryKeyId,message.getPrimaryKeyId,,,35,Retrieve the primary key identifier.
3659,message,,getKeyList,message.getKeyList,,,33,Retrieve list of keys from `message` object.
3660,ctx,,createMediaElementSource,ctx.createMediaElementSource,,,33,Creates audio source from media element.
3661,message,,getKeyData,message.getKeyData,,,33,Retrieve specific data associated with a key.
3662,message,,getStatus,message.getStatus,,,Others,Returns the status of a message.
3663,message,,getKeyId,message.getKeyId,,,Others,Retrieves the identifier for a specific key.
3664,stream,,readVarInt,stream.readVarInt,,,33,Reads a variable-length integer from a stream.
3665,stream,,readInt8,stream.readInt8,,,11,Reads an 8-bit signed integer.
3666,stream,,readInt16,stream.readInt16,,,11,Reads a 16-bit signed integer.
3667,message,,toJson,message.toJson,,,30,Converts message object to JSON string format.
3668,Response,,Response,Response.Response,,,Others,Unknown
3669,buffer,,pause,buffer.pause,,,Others,"Pauses the buffer's current activity."
3670,response,,removeAllListeners,response.removeAllListeners,,,33,Removes all event listeners from the response object.
3671,stream,,readInt32,stream.readInt32,,,11,Reads a 32-bit integer from a stream.
3672,json.actions,,filter,json.actions.filter,,,22,Filters elements based on specified criteria.
3673,message.tokens,,map,message.tokens.map,,,Others,Transforms each element in `message.tokens`.
3674,test.errors,,map,test.errors.map,,,39,Transforms array elements.
3675,test.retryReasons,,map,test.retryReasons.map,,,Others,Transforms array elements based on a provided function.
3676,context.testPath,,replace,context.testPath.replace,,,Others,Replaces specified parts of a string.
3677,test.testPath,,slice,test.testPath.slice,,,Others,Extracts a portion of a string or array.
3678,stats.stats,,reduce,stats.stats.reduce,,,40,Aggregates array elements into a single value.
3679,module,,startsWith,module.startsWith,,,Others,Checks if a string begins with specified characters.
3680,buffer,,play,buffer.play,,,38,Play multimedia content.
3681,Blob,,Blob,Blob.Blob,,,Others,Unknown
3682,request,,isCtxSerializable,request.isCtxSerializable,,,33,Determines if context is serializable.
3683,request,,addCtx,request.addCtx,,,Others,Adds context to the request.
3684,Error,,pretty,Error.pretty,,,39,Formats error messages in a readable way.
3685,Error,,parse,Error.parse,,,Others,Parsing error messages.
3686,session.channelId,,split,session.channelId.split,,,Others,Divides a string into an array of substrings.
3687,ctx.model,,get,ctx.model.get,,,40,Retrieve a value from a model.
3688,ctx.path,,endsWith,ctx.path.endsWith,,,Others,Checks if a string ends with specified characters.
3689,ctx.model,,create,ctx.model.create,,,Others,Create a new record or entity.
3690,path,,getSibling,path.getSibling,,,10,Returns a sibling node or element in a structure.
3691,path.parentPath,,pushContext,path.parentPath.pushContext,,,1,Add a new context to the parent path.
3692,path.parentPath,,visit,path.parentPath.visit,,,1,Traverse or inspect elements within a specified path.
3693,path.parentPath,,popContext,path.parentPath.popContext,,,Others,Removes the last context from the context stack.
3694,path.parentPath,,isExpressionStatement,path.parentPath.isExpressionStatement,,,Others,Checks if the parent path is an expression statement.
3695,path.parentPath,,getSibling,path.parentPath.getSibling,,,Others,Unknown
3696,http.METHODS,,map,http.METHODS.map,,,Others,Transforms each element in an array.
3697,Set.renamed,,has,Set.renamed.has,,,Others,Checks if a value exists in the set.
3698,Set.renamed,,get,Set.renamed.get,,,Others,Retrieves an element from the set.
3699,path.parentPath,,isObjectProperty,path.parentPath.isObjectProperty,,,Others,"Determines if the path is an object's property."
3700,path.parentPath,,isAssignmentExpression,path.parentPath.isAssignmentExpression,,,Others,"Determines if the path's parent is an assignment expression."
3701,ctx,,private,ctx.private,,,Others,Unknown
3702,request,,jar,request.jar,,,Others,Manages HTTP cookies for requests.
3703,document.activeElement,,getAttribute,document.activeElement.getAttribute,,,Others,Retrieve specified attribute value from an HTML element.
3704,url,,toLowerCase,url.toLowerCase,,,Others,Converts all characters to lowercase.
3705,message.message,,includes,message.message.includes,,,Others,Checks if a string contains a specified substring.
3706,it,,includes,it.includes,,,10,Checks if a value exists within an array.
3707,process.stdin,,unpipe,process.stdin.unpipe,,,38,Disconnects readable stream from writable destination.
3708,object,,map,object.map,,,40,Transforms array elements based on provided function.
3709,server.moduleGraph,,invalidateModule,server.moduleGraph.invalidateModule,,,Others,Invalidates or refreshes the specified module in the graph.
3710,message,,getRequestInit,message.getRequestInit,,,Others,Initializes HTTP request settings.
3711,message,,getHeaders,message.getHeaders,,,28,Retrieve message headers.
3712,message,,getPayloadInfo,message.getPayloadInfo,,,33,"Retrieve details about the message's payload."
3713,message,,getTrailers,message.getTrailers,,,22,Retrieve message trailers or metadata.
3714,tracker,,trackEvent,tracker.trackEvent,,,Others,Track and log specified user or system events.
3715,message,,getMethodfullname,message.getMethodfullname,,,Others,Retrieve full name of a method.
3716,message,,getDeadline,message.getDeadline,,,33,Retrieve or calculate the deadline for a task.
3717,message,,getConnectionid,message.getConnectionid,,,33,Retrieve connection identifier.
3718,message,,getMetadataList,message.getMetadataList,,,3,Retrieve a list of metadata.
3719,crypto.subtle,,deriveKey,crypto.subtle.deriveKey,,,33,Derives cryptographic key from given input material.
3720,DataView,,DataView,DataView.DataView,,,28,Allows low-level manipulation of ArrayBuffer data.
3721,number,,match,number.match,,,35,Matches a string against a regular expression.
3722,EventTarget,,EventTarget,EventTarget.EventTarget,,,23,Handles event listener registration and dispatching.
3723,iterator,,done,iterator.done,,,Others,Indicates if the iteration is complete.
3724,iterator,,peek,iterator.peek,,,33,Returns the next element without advancing the iterator.
3725,ctx,,status,ctx.status,,,Others,HTTP response status code
3726,ctx,,text,ctx.text,,,Others,Displays or manipulates text content.
3727,ctx,,html,ctx.html,,,Others,The function of the code `html` is: Render HTML content
3728,ctx,,json,ctx.json,,,28,Returns JSON response based on provided data.
3729,context,,nothingSent,context.nothingSent,,,Others,Unknown
3730,ctx,,authorization,ctx.authorization,,,Others,Authorization check for user access permissions.
3731,ctx.response,,write,ctx.response.write,,,38,Outputs data to the response stream.
3732,None.on,,bind,None.on.bind,,,Others,Unknown
3733,None.once,,bind,None.once.bind,,,38,Binds function to specific context or object.
3734,None.removeListener,,bind,None.removeListener.bind,,,40,Binds function context to a specific object.
3735,None.emit,,bind,None.emit.bind,,,40,Binds function to specific context or object.
3736,ctx,,file,ctx.file,,,11,File operation or manipulation method
3737,path,,isJSXClosingElement,path.isJSXClosingElement,,,Others,Determines if a node is a JSX closing element.
3738,path,,isJSXIdentifier,path.isJSXIdentifier,,,Others,Checks if the path is a JSX identifier.
3739,path.parentPath,,isJSXAttribute,path.parentPath.isJSXAttribute,,,Others,Identifies if a node is a JSX attribute.
3740,path,,isJSXMemberExpression,path.isJSXMemberExpression,,,Others,Determines if the path is a JSX member expression.
3741,path,,isImmutable,path.isImmutable,,,Others,Unknown
3742,path,,isPure,path.isPure,,,1,Determines if a path is unmodified or unchanged.
3743,path,,evaluate,path.evaluate,,,Others,Evaluates or calculates a specified value or expression.
3744,path,,hoist,path.hoist,,,Others,Unknown
3745,module.children,,forEach,module.children.forEach,,,Others,Iterates over each item in an array.
3746,message,,forEach,message.forEach,,,Others,It iterates through each element in an array.
3747,Set,,o,Set.o,,,Others,Unknown
3748,document,,positionAt,document.positionAt,,,Others,"Determines or retrieves element's position within document."
3749,error.message,,toString,error.message.toString,,,33,Converts object to string representation.
3750,test,,ok,test.ok,,,40,Verifies if a condition is true.
3751,test,,done,test.done,,,38,Marks the completion of a test.
3752,test,,expect,test.expect,,,35,Validates test outcomes against expected results.
3753,test,,equals,test.equals,,,40,Compares two values for equality.
3754,Map,,_render,Map._render,,,23,"Renders or updates the map's visual representation."
3755,context,,addHelper,context.addHelper,,,39,Adds a helper function to the context.
3756,document,,getText,document.getText,,,11,Retrieve the text content of a document.
3757,channel.port2,,postMessage,channel.port2.postMessage,,,23,Send a message to another context.
3758,channel,,assertQueue,channel.assertQueue,,,33,Ensures the queue exists or creates it.
3759,channel,,prefetch,channel.prefetch,,,36,Fetches data in advance.
3760,channel,,consume,channel.consume,,,33,Consume messages from a channel or queue.
3761,channel,,assertExchange,channel.assertExchange,,,Others,Declare or verify the existence of an exchange.
3762,channel,,bindQueue,channel.bindQueue,,,Others,Binds a queue to an exchange.
3763,symbol.color,,join,symbol.color.join,,,Others,Combines elements into a single string.
3764,symbol.haloColor,,join,symbol.haloColor.join,,,Others,Combines array elements into a single string.
3765,symbol.backgroundColor,,join,symbol.backgroundColor.join,,,Others,Combines array elements into a single string.
3766,symbol.borderLineColor,,join,symbol.borderLineColor.join,,,Others,Combines array elements into a single string.
3767,stream,,flush,stream.flush,,,33,Clears any buffered data in the stream.
3768,writeStream,,emit,writeStream.emit,,,Others,Trigger an event to listeners
3769,events,,concat,events.concat,,,40,Combines multiple arrays or values.
3770,context.store,,get,context.store.get,,,38,Retrieve a value from the storage.
3771,symbol,,getCenter,symbol.getCenter,,,39,Calculates or retrieves the central point of a symbol.
3772,symbol,,getTop,symbol.getTop,,,29,Retrieve the highest or top element/value.
3773,symbol,,getRight,symbol.getRight,,,Others,Retrieve right-side or right-most element or value.
3774,symbol,,getLeft,symbol.getLeft,,,Others,Returns the left position of a symbol.
3775,symbol.topLines,,push,symbol.topLines.push,,,Others,Adds elements to the end of an array.
3776,symbol.leftLines,,push,symbol.leftLines.push,,,10,Adds an element to the end of an array.
3777,symbol.rightLines,,push,symbol.rightLines.push,,,10,Adds an element to the array.
3778,socket,,listenerCount,socket.listenerCount,,,39,Number of listeners for a specific event.
3779,request,,requestLib,request.requestLib,,,Others,Unknown
3780,ctx.path,,match,ctx.path.match,,,Others,Pattern matching against a path or string.
3781,buf,,substr,buf.substr,,,15,Extracts a substring from a string.
3782,document,,data,document.data,,,Others,Unknown
3783,Test,,assert,Test.assert,,,Others,Validate test conditions or assumptions.
3784,document.currentScript,,getAttribute,document.currentScript.getAttribute,,,38,"Retrieve specified attribute's value from an element."
3785,process,,run,process.run,,,35,Execute a specified process or task.
3786,object,,value,object.value,,,30,"Retrieve or modify an object's property."
3787,session,,overwriteCommand,session.overwriteCommand,,,39,Overwrite or replace an existing command.
3788,Array,,add,Array.add,,,10,Adds an element to an array.
3789,Array,,set,Array.set,,,Others,Sets a value in an array.
3790,context.app,,createListeners,context.app.createListeners,,,Others,Creates event handlers for the application.
3791,context.run,,pause,context.run.pause,,,33,Pauses the ongoing process or operation.
3792,path,,isClassProperty,path.isClassProperty,,,Others,Determines if path represents a class property.
3793,module.extern,,push,module.extern.push,,,10,Add element to the end of an array.
3794,module.data,,push,module.data.push,,,10,Adds an element to the end of an array.
3795,process.stdout,,moveCursor,process.stdout.moveCursor,,,28,Moves the cursor position in the terminal.
3796,error.stack,,indexOf,error.stack.indexOf,,,Others,Finds index of substring within a string.
3797,response.data,,replace,response.data.replace,,,Others,String replacement method.
3798,Object,,deepExtend,Object.deepExtend,,,40,Extend objects deeply by merging properties recursively.
3799,hash,,setEncoding,hash.setEncoding,,,33,Sets the character encoding for the hash.
3800,XMLHttpRequest.responseText,,replace,XMLHttpRequest.responseText.replace,,,39,String substitution or replacement.
3801,generator.path,,endsWith,generator.path.endsWith,,,Others,Checks if a string ends with specified characters.
3802,event.key,,indexOf,event.key.indexOf,,,Others,Finds the position of a specified value.
3803,event.key,,split,event.key.split,,,Others,Splits string into an array of substrings.
3804,process.stdout,,setMaxListeners,process.stdout.setMaxListeners,,,Others,Sets the maximum number of event listeners.
3805,stream.Readable,,fromWeb,stream.Readable.fromWeb,,,33,Convert web streams to Node.js readable streams.
3806,TypedArray.name,,slice,TypedArray.name.slice,,,Others,Extracts a section of an array.
3807,TypedArray,,TypedArray,TypedArray.TypedArray,,,Others,Unknown
3808,context,,log,context.log,,,22,Logging or recording information.
3809,socket.broadcast,,to,socket.broadcast.to,,,23,Send message to specific room or clients.
3810,number,,trim,number.trim,,,Others,Removes whitespace from both ends of a string.
3811,message,,deferReply,message.deferReply,,,23,Pauses response to a message temporarily.
3812,Run,,list,Run.list,,,29,Retrieve or display a collection of items.
3813,Start,,toString,Start.toString,,,29,Converts object to string representation.
3814,End,,toString,End.toString,,,30,Converts an object to its string representation.
3815,generator.printer,,enqueue,generator.printer.enqueue,,,23,Queue an item for printing.
3816,context.typesUsed,,filter,context.typesUsed.filter,,,35,Filters elements based on specified condition.
3817,generator,,typeAliasForEnumType,generator.typeAliasForEnumType,,,40,Creates type alias for an enum type.
3818,generator,,typeAliasForInputObjectType,generator.typeAliasForInputObjectType,,,Others,Unknown
3819,stream,,resolve,stream.resolve,,,6,Resolve a promise or URL.
3820,util,,objectKeys,util.objectKeys,,,Others,Returns all keys of an object.
3821,ctx,,addIssue,ctx.addIssue,,,36,Adds an issue to a context.
3822,event,,split,event.split,,,Others,Split a string into an array.
3823,document.documentElement,,removeAttribute,document.documentElement.removeAttribute,,,10,Removes a specified attribute from an element.
3824,generator,,printOnNewline,generator.printOnNewline,,,39,Prints each item on a new line.
3825,generator,,withinBlock,generator.withinBlock,,,40,Encapsulates functionality within a specific code block.
3826,console,,war,console.war,,,Others,Unknown
3827,generator,,import,generator.import,,,Others,Imports a module or library.
3828,generator,,fileHeader,generator.fileHeader,,,1,Generates header information for a file.
3829,generator,,interfacesForOperation,generator.interfacesForOperation,,,Others,Unknown
3830,generator.printer,,printAndClear,generator.printer.printAndClear,,,33,Prints data and clears the buffer.
3831,Date.push,,apply,Date.push.apply,,,Others,Allows array-like arguments in function calls.
3832,ctx.assets,,upload,ctx.assets.upload,,,Others,Upload files or assets to a server.
3833,buffer,,take,buffer.take,,,11,Retrieve a specified number of elements from the buffer.
3834,document.body,,getBoundingClientRect,document.body.getBoundingClientRect,,,Others,"Returns element's size and position relative to viewport."
3835,context,,keys,context.keys,,,Others,"Returns an array of the object's own property names."
3836,buf,,map,buf.map,,,10,Transforms array elements according to a provided function.
3837,error.message,,replace,error.message.replace,,,Others,Replace substring(s) within a string.
3838,queryString,,split,queryString.split,,,Others,Splits a string into an array of substrings.
3839,Server,,Server,Server.Server,,,Others,Unknown
3840,module,,router,module.router,,,33,Routing requests to appropriate handlers.
3841,module,,socketsEnabled,module.socketsEnabled,,,27,Enable or check the status of network sockets.
3842,tty,,WriteStream,tty.WriteStream,,,33,Writes data to a TTY (terminal) stream.
3843,tty,,ReadStream,tty.ReadStream,,,11,Reads input from a TTY (terminal) stream.
3844,url,,search,url.search,,,Others,Retrieves query string from URL.
3845,map,,setSourceContent,map.setSourceContent,,,23,Sets the content for a specified source.
3846,Set,,splice,Set.splice,,,Others,Remove and/or add items in an array.
3847,ctx,,getConfig,ctx.getConfig,,,Others,Retrieve configuration settings.
3848,ctx.log,,info,ctx.log.info,,,25,Logs informational messages.
3849,ctx.Request,,request,ctx.Request.request,,,Others,Unknown
3850,stream,,Duplex,stream.Duplex,,,17,A stream that can read and write.
3851,Date,,filter,Date.filter,,,Others,Filters dates based on specified criteria.
3852,request,,method,request.method,,,Others,HTTP request method type
3853,request,,postData,request.postData,,,23,Sends data to a specified server endpoint.
3854,promise._then,,forEach,promise._then.forEach,,,Others,Iterates over elements in an array or collection.
3855,buffer,,unshift,buffer.unshift,,,Others,Adds elements to the beginning of an array.
3856,Request.requests,,hasOwnProperty,Request.requests.hasOwnProperty,,,Others,Checks if an object has a specific property.
3857,module.globalPaths,,map,module.globalPaths.map,,,15,Transforms each element in an array.
3858,Socket,,Socket,Socket.Socket,,,22,Establishes and manages network communication.
3859,document.documentElement,,getBoundingClientRect,document.documentElement.getBoundingClientRect,,,Others,"Returns element's size and position relative to viewport."
3860,Request.url,,startsWith,Request.url.startsWith,,,Others,Checks if a string starts with specified characters.
3861,Request.headers,,entries,Request.headers.entries,,,34,Iterates key-value pairs from the headers object.
3862,dir,,trim,dir.trim,,,Others,Removes whitespace from both ends of a string.
3863,process.stdin,,removeListener,process.stdin.removeListener,,,34,Remove an event listener from an event.
3864,path,,pushContainer,path.pushContainer,,,Others,Adds an element to a specified container.
3865,path.parentPath,,get,path.parentPath.get,,,3,Retrieve the value from the parent path.
3866,ctx.a,,clearRect,ctx.a.clearRect,,,40,Clears a specified rectangular area.
3867,ctx.b,,fillRect,ctx.b.fillRect,,,33,Draws a filled rectangle on a canvas.
3868,ctx.a,,save,ctx.a.save,,,14,Save data or state to a storage mechanism.
3869,ctx.a,,beginPath,ctx.a.beginPath,,,1,Start a new path for drawing operations.
3870,ctx.a,,translate,ctx.a.translate,,,33,Transforms the origin of the canvas context.
3871,ctx.a,,rotate,ctx.a.rotate,,,Others,Rotates the canvas coordinate system.
3872,ctx.a,,strokeRect,ctx.a.strokeRect,,,10,"Draws a rectangle's outline."
3873,ctx.a,,closePath,ctx.a.closePath,,,1,Closes the current path being drawn.
3874,ctx.a,,restore,ctx.a.restore,,,33,Restores previously saved canvas state.
3875,https,,originalHttpsRequest,https.originalHttpsRequest,,,Others,Unknown
3876,ctx.b,,save,ctx.b.save,,,8,Save data or state to storage.
3877,ctx.b,,drawImage,ctx.b.drawImage,,,23,Draws an image onto the canvas.
3878,ctx.b,,restore,ctx.b.restore,,,33,Restores the previous state of the context.
3879,ctx.a,,arc,ctx.a.arc,,,27,Draws an arc or circle on the canvas.
3880,ctx.a,,stroke,ctx.a.stroke,,,Others,Draws the outline of a shape.
3881,ctx.a,,drawImage,ctx.a.drawImage,,,39,Renders an image onto a canvas.
3882,ctx.a,,createLinearGradient,ctx.a.createLinearGradient,,,23,Creates a linear color gradient for canvas.
3883,ctx.a,,moveTo,ctx.a.moveTo,,,1,Sets the starting point for a path.
3884,ctx.a,,lineTo,ctx.a.lineTo,,,34,Draws a line to a specified point.
3885,ctx.a,,fill,ctx.a.fill,,,35,Fills a specified area with color or pattern.
3886,context,,add,context.add,,,Others,Add two or more items together.
3887,context.parentKey,,toString,context.parentKey.toString,,,29,Converts object to string representation.
3888,context,,getKeyFromValue,context.getKeyFromValue,,,Others,Retrieve key corresponding to a specified value.
3889,context,,getFromKey,context.getFromKey,,,33,Retrieve value associated with a specific key.
3890,document.documentElement,,scrollTo,document.documentElement.scrollTo,,,28,Scrolls to a specific position within the document.
3891,ctx.puppeteer,,render,ctx.puppeteer.render,,,23,Render content in a Puppeteer context.
3892,handler,,processMessage,handler.processMessage,,,Others,Processes and handles incoming messages or data.
3893,process.stdout,,getColorDepth,process.stdout.getColorDepth,,,4,Determines the color depth of the terminal.
3894,event.direct_message_events,,shift,event.direct_message_events.shift,,,Others,Removes the first element of an array.
3895,process.send,,bind,process.send.bind,,,40,Binds a function to a specific context.
3896,worker,,isBusy,worker.isBusy,,,Others,Checks if the worker is currently occupied.
3897,worker,,stop,worker.stop,,,33,"Stops the worker's operation or activity."
3898,worker,,canAcceptWork,worker.canAcceptWork,,,23,Determines if the worker is available for tasks.
3899,worker,,isOperational,worker.isOperational,,,39,Determines if the worker is currently functioning properly.
3900,response,,setResult,response.setResult,,,33,Set the result of a response.
3901,worker,,handle,worker.handle,,,37,Handle incoming tasks or requests.
3902,stream,,getWindowSize,stream.getWindowSize,,,4,Retrieve current dimensions of the window or viewport.
3903,process,,listenerCount,process.listenerCount,,,Others,Count of registered event listeners.
3904,crypto.subtle,,generateKey,crypto.subtle.generateKey,,,33,Generate cryptographic key for secure operations.
3905,crypto.subtle,,exportKey,crypto.subtle.exportKey,,,33,Export cryptographic key material.
3906,socket,,removeListener,socket.removeListener,,,Others,Removes a specified event listener from an object.
3907,path.scope,,generateUid,path.scope.generateUid,,,26,Generate a unique identifier within a given scope.
3908,response,,substring,response.substring,,,Others,Extracts a portion of a string.
3909,response,,lastIndexOf,response.lastIndexOf,,,24,Finds last occurrence index of a specified value.
3910,response.results,,map,response.results.map,,,Others,Transforms each element in a collection.
3911,Path,,Path,Path.Path,,,1,Creates or manipulates file/directory paths.
3912,events,,split,events.split,,,Others,Splits a string into an array.
3913,promise,,cancel,promise.cancel,,,33,Cancel pending promise execution or operation.
3914,json,,splice,json.splice,,,15,Modify array elements.
3915,socket,,reset,socket.reset,,,23,Reset socket connection settings or state.
3916,stream,,setEncoding,stream.setEncoding,,,33,Sets character encoding for data stream.
3917,message,,map,message.map,,,Others,Transforms elements in an array.
3918,URL.pathname,,endsWith,URL.pathname.endsWith,,,Others,Checks if the pathname ends with a specified string.
3919,response,,cookie,response.cookie,,,25,Sets HTTP response cookies.
3920,response,,clearCookie,response.clearCookie,,,7,Removes specified cookie from the client.
3921,events,,join,events.join,,,Others,Combines elements into a single string.
3922,ctx,,flush,ctx.flush,,,33,Clear buffered data.
3923,event.internalListeners,,push,event.internalListeners.push,,,10,Add an element to an array.
3924,context,,push,context.push,,,10,Adds an element to the end of an array.
3925,error,,insertAfter,error.insertAfter,,,10,Insert element after specified target element.
3926,document.body,,remove,document.body.remove,,,Others,Removes the element from the DOM.
3927,document.body,,removeAttribute,document.body.removeAttribute,,,10,Removes a specified attribute from an element.
3928,ctx,,http,ctx.http,,,20,Handles HTTP requests and responses.
3929,path.gates,,slice,path.gates.slice,,,Others,Extracts a portion of an array.
3930,Intl,,Collator,Intl.Collator,,,39,Collator compares and sorts strings based on locale.
3931,context,,join,context.join,,,15,Combines array elements into a single string.
3932,console,,readLine,console.readLine,,,2,Reads input from the console.
3933,child_process,,run,child_process.run,,,35,Execute a child process or command.
3934,Promise,,map,Promise.map,,,40,Transforms array values using a provided function.
3935,event.currentState,,toUpperCase,event.currentState.toUpperCase,,,Others,Converts string to uppercase letters.
3936,event.previousState,,toUpperCase,event.previousState.toUpperCase,,,Others,Converts a string to uppercase letters.
3937,document.body,,setAttribute,document.body.setAttribute,,,25,Sets an attribute on an HTML element.
3938,event.channelName,,startsWith,event.channelName.startsWith,,,Others,Checks if a string starts with specified characters.
3939,events,,filter,events.filter,,,39,Filters elements based on a specified condition.
3940,console.trace,,bind,console.trace.bind,,,40,Binds a function to a specific context.
3941,console.debug,,bind,console.debug.bind,,,40,Binds function to a specific context.
3942,context,,callback,context.callback,,,39,Handles asynchronous function execution and response.
3943,context.worker,,terminate,context.worker.terminate,,,35,"Terminates the worker's execution."
3944,context.cc,,doAttrib,context.cc.doAttrib,,,39,Attribute modification or assignment.
3945,context.key,,indexOf,context.key.indexOf,,,Others,Returns the position of the first occurrence.
3946,ctx.console,,addListener,ctx.console.addListener,,,23,Adds a listener for specified events.
3947,ctx,,intersect,ctx.intersect,,,Others,Finds common elements between two sets or arrays.
3948,ctx.database,,createUser,ctx.database.createUser,,,39,Creates a new user in the database.
3949,ctx.silk,,decode,ctx.silk.decode,,,34,Decodes encoded data in the context provided.
3950,Function,,func,Function.func,,,Others,Unknown
3951,typedArray,,_getter,typedArray._getter,,,11,Retrieve value from typed array at specified index.
3952,array,,get,array.get,,,10,Retrieve an element from the array.
3953,script.src,,split,script.src.split,,,Others,Splits a string into array elements.
3954,server,,add,server.add,,,39,Adds elements or values to a collection or structure.
3955,channel,,nack,channel.nack,,,38,Rejects and requeues a message in a channel.
3956,document,,appendChild,document.appendChild,,,Others,Add a child element to a parent element.
3957,server.middlewares,,use,server.middlewares.use,,,Others,"Handles middleware integration in the server's request/response cycle."
3958,Math,,signum,Math.signum,,,33,Returns the sign of a number.
3959,session,,session,session.session,,,33,Session management or stateful user interaction.
3960,ctx.scope,,dispose,ctx.scope.dispose,,,Others,Release resources or clean up context.
3961,context.logger,,warn,context.logger.warn,,,37,Log warning message to console.
3962,URL.hostname,,split,URL.hostname.split,,,Others,Splits a string into an array.
3963,crypto.randomUUID,,bind,crypto.randomUUID.bind,,,39,Binds a function to a specific context.
3964,script,,script,script.script,,,Others,Unknown
3965,worker,,recognize,worker.recognize,,,Others,Recognizes patterns or objects.
3966,Reflect.construct,,apply,Reflect.construct.apply,,,40,Invokes a function with a specified context.
3967,ctx.logger,,info,ctx.logger.info,,,Others,Logs informational messages.
3968,request,,map,request.map,,,Others,Transforms elements in an array.
3969,ctx.logger,,error,ctx.logger.error,,,25,Logs error messages or issues for debugging purposes.
3970,path.basename,,replace,path.basename.replace,,,Others,Replaces specified string or pattern within a string.
3971,context,,onBeforeRequest,context.onBeforeRequest,,,Others,Intercepts web requests before they are made.
3972,crypto,,Hash,crypto.Hash,,,33,Creates a cryptographic hash of input data.
3973,session.qq,,sendMessage,session.qq.sendMessage,,,23,Send a message to a specified recipient.
3974,stats,,catch,stats.catch,,,35,Handles errors in promise-based operations.
3975,context,,renderChildren,context.renderChildren,,,28,Render child elements within a parent component.
3976,array.buffer,,slice,array.buffer.slice,,,11,Extracts a portion of an array buffer.
3977,event,,remove,event.remove,,,Others,Removes an event from a list or system.
3978,event,,postInsert,event.postInsert,,,33,Handles actions after a data insertion event.
3979,event,,set,event.set,,,33,Sets the value of an event.
3980,hash,,startsWith,hash.startsWith,,,Others,Checks if string begins with specified characters
3981,fs.promises,,appendFile,fs.promises.appendFile,,,14,Appends data to a file.
3982,tracker.widgetAdded,,connect,tracker.widgetAdded.connect,,,Others,Establishes a connection for event handling.
3984,generator,,extendPackage,generator.extendPackage,,,Others,Extend package configuration or dependencies.
3985,generator,,render,generator.render,,,23,Render visual representation of data or UI elements.
3986,XMLHttpRequest.responseText,,trim,XMLHttpRequest.responseText.trim,,,Others,Removes whitespace from both ends of a string.
3987,message,,padStart,message.padStart,,,Others,Adds padding to the start of a string.
3988,message.content,,trim,message.content.trim,,,Others,Removes whitespace from both ends of a string.
3989,request,,to_json_string,request.to_json_string,,,30,Convert request object to a JSON string.
3990,document.body,,getElementsByTagName,document.body.getElementsByTagName,,,33,Selects elements by tag name.
3991,module,,originalSource,module.originalSource,,,35,Original source retrieval function.
3992,session.bot,,getGuild,session.bot.getGuild,,,23,"Retrieve a guild's information from the bot."
3993,message,,endsWith,message.endsWith,,,Others,Checks if a string ends with specified characters.
3994,session.content,,startsWith,session.content.startsWith,,,Others,Checks if content begins with specified substring.
3995,event,,fn,event.fn,,,Others,Unknown
3996,message.parentNode,,removeChild,message.parentNode.removeChild,,,Others,Removes a child node from the parent node.
3997,number,,padStart,number.padStart,,,Others,Adds padding to the start of a string.
3998,Object,,filter,Object.filter,,,Others,Filters elements of an object based on a condition.
3999,map,,toString,map.toString,,,29,Converts map to a string representation.
4000,context,,map,context.map,,,40,Transforms elements in a collection based on a function.
4001,Intl,,ListFormat,Intl.ListFormat,,,Others,Formats list items in a localized manner.
4002,fs.realpathSync,,native,fs.realpathSync.native,,,1,Returns the canonicalized absolute pathname.
4003,ctx,,getCabinDevServerInfo,ctx.getCabinDevServerInfo,,,26,Retrieve development server information for the cabin.
4004,ctx.response,,set,ctx.response.set,,,20,Set an HTTP response header value.
4005,http,,toLowerCase,http.toLowerCase,,,Others,Converts string to lowercase letters.
4006,ctx,,cron,ctx.cron,,,39,Schedules recurring tasks at specified intervals.
4007,ctx.websocket,,close,ctx.websocket.close,,,25,Closes the websocket connection.
4008,event.target,,setCustomValidity,event.target.setCustomValidity,,,39,Sets a custom validation message for an input.
4009,server,,getAccount,server.getAccount,,,26,Retrieve account information from the server.
4010,VM,,VM,VM.VM,,,Others,Unknown
4011,Promise,,address,Promise.address,,,Others,Unknown
4012,socket,,leave,socket.leave,,,23,Leave a socket room or channel.
4013,socket,,removeEventListener,socket.removeEventListener,,,33,Removes an event listener from a target.
4014,before,,get,before.get,,,36,Fetches a value or resource.
4015,after,,get,after.get,,,11,Retrieve or access a value or data.
4016,document.querySelectorAll,,bind,document.querySelectorAll.bind,,,40,Creates a new bound function.
4017,array,,trim,array.trim,,,15,Removes whitespace from array elements.
4018,Promise,,toLowerCase,Promise.toLowerCase,,,40,Converts a string to lowercase letters.
4019,Worker.value,,addEventListener,Worker.value.addEventListener,,,23,Registers an event listener on a target.
4020,error,,split,error.split,,,Others,Splits a string into an array.
4021,context,,finalCallback,context.finalCallback,,,35,Handles final processing or cleanup after asynchronous tasks.
4022,Error,,launchFiber,Error.launchFiber,,,Others,Launches a concurrent or asynchronous task.
4023,Error,,for,Error.for,,,Others,Unknown
4024,dir,,match,dir.match,,,35,Pattern or string comparison function.
4025,message.author,,displayAvatarURL,message.author.displayAvatarURL,,,23,"Displays the URL of the user's avatar image."
4026,context.ui,,getTranslate,context.ui.getTranslate,,,23,Retrieve translation data from the user interface.
4027,context,,addHook,context.addHook,,,38,Adds a function to be executed at a specific event.
4028,Domain,,Domain,Domain.Domain,,,Others,Unknown
4029,response,,setStatusCode,response.setStatusCode,,,20,Sets the HTTP response status code.
4030,response,,setBody,response.setBody,,,33,Sets or updates the response body content.
4031,response.keys,,find,response.keys.find,,,33,Finds the first matching element in a collection.
4032,path.posix,,parse,path.posix.parse,,,1,Parses a file path into its components.
4033,https,,getSync,https.getSync,,,20,Performs synchronous HTTPS GET request.
4034,Promise.claimedIdentifier,,match,Promise.claimedIdentifier.match,,,Others,Unknown
4035,document.title,,match,document.title.match,,,22,Matches a pattern in the string.
4036,URL.pathname,,matchAll,URL.pathname.matchAll,,,Others,Returns all matches of a pattern in a string.
4037,Session,,_getCsrftoken,Session._getCsrftoken,,,28,Retrieve or generate a CSRF token.
4038,Session,,_getXtoken,Session._getXtoken,,,23,Retrieve authentication or session token.
4039,module.id,,lastIndexOf,module.id.lastIndexOf,,,Others,Find the last occurrence index of a substring.
4040,module.id,,slice,module.id.slice,,,Others,Extracts a portion of a string or array.
4041,domain,,includes,domain.includes,,,Others,Checks if a value is within a given array or string.
4042,event.TargetLogGroupName,,replace,event.TargetLogGroupName.replace,,,Others,Replace specified values in a string.
4044,request.headers,,set,request.headers.set,,,34,Set or update a header value.
4045,request.headers,,raw,request.headers.raw,,,33,Converts headers to raw format for processing.
4046,request.method,,toLowerCase,request.method.toLowerCase,,,Others,Converts a string to lowercase letters.
4047,server,,transformRequest,server.transformRequest,,,23,Transforms and processes incoming server requests.
4048,run,,stop,run.stop,,,35,Stop the current run process.
4049,readline.output,,write,readline.output.write,,,33,Outputs text to the console or specified stream.
4050,Server.logger,,info,Server.logger.info,,,Others,Logs informational messages to the server.
4051,context,,preCommand,context.preCommand,,,37,    Executes preliminary actions before a command.
4052,context,,onSuccess,context.onSuccess,,,33,Handles successful completion of an operation or request.
4053,port,,openPort,port.openPort,,,23,Open a communication or data transfer port.
4054,port,,closePort,port.closePort,,,23,Closes the specified port connection.
4055,response,,destroy,response.destroy,,,Others,Unknown
4056,socket,,use,socket.use,,,23,Middleware attachment or usage function for the socket.
4057,RegExp.prototype,,isPrototypeOf,RegExp.prototype.isPrototypeOf,,,Others,"Determines if an object exists in another's prototype chain."
4058,document.currentScript,,hasAttribute,document.currentScript.hasAttribute,,,Others,    Checks if an attribute exists.
4059,ctx.nodeSchema,,getProperty,ctx.nodeSchema.getProperty,,,Others,Returns the value of a specified property.
4060,ctx.store,,getComponentSchema,ctx.store.getComponentSchema,,,Others,Retrieve the schema of a specified component.
4061,ctx.store,,getComponentComputedProperties,ctx.store.getComponentComputedProperties,,,Others,Retrieve computed properties of a component.
4062,init,,opts,init.opts,,,Others,Configuration options initialization
4063,request,,getArgByIndex,request.getArgByIndex,,,33,Retrieve argument at specified index from function call.
4064,Promise,,isDirectory,Promise.isDirectory,,,3,Checks if a path is a directory.
4065,Promise,,isFile,Promise.isFile,,,Others,Unknown
4066,ctx.http,,axios,ctx.http.axios,,,20,HTTP client for making requests.
4067,ctx,,log,ctx.log,,,33,Logs information or messages.
4068,ctx,,initialCompletion,ctx.initialCompletion,,,36,Initial setup or first-time execution of a process.
4069,context,,newPage,context.newPage,,,23,Creates a new browser page or tab.
4070,init,,call,init.call,,,Others,Unknown
4071,util,,uint8ArrayToHex,util.uint8ArrayToHex,,,30,Converts Uint8Array data to hexadecimal string.
4072,context.linestylefilter,,getRegexpFilter,context.linestylefilter.getRegexpFilter,,,33,Returns a regular expression-based filter.
4073,events,,call,events.call,,,40,Invoke a function with a specified context.
4074,document.head,,insertAdjacentHTML,document.head.insertAdjacentHTML,,,33,Inserts HTML at a specified position.
4075,stream.buffer,,slice,stream.buffer.slice,,,11,Extracts a portion of the buffer.
4076,document.documentElement,,matches,document.documentElement.matches,,,Others,Checks if an element matches a CSS selector.
4077,domain,,indexOf,domain.indexOf,,,Others,Finds index of first occurrence.
4078,document.body,,click,document.body.click,,,23,Simulates a mouse click on the document body.
4079,event,,asJson,event.asJson,,,34,Converts event data to JSON format.
4080,map,,getSize,map.getSize,,,28,Returns the size of the map.
4081,it,,entries,it.entries,,,28,Returns key-value pairs of an object or array.
4082,it,,toLowerCase,it.toLowerCase,,,30,Converts string to lowercase.
4083,it,,toUpperCase,it.toUpperCase,,,Others,Converts a string to uppercase letters.
4084,Function,,map,Function.map,,,33,Transforms array elements based on a provided function.
4085,Function,,filter,Function.filter,,,Others,Filters elements based on a condition.
4086,ctx.result,,display,ctx.result.display,,,39,Displays results or data on the screen.
4087,ctx.result,,error,ctx.result.error,,,35,Handles or represents an error condition.
4088,Map,,CDPPage,Map.CDPPage,,,Others,Unknown
4089,serializer,,transform,serializer.transform,,,29,Transforms data into a different format or structure.
4090,handler,,setColor,handler.setColor,,,40,Sets the color of an element or object.
4091,handler,,getEl,handler.getEl,,,24,Retrieve an element from the DOM.
4092,handler,,getColor,handler.getColor,,,39,Returns the color value or representation.
4093,handler,,getValue,handler.getValue,,,Others,Retrieve a specific value from an object or structure.
4094,handler,,deselect,handler.deselect,,,15,Deselects or unselects an item or element.
4095,Promise,,loadHtmlContent,Promise.loadHtmlContent,,,Others,Load HTML content asynchronously into a webpage.
4096,path,,calcTransformMatrix,path.calcTransformMatrix,,,40,Calculates a transformation matrix for given path.
4097,object,,calcTransformMatrix,object.calcTransformMatrix,,,Others,"Calculate object's transformation matrix."
4098,path,,clone,path.clone,,,1,Creates a copy of the path object.
4099,event.target,,getBoundingClientRect,event.target.getBoundingClientRect,,,Others,"Returns element's size and position relative to viewport."
4100,certificate.subject,,indexOf,certificate.subject.indexOf,,,Others,Finds the index of a substring.
4101,context.request,,clone,context.request.clone,,,33,Creates a copy of the request object.
4102,server.watcher,,on,server.watcher.on,,,22,Handles event registration or event listening mechanism.
4103,json.entities,,push,json.entities.push,,,Others,Adds an element to the end of an array.
4104,json.vertices,,push,json.vertices.push,,,10,Adds an element to the array.
4105,json.control_points,,push,json.control_points.push,,,Others,Adds an element to the end of an array.
4106,json.corners,,push,json.corners.push,,,10,Adds an element to the array.
4107,json.seed_points,,push,json.seed_points.push,,,10,Adds an element to an array.
4108,json.fit_point,,push,json.fit_point.push,,,Others,Adds an element to an array.
4109,json.knot_value,,push,json.knot_value.push,,,10,Adds an element to the array.
4110,json.element_params,,push,json.element_params.push,,,Others,Adds an element to an array.
4111,json.area_params,,push,json.area_params.push,,,Others,Adds an element to the end of an array.
4112,context.network,,sendRequest,context.network.sendRequest,,,20,Send a network request.
4113,request.path,,split,request.path.split,,,Others,Splits a string into an array.
4114,message,,includes,message.includes,,,Others,Checks if a substring exists within a string.
4115,Util,,isAddEvent,Util.isAddEvent,,,23,Determines if an event should be added.
4116,Util,,isRemoveEvent,Util.isRemoveEvent,,,Others,Determines if an event is a remove action.
4117,Util,,isChangeEvent,Util.isChangeEvent,,,Others,Determines if an event signifies a change.
4118,module,,wrap,module.wrap,,,35,"Wraps a module's code execution environment."
4119,socket,,of,socket.of,,,Others,Creates or retrieves a named socket namespace.
4120,event,,toString,event.toString,,,29,Convert object to string representation.
4121,ctx,,bail,ctx.bail,,,39,Exit early on encountering an error or condition.
4122,event.request,,clone,event.request.clone,,,33,Creates a duplicate of the `event.request` object.
4123,Promise,,content,Promise.content,,,Others,Unknown
4124,Promise,,close,Promise.close,,,Others,Unknown
4125,Promise,,pdf,Promise.pdf,,,Others,Unknown
4126,Map,,devare,Map.devare,,,Others,Unknown
4127,context,,writeTemp,context.writeTemp,,,Others,Stores or logs temporary data or information.
4128,ctx.file,,endsWith,ctx.file.endsWith,,,Others,Checks if a string ends with specified characters.
4129,document,,contains,document.contains,,,Others,Checks if a node is a descendant.
4130,handler,,removeCommand,handler.removeCommand,,,37,Remove a specific command from a handler.
4131,handler,,register,handler.register,,,39,Registers a handler for a specific purpose.
4132,buffer,,equals,buffer.equals,,,33,Compares if two buffers are identical.
4133,response,,forEach,response.forEach,,,10,Iterates through each element of an array.
4134,buffer,,readBigUInt64LE,buffer.readBigUInt64LE,,,11,Reads a 64-bit unsigned integer in little-endian format.
4135,array,,notNullItems,array.notNullItems,,,Others,Filters array to exclude null items.
4136,Object.prototype,,hasOwnProperty,Object.prototype.hasOwnProperty,,,Others,Determines if an object has a specific property.
4137,WritableStream,,WritableStream,WritableStream.WritableStream,,,17,Stream for writing data.
4138,PerformanceObserver,,PerformanceObserver,PerformanceObserver.PerformanceObserver,,,26,PerformanceObserver: Monitors performance-related events and metrics.
4139,Function.prototype,,call,Function.prototype.call,,,40,Invokes a function with a specified `this` context.
4140,response.contentType,,match,response.contentType.match,,,6,Matches a pattern in the contentType string.
4141,context.context,,getEnvironmentId,context.context.getEnvironmentId,,,26,Retrieve the current environment identifier.
4142,context.context,,getExtraInfo,context.context.getExtraInfo,,,Others,Retrieve additional contextual information.
4143,request,,getAllResponseHeaders,request.getAllResponseHeaders,,,20,Retrieves all HTTP response headers from a request.
4144,emitter,,dispatchEvent,emitter.dispatchEvent,,,23,Triggers a specified event on an element.
4145,process.stdout,,clearScreenDown,process.stdout.clearScreenDown,,,Others,Clears the console screen below the cursor.
4146,port,,forEach,port.forEach,,,10,Iterates over each element in an array.
4147,script.attrs,,push,script.attrs.push,,,Others,Appends elements to the end of an array.
4148,socket,,terminate,socket.terminate,,,23,Terminate a socket connection.
4149,server.Name,,includes,server.Name.includes,,,Others,Checks if a string contains a specified substring.
4150,RegExp,,filter,RegExp.filter,,,6,    Filters elements matching the regular expression.
4151,resolver,,make,resolver.make,,,40,Creates or constructs an object or instance.
4152,ctx.timer,,setInterval,ctx.timer.setInterval,,,33,Repeatedly executes a function at specified intervals.
4153,error.stdout,,indexOf,error.stdout.indexOf,,,Others,Find the position of a substring.
4154,date,,startOf,date.startOf,,,23,Calculates the start of a specified time period.
4155,Function.bind,,call,Function.bind.call,,,40,Invoke a function with a specified `this` context.
4156,response.insights,,every,response.insights.every,,,Others,Checks if all elements satisfy a condition.
4157,channel,,dispose,channel.dispose,,,17,Releases resources or cleans up the channel.
4158,asynciterator,,UnionIterator,asynciterator.UnionIterator,,,33,Combines multiple async iterators into a single async iterator.
4159,script.js,,map,script.js.map,,,40,Transforms array elements based on provided callback function.
4160,SharedArrayBuffer,,SharedArrayBuffer,SharedArrayBuffer.SharedArrayBuffer,,,38,SharedArrayBuffer: Memory sharing between threads.
4161,Promise,,filter,Promise.filter,,,33,Filters elements of a promise-based collection.
4162,init,,split,init.split,,,Others,Splits a string into an array of substrings.
4163,Error,,checkPageInformations,Error.checkPageInformations,,,6,Validate and verify details on the current webpage.
4164,init,,replace,init.replace,,,Others,Replace part of a string with another string.
4165,it,,emit,it.emit,,,Others,Triggers an event or signal.
4166,message,,message,message.message,,,Others,Unknown
4167,it,,destroy,it.destroy,,,Others,Unknown
4168,Module,,cmsGetColorSpace,Module.cmsGetColorSpace,,,26,Retrieve or identify color space information.
4169,buffer.Buffer,,isBuffer,buffer.Buffer.isBuffer,,,Others,Determines if the argument is a Buffer.
4170,buffer.Buffer,,concat,buffer.Buffer.concat,,,28,Combines multiple buffers into one.
4171,JSON,,parseConst,JSON.parseConst,,,33,Parses constants from JSON strings.
4172,context.chains,,map,context.chains.map,,,Others,Transforms elements in an array-like structure.
4173,iterator,,getProperty,iterator.getProperty,,,Others,Retrieve a specific property from an object.
4174,iterator,,transform,iterator.transform,,,40,Transforms elements within an iterator.
4175,URL.hostname,,slice,URL.hostname.slice,,,Others,Extracts a section of a string.
4176,it,,transform,it.transform,,,33,Transforms data from one format to another.
4177,context,,addImplements,context.addImplements,,,40,Adds interface implementation to a class or object.
4178,context,,addExport,context.addExport,,,Others,Add export functionality to the given context object.
4179,ctx.silk,,isSilk,ctx.silk.isSilk,,,Others,Determines if the context is related to silk.
4180,it,,startsWith,it.startsWith,,,Others,Checks if a string starts with specified characters.
4181,context,,addAccepts,context.addAccepts,,,Others,    Sets acceptable request/response content types.
4182,context,,addImport,context.addImport,,,Others,Adds an import statement to the context.
4183,context,,slice,context.slice,,,Others,Extracts a portion of an array.
4184,fs,,isFile,fs.isFile,,,Others,Checks if the path is a file.
4185,fs,,startsWith,fs.startsWith,,,Others,Checks if a string starts with specified characters.
4186,fs,,toString,fs.toString,,,30,Converts object to string representation.
4187,fs,,e,fs.e,,,Others,Unknown
4188,server,,register,server.register,,,23,Registers a service or endpoint to the server.
4189,init,,apply,init.apply,,,40,Function application with context and arguments.
4190,server.auth,,strategy,server.auth.strategy,,,25,Authentication configuration method for server.
4191,request.cookieAuth,,clear,request.cookieAuth.clear,,,Others,Clears stored authentication cookies.
4192,request.cookieAuth,,set,request.cookieAuth.set,,,23,Set a cookie for authentication purposes.
4193,PerformanceObserver.supportedEntryTypes,,includes,PerformanceObserver.supportedEntryTypes.includes,,,Others,Determines if an array contains a specific value.
4194,event.target,,hasAttribute,event.target.hasAttribute,,,Others,Checks if an attribute exists on the element.
4195,process,,disconnect,process.disconnect,,,35,Disconnects from a process or service.
4196,URL.href,,replace,URL.href.replace,,,Others,Replace part of a string with another string.
4197,worker,,fetch,worker.fetch,,,23,Data retrieval from a specified source.
4198,it,,setProperty,it.setProperty,,,40,Sets a property value on an object.
4199,server,,expose,server.expose,,,23,Expose server functionality or data to clients.
4200,server,,ext,server.ext,,,25,Middleware extension point for the server.
4201,server,,log,server.log,,,34,Logs messages or information to a specific destination.
4202,server,,inject,server.inject,,,20,Injects dependencies or simulates HTTP requests.
4203,context.state,,push,context.state.push,,,10,Adds an element to an array.
4204,RegExp.five,,test,RegExp.five.test,,,Others,Validates a string against a regular expression pattern.
4205,RegExp.four,,test,RegExp.four.test,,,28,Tests if string matches regular expression pattern.
4206,RegExp.blockFour,,test,RegExp.blockFour.test,,,6,Test if a string matches a pattern.
4207,RegExp.three,,test,RegExp.three.test,,,6,Tests if a string matches a pattern.
4208,RegExp.blockThree,,test,RegExp.blockThree.test,,,Others,Test if string matches regular expression.
4209,RegExp.two,,test,RegExp.two.test,,,33,Determines if a string matches the regular expression.
4210,start,,plus,start.plus,,,33,Addition of two values.
4211,start,,withZoneSameLocal,start.withZoneSameLocal,,,Others,Adjusts time to a different time zone.
4212,start,,plusHours,start.plusHours,,,Others,Unknown
4213,end,,plusHours,end.plusHours,,,Others,Adds hours to a given time or date object.
4214,start,,format,start.format,,,39,Formats data or text into a specific structure.
4215,start,,minus,start.minus,,,34,Subtracts one value from another.
4216,ctx,,resolve,ctx.resolve,,,40,Resolves a promise or reference.
4217,response,,hasOwnProperty,response.hasOwnProperty,,,Others,Checks if an object has a specific property.
4218,event.rawUrl,,replace,event.rawUrl.replace,,,Others,Replace part of a string with another string.
4219,error,,success,error.success,,,Others,Success indicates successful completion or positive result.
4220,Object.categories,,push,Object.categories.push,,,Others,Add an element to the end of an array.
4221,Set,,includes,Set.includes,,,Others,Checks if a set contains a specified element.
4222,server,,kill,server.kill,,,35,Terminate or stop the server process.
4223,watcher,,emit,watcher.emit,,,33,Trigger an event with specified arguments.
4224,ctx.registry,,has,ctx.registry.has,,,40,Checks if an item exists in the registry.
4225,context.app,,dialog,context.app.dialog,,,33,Dialog handling or management functionality.
4226,context.request,,getMethod,context.request.getMethod,,,Others,Retrieves the HTTP request method.
4227,context.request,,getBody,context.request.getBody,,,33,"Retrieve the request's body content."
4228,context.request,,getName,context.request.getName,,,23,Returns the name of the request.
4229,context.request,,setBody,context.request.setBody,,,Others,Sets the request body content.
4230,context.request,,setUrl,context.request.setUrl,,,23,"Set the request's URL."
4231,context.response,,setBody,context.response.setBody,,,33,Sets the response body content.
4232,context.app,,showGenericModalDialog,context.app.showGenericModalDialog,,,23,Displays a general-purpose modal dialog box.
4233,context.flow,,get,context.flow.get,,,33,Retrieve a value from the flow context.
4234,generator._sources,,has,generator._sources.has,,,Others,Checks if a source exists in the generator.
4235,generator,,setSourceContent,generator.setSourceContent,,,Others,Set the content for the source.
4236,generator._sources,,add,generator._sources.add,,,Others,Add an element to a set.
4237,generator,,addMapping,generator.addMapping,,,Others,Add a new mapping to the generator.
4238,path,,getAttribute,path.getAttribute,,,33,Returns specified attribute value of an element.
4239,request,,match,request.match,,,Others,Pattern matching against a string or value.
4240,request,,startsWith,request.startsWith,,,Others,Checks if string begins with specified characters.
4241,map,,whenReady,map.whenReady,,,38,Executes when the map is fully loaded.
4242,test,,toGherkin,test.toGherkin,,,39,Converts test data or scenarios into Gherkin format.
4243,channel,,startsWith,channel.startsWith,,,Others,Checks if a string starts with specified characters.
4244,fetch.winners,,includes,fetch.winners.includes,,,Others,Determines if an array contains a specified element.
4245,url.hash,,slice,url.hash.slice,,,Others,Extracts a portion of a string.
4246,context,,save,context.save,,,33,Save data to storage or context.
4247,context,,restore,context.restore,,,Others,Restore previous state of canvas context.
4248,map,,setCenter,map.setCenter,,,28,Sets the central point of the map.
4249,document.body,,dispatchEvent,document.body.dispatchEvent,,,23,Triggers an event on the specified element.
4250,map,,setOptions,map.setOptions,,,25,Set map configuration options or parameters.
4251,ctx,,__,ctx.__,,,Others,Unknown
4252,ctx.cookies,,get,ctx.cookies.get,,,26,Retrieve a cookie value by name.
4253,ctx,,curl,ctx.curl,,,20,HTTP request utility function in JavaScript.
4254,ctx.mongo,,db,ctx.mongo.db,,,33,Database interaction method.
4255,ctx.db,,collection,ctx.db.collection,,,28,Accesses a specific collection within the database.
4256,Object,,call,Object.call,,,40,Invoke a function with a specified `this` context.
4257,ctx,,provide,ctx.provide,,,4,Provide dependencies or values to a context.
4258,process,,dlopen,process.dlopen,,,Others,Load and execute a shared library.
4259,timers,,setInterval,timers.setInterval,,,33,Repeatedly executes a function at specified time intervals.
4260,FinalizationRegistry,,FinalizationRegistry,FinalizationRegistry.FinalizationRegistry,,,39,Resource cleanup post-object finalization.
4261,response,,toObject,response.toObject,,,30,Converts data to an object format.
4262,string,,forEach,string.forEach,,,Others,Iterates over each element in a collection.
4263,event,,execute,event.execute,,,39,Execute a specific event or action.
4264,ReadableStream,,ReadableStream,ReadableStream.ReadableStream,,,18,Creates a readable stream for handling data.
4265,WeakRef,,WeakRef,WeakRef.WeakRef,,,33,WeakRef: Holds weak reference to an object.
4266,request.url,,endsWith,request.url.endsWith,,,Others,Checks if the URL ends with a specified substring.
4267,ctx.headManager,,collectFromHelmet,ctx.headManager.collectFromHelmet,,,6,Collects metadata from Helmet.
4268,ctx.sheet,,getStyleElement,ctx.sheet.getStyleElement,,,Others,Retrieve a style element from the context.
4269,ctx.sheet,,seal,ctx.sheet.seal,,,40,Seal an object to prevent modifications.
4270,ctx,,render,ctx.render,,,33,Render content to the screen or output.
4271,ctx,,updatePage,ctx.updatePage,,,25,Update webpage content or elements dynamically.
4272,Set.js,,add,Set.js.add,,,Others,Adds an element to the set.
4273,Set.css,,add,Set.css.add,,,33,Add a CSS class to an element.
4274,ctx.updateSubTypes,,push,ctx.updateSubTypes.push,,,10,Adds an element to an array.
4275,child_process,,hasOwnProperty,child_process.hasOwnProperty,,,Others,Checks if an object has a specific property.
4276,ctx.method,,toLowerCase,ctx.method.toLowerCase,,,Others,Converts a string to lowercase letters.
4277,document.documentElement,,getAttribute,document.documentElement.getAttribute,,,28,"Retrieve specified attribute's value."
4278,path.join,,bind,path.join.bind,,,Others,    Binds function to a specific `this` context.
4279,Error,,run,Error.run,,,35,Executes or initiates a process or operation.
4280,ctx.commitedFiles,,join,ctx.commitedFiles.join,,,Others,Combines elements into a single string.
4281,Util,,sortBatchCommands,Util.sortBatchCommands,,,35,Sorts commands in a batch by specific criteria.
4282,event,,startsWith,event.startsWith,,,Others,Checks if a string begins with specified characters.
4283,watcher,,size,watcher.size,,,Others,Returns the number of elements being watched.
4284,watcher.requests,,values,watcher.requests.values,,,Others,"Extracts values from an object's properties."
4285,watcher.ssh,,exec,watcher.ssh.exec,,,35,Execute SSH commands.
4286,request.re,,test,request.re.test,,,23,The `test` method checks for a pattern match.
4287,request.event,,emit,request.event.emit,,,38,Trigger an event with specified arguments.
4288,asynciterator,,EmptyIterator,asynciterator.EmptyIterator,,,38,Returns an asynchronous iterator with no elements.
4289,None.event,,once,None.event.once,,,23,Executes event listener a single time.
4290,tty,,replace,tty.replace,,,Others,Replace specified substring with another substring.
4291,timers,,clearInterval,timers.clearInterval,,,38,Stops a running interval timer.
4292,document.querySelectorAll,,apply,document.querySelectorAll.apply,,,40,Method to invoke a function with a specified `this` context.
4293,map,,resolve,map.resolve,,,34,Resolve a value or promise to a result.
4294,test.title,,join,test.title.join,,,33,Combines array elements into a single string.
4295,Module,,cwrap,Module.cwrap,,,35,Wraps C functions for JavaScript usage.
4296,response.pois,,map,response.pois.map,,,15,Transforms array elements.
4297,response.previews,,reduce,response.previews.reduce,,,33,Aggregates array elements into a single value.
4298,response.contexts,,map,response.contexts.map,,,40,Transforms array elements using a provided function.
4299,Date,,getTimeISO,Date.getTimeISO,,,34,Returns ISO formatted date-time string.
4300,Date,,getDateISO,Date.getDateISO,,,Others,Returns date in ISO format.
4301,Date,,getMonthISO,Date.getMonthISO,,,Others,Returns the month in ISO format.
4302,Date,,chunkSubstr,Date.chunkSubstr,,,Others,Splits string into smaller substrings of specified length.
4303,Date,,strToDate,Date.strToDate,,,34,Convert string to Date object.
4304,document,,createCDATASection,document.createCDATASection,,,Others,Creates a CDATA section in an XML document.
4305,document.implementation,,createDocumentType,document.implementation.createDocumentType,,,39,Creates a new Document Type node.
4306,ctx.router,,getRoutes,ctx.router.getRoutes,,,Others,Retrieve defined routes in the router.
4307,date,,day,date.day,,,Others,Unknown
4308,Date.domObjects,,push,Date.domObjects.push,,,10,Adds an element to the end of an array.
4309,server,,addListener,server.addListener,,,22,Adds a handler for a specified event.
4310,server,,substr,server.substr,,,Others,Extracts a substring from a string.
4311,server,,restart,server.restart,,,35,Restart the server or application process.
4312,event.clipboardData,,setData,event.clipboardData.setData,,,28,Sets data in the clipboard.
4313,process.stdout,,end,process.stdout.end,,,17,Terminates the writable stream.
4314,path,,isUnaryExpression,path.isUnaryExpression,,,Others,Determines if the path is a unary expression.
4315,path.parentPath,,insertBefore,path.parentPath.insertBefore,,,Others,Insert node before the specified node.
4316,event.data,,substring,event.data.substring,,,Others,Extracts part of a string.
4317,event.data,,match,event.data.match,,,Others,Pattern matching or text search function.
4318,url,,trim,url.trim,,,Others,Removes whitespace from both ends of a string.
4319,ctx,,watch,ctx.watch,,,38,Monitors changes or events in context.
4320,net,,includes,net.includes,,,Others,Checks if an element is present in an array.
4321,net,,split,net.split,,,Others,Splits a string into an array.
4322,module,,getStacks,module.getStacks,,,23,Retrieve or generate a collection of stack data.
4323,net,,trim,net.trim,,,Others,Removes whitespace from both ends of a string.
4324,URL.pathname,,substr,URL.pathname.substr,,,Others,Extracts part of a string.
4325,context.api,,validateResponse,context.api.validateResponse,,,Others,Validate the correctness of an API response.
4326,context.api,,mockResponseForOperation,context.api.mockResponseForOperation,,,Others,Mock API response for a specific operation.
4327,error,,valueOf,error.valueOf,,,33,Returns the primitive value of an object.
4328,Promise,,cleanup,Promise.cleanup,,,35,Releases resources or performs cleanup operations.
4329,map,,fetch,map.fetch,,,23,Retrieve data from a specified source.
4330,path,,at,path.at,,,Others,Returns the element at the specified index.
4331,object.Fp,,isValid,object.Fp.isValid,,,Others,    Validates the object or its properties.
4332,fs.promises,,utimesSync,fs.promises.utimesSync,,,1,Updates file timestamps synchronously.
4333,fs.promises,,open,fs.promises.open,,,19,Open a file for reading or writing operations.
4334,ctx,,switchToHttp,ctx.switchToHttp,,,Others,Switch context to HTTP request/response handling.
4335,fs.promises,,mkdtemp,fs.promises.mkdtemp,,,10,Create temporary directory with unique name.
4336,ctx.database,,getUser,ctx.database.getUser,,,Others,Retrieve user information from the database.
4337,Message,,__wrap,Message.__wrap,,,33,Wraps or encapsulates a message object or data.
4338,Message,,__unwrap,Message.__unwrap,,,33,Extracts content from a wrapped message object.
4339,init,,initZombieGuildStoreInfo,init.initZombieGuildStoreInfo,,,Others,Initialize zombie-themed guild store information.
4340,init,,initZombieUserStoreInfo,init.initZombieUserStoreInfo,,,29,Initialize zombie user store information.
4341,json.children,,map,json.children.map,,,Others,Transforms array elements and returns a new array.
4342,URL,,has,URL.has,,,38,Checks if URL contains a specified parameter.
4343,URL,,get,URL.get,,,20,Retrieve data from a specified URL.
4344,event,,toJSON,event.toJSON,,,30,Converts object to JSON representation.
4345,ctx,,execute,ctx.execute,,,37,Executes a specified action or command.
4346,serializer,,serializeToString,serializer.serializeToString,,,29,Convert object to a string representation.
4347,console,,Console,console.Console,,,Others,Unknown
4348,channel,,stop,channel.stop,,,36,"Stop the channel's operation or activity."
4349,dir,,toLowerCase,dir.toLowerCase,,,40,Converts string characters to lowercase.
4350,response.caseless,,has,response.caseless.has,,,Others,Check for presence of a caseless key.
4351,response.caseless,,get,response.caseless.get,,,Others,Retrieve value associated with a key.
4352,response,,resume,response.resume,,,33,Resume a paused operation or process.
4353,event.args,,entries,event.args.entries,,,Others,Returns key-value pairs of an object.
4354,os,,localStorage,os.localStorage,,,Others,Local data storage in web browsers.
4355,response.Parameters,,map,response.Parameters.map,,,40,Transforms each element in an array.
4356,event.target,,querySelector,event.target.querySelector,,,Others,Selects the first matching element within the target.
4357,event.target,,cloneNode,event.target.cloneNode,,,7,Create a copy of the specified node.
4358,date,,map,date.map,,,33,Transforms each element in a collection.
4359,script,,setAttribute,script.setAttribute,,,Others,Sets an attribute on an HTML element.
4360,ctx,,serialize,ctx.serialize,,,29,Convert data into a storable or transmittable format.
4361,process.stdin,,off,process.stdin.off,,,40,Removes an event listener from the stream.
4362,Object.method,,toLowerCase,Object.method.toLowerCase,,,40,Converts a string to lowercase letters.
4363,Object,,callback,Object.callback,,,Others,Unknown
4364,BroadcastChannel,,BroadcastChannel,BroadcastChannel.BroadcastChannel,,,23,BroadcastChannel: Facilitates communication between different browsing contexts.
4365,event.notification,,close,event.notification.close,,,Others,Closes the event notification.
4366,ctx,,getTransform,ctx.getTransform,,,33,Returns the current transformation matrix.
4367,stream.read,,bind,stream.read.bind,,,40,Binds function to specific context or object.
4368,fs.promises,,rmdir,fs.promises.rmdir,,,8,Remove a directory.
4369,context.value,,indexOf,context.value.indexOf,,,Others,Find position of value in a list.
4370,server,,stop,server.stop,,,27,Stops the server from running.
4371,server.terminator,,terminate,server.terminator.terminate,,,27,Terminate server operations and close connections.
4372,context,,breakpointBarrier,context.breakpointBarrier,,,39,Synchronization point for debugging or execution control.
4373,stats,,update,stats.update,,,39,Update statistical data or metrics.
4374,response.Rows,,filter,response.Rows.filter,,,Others,Filters array elements based on a condition.
4375,response.datePrices,,map,response.datePrices.map,,,Others,Transforms array elements.
4376,fetch,,bind,fetch.bind,,,Others,Binds a function to a specific context.
4377,test.annotations,,find,test.annotations.find,,,28,Locate an item in test.annotations collection.
4378,context.store,,put,context.store.put,,,33,Stores or updates a value in the context.
4379,cluster,,getCenter,cluster.getCenter,,,Others,Returns the central point of the cluster.
4380,map.current,,setCenter,map.current.setCenter,,,Others,"Sets the map's center coordinates."
4381,map.current,,setZoom,map.current.setZoom,,,23,"Adjusts the map's zoom level."
4382,map.current,,addListener,map.current.addListener,,,33,Adds an event listener to an object.
4383,map.current,,getBounds,map.current.getBounds,,,26,Returns the geographical boundaries of the current map.
4384,response,,startsWith,response.startsWith,,,Others,Checks if a string starts with specified characters.
4385,Tracker,,Tracker,Tracker.Tracker,,,Others,Unknown
4386,tracker,,send,tracker.send,,,23,Sends data or information to a specified destination.
4387,channel,,dispatchProtocolMessage,channel.dispatchProtocolMessage,,,33,Dispatches a message following a specific protocol.
4388,response,,code,response.code,,,Others,Unknown
4389,response,,message,response.message,,,Others,Unknown
4390,request,,delete,request.delete,,,8,Delete a resource or data entry.
4391,buffer,,writeByte,buffer.writeByte,,,11,Writes a single byte to the buffer.
4392,buffer,,writeCString,buffer.writeCString,,,28,Write null-terminated C-style string to buffer.
4393,stats,,toUpperCase,stats.toUpperCase,,,Others,Converts string to uppercase.
4394,stats,,toLowerCase,stats.toLowerCase,,,Others,Converts all characters to lowercase.
4395,module.file_name,,startsWith,module.file_name.startsWith,,,Others,Checks if a string starts with another string.
4396,console.stdout,,write,console.stdout.write,,,39,Outputs text to the console.
4397,event.attacker,,getSteamId64,event.attacker.getSteamId64,,,23,Retrieves the 64-bit Steam ID of the attacker.
4398,map,,getContainer,map.getContainer,,,Others,"Retrieve the map's HTML container element."
4399,map,,eachLayer,map.eachLayer,,,Others,Iterates through each layer on a map.
4400,Date,,getWeekOfMonth,Date.getWeekOfMonth,,,Others,Returns the current week number of the month.
4401,ctx.url,,split,ctx.url.split,,,15,Splits a string into an array.
4402,ctx.res,,setHeader,ctx.res.setHeader,,,22,Sets HTTP response header.
4403,ctx,,done,ctx.done,,,Others,Unknown
4404,start,,trim,start.trim,,,Others,Removes whitespace from both ends of a string.
4405,end,,trim,end.trim,,,Others,Removes whitespace from both ends of a string.
4406,event.target,,playVideo,event.target.playVideo,,,39,Plays the video in the target element.
4407,error.message,,replaceAll,error.message.replaceAll,,,Others,Replace all occurrences of a substring.
4408,process.server,,createStore,process.server.createStore,,,35,Create and manage stateful data storage.
4409,readline,,readline,readline.readline,,,11,Reads a line of input from the user.
4410,Context,,hook,Context.hook,,,40,Facilitates custom logic insertion at specific points.
4411,context,,decode,context.decode,,,33,Decode information from encoded format.
4412,error,,data,error.data,,,Others,Unknown
4413,message,,indexOf,message.indexOf,,,Others,Finds the position of a substring.
4414,error,,removeData,error.removeData,,,8,Remove stored data or information.
4415,request,,callback,request.callback,,,33,Handles asynchronous response from a request
4416,session.bot,,deleteMessage,session.bot.deleteMessage,,,37,Delete a specific message from the bot.
4417,script,,getAttributeNames,script.getAttributeNames,,,Others,"Returns a list of an element's attribute names."
4418,stream,,dispatchEvent,stream.dispatchEvent,,,Others,Trigger event listeners associated with the event.
4419,document,,cancelFullScreen,document.cancelFullScreen,,,23,Exits full-screen mode in the browser.
4420,document,,webkitCancelFullScreen,document.webkitCancelFullScreen,,,23,Exits fullscreen mode in web browsers.
4421,ctx.path,,toLowerCase,ctx.path.toLowerCase,,,Others,Converts string characters to lowercase.
4422,ctx.method,,toUpperCase,ctx.method.toUpperCase,,,Others,Converts string to uppercase letters.
4423,ctx,,param,ctx.param,,,33,Retrieve a parameter from the context object.
4424,context.model,,extend,context.model.extend,,,40,Extend properties and methods of an object.
4425,context,,isolate,context.isolate,,,Others,Isolate specific part of context for processing.
4426,context.http,,extend,context.http.extend,,,Others,Extends HTTP context with additional functionality or properties.
4427,ctx,,guild,ctx.guild,,,Others,Unknown
4428,session.content,,substring,session.content.substring,,,Others,Extracts part of a string.
4429,URLSearchParams,,match,URLSearchParams.match,,,Others,Unknown
4430,server,,get,server.get,,,Others,Retrieves data or handles GET requests to server.
4431,server,,post,server.post,,,20,Handles HTTP POST requests to the server.
4432,server,,put,server.put,,,Others,Update or replace a resource on the server.
4433,server,,delete,server.delete,,,8,Deletes specified resource or data from the server.
4434,XMLHttpRequest.responseText,,slice,XMLHttpRequest.responseText.slice,,,Others,Extracts a section of a string.
4435,response,,set,response.set,,,Others,Sets a value or property.
4436,Math,,cot,Math.cot,,,34,Calculates the cotangent of an angle.
4437,url.origin,,includes,url.origin.includes,,,Others,Checks if a substring exists within a string.
4438,ctx,,accept,ctx.accept,,,39,Accepts or processes a request or action.
4439,ctx,,before,ctx.before,,,39,Sets up preconditions or tasks before main execution.
4440,Promise,,split,Promise.split,,,Others,Unknown
4441,ctx.output,,map,ctx.output.map,,,Others,Transforms each element of an array.
4442,ctx.log,,warn,ctx.log.warn,,,35,Logs a warning message.
4443,ctx._output,,map,ctx._output.map,,,40,Transforms each element in a collection.
4444,ctx,,request,ctx.request,,,20,Handles incoming HTTP request data.
4445,ctx.log,,error,ctx.log.error,,,Others,Logs error details or messages.
4446,date,,match,date.match,,,6,Returns array of matches based on a pattern.
4447,XMLHttpRequest,,abort,XMLHttpRequest.abort,,,Others,Terminate the XMLHttpRequest.
4448,test.title,,matchAll,test.title.matchAll,,,Others,Returns all matches of a regular expression.
4449,path,,rename,path.rename,,,7,Rename a file or directory.
4450,decipher,,end,decipher.end,,,Others,Terminates the deciphering process or operation.
4451,decipher,,read,decipher.read,,,34,Reads and interprets encoded data or input.
4452,document.activeElement,,blur,document.activeElement.blur,,,23,Remove focus from the current active element.
4453,ctx.file,,load,ctx.file.load,,,Others,Load a file into the context.
4454,session,,error,session.error,,,39,Handles or logs error conditions or messages.
4455,ctx.file,,save,ctx.file.save,,,14,Save data to a file.
4456,session,,format,session.format,,,30,Formatting data or session information.
4457,date,,encode,date.encode,,,40,Convert date to a specific encoded format.
4458,ctx,,midware,ctx.midware,,,33,Middleware function for handling requests or responses.
4459,session.i18n,,time,session.i18n.time,,,4,Returns or manipulates time-related information.
4460,session.el,,at,session.el.at,,,17,Returns element at specified index.
4461,set,,some,set.some,,,34,Checks if any elements meet condition.
4462,Date,,success,Date.success,,,Others,Unknown
4463,ctx.logger,,label,ctx.logger.label,,,Others,Log categorization
4464,ctx.cache,,get,ctx.cache.get,,,33,Retrieve value from cache using a key.
4465,session.i18n,,locale,session.i18n.locale,,,Others,Sets or gets the language and region settings.
4466,session.api,,sendPrivateMsg,session.api.sendPrivateMsg,,,23,Send a private message to a user.
4467,ctx.cache,,set,ctx.cache.set,,,33,Set a value in the cache.
4468,session.api,,setGroupKick,session.api.setGroupKick,,,10,Remove a member from a group.
4469,session.api,,setGroupBan,session.api.setGroupBan,,,35,Set a ban for a group user.
4470,XMLHttpRequest,,getResponseHeader,XMLHttpRequest.getResponseHeader,,,24,Retrieve specific HTTP response header value.
4471,event,,desc,event.desc,,,Others,Unknown
4472,event.type,,split,event.type.split,,,Others,Splits a string into an array.
4473,DataView,,XBS2Json,DataView.XBS2Json,,,36,Convert XBS data to JSON format.
4474,DataView,,Json2XBS,DataView.Json2XBS,,,33,Convert JSON data to XBS format.
4475,Error,,encrypt,Error.encrypt,,,33,Encrypts data using a specified algorithm or method.
4476,Error,,decrypt,Error.decrypt,,,34,Decrypts encrypted data to its original form.
4477,crypto.price,,toFixed,crypto.price.toFixed,,,Others,Rounds a number to fixed decimal places.
4478,Function,,fun,Function.fun,,,Others,Unknown
4479,module.got,,get,module.got.get,,,25,Fetches data from a specified resource.
4480,util.types,,isProxy,util.types.isProxy,,,Others,Determines if an object is a proxy.
4481,ctx.initialSupply,,addn,ctx.initialSupply.addn,,,33,Add a number to the initial supply.
4482,ctx,,approve,ctx.approve,,,23,Authorize or accept a certain action or request.
4483,ctx.token,,withSigner,ctx.token.withSigner,,,35,Allows operations with a specified signer.
4484,ctx.initialSupply,,subn,ctx.initialSupply.subn,,,33,Subtracts a number from the initial supply.
4485,JSON,,scriptify,JSON.scriptify,,,Others,Converts JSON object to JavaScript code string.
4486,Object,,fromProxy,Object.fromProxy,,,Others,Transforms a proxy into its original object.
4487,Date.brandName,,substring,Date.brandName.substring,,,Others,Extracts a part of a string.
4488,Function.bind,,apply,Function.bind.apply,,,40,Allows function to be called with specified `this` context.
4489,Reflect.construct,,bind,Reflect.construct.bind,,,36,Binds function to specific context or arguments.
4490,Array,,range,Array.range,,,10,Creates an array with a range of numbers.
4491,tracker,,urls,tracker.urls,,,Others,Tracks and manages URL-related data or actions.
4492,response._request,,headers,response._request.headers,,,20,HTTP request headers
4493,error.stdout,,trim,error.stdout.trim,,,Others,Removes whitespace from both ends of a string.
4494,error.stderr,,trim,error.stderr.trim,,,Others,Removes whitespace from both ends of a string.
4495,context,,registerDeployProvider,context.registerDeployProvider,,,39,Registers a deployment provider within the context.
4496,context,,commit,context.commit,,,33,Saves or records changes to a system state.
4497,context,,addInitScript,context.addInitScript,,,40,Injects a script to run at initialization.
4498,context,,remove,context.remove,,,Others,Removes an item from a context object.
4499,it,,encodeInto,it.encodeInto,,,Others,Unknown
4500,response,,getBody,response.getBody,,,11,Retrieve the main content of the response.
4501,response.upgrade,,toLowerCase,response.upgrade.toLowerCase,,,Others,Converts string to lowercase letters.
4502,document,,queryCommandSupported,document.queryCommandSupported,,,Others,Checks if a command is supported by the browser.
4503,vm,,SourceTextModule,vm.SourceTextModule,,,Others,Creates and manages ECMAScript modules from source text.
4504,context.logger,,log,context.logger.log,,,39,Log a message or information.
4505,response,,toUpperCase,response.toUpperCase,,,Others,Converts string to uppercase letters.
4506,message,,args,message.args,,,Others,Arguments passed to a function or method
4507,event.code,,replace,event.code.replace,,,Others,String substitution method.
4508,Http,,Http,Http.Http,,,Others,Unknown
4509,handler,,removeInputAction,handler.removeInputAction,,,8,Removes a specified input action.
4510,event.relatedTarget,,closest,event.relatedTarget.closest,,,6,Finds nearest ancestor matching the selector.
4511,context.turnState,,get,context.turnState.get,,,Others,Retrieve a value from the state.
4512,context.turnState,,set,context.turnState.set,,,39,Stores or updates a value in a data structure.
4513,document,,evaluate,document.evaluate,,,Others,Evaluates an XPath expression and returns results
4514,test,,describe,test.describe,,,Others,Function to group and define test cases
4515,test,,it,test.it,,,40,Defines a test case in a test suite.
4516,map,,forEachFeatureAtPixel,map.forEachFeatureAtPixel,,,Others,Iterates over features at a specified pixel location.
4517,map,,getLayers,map.getLayers,,,Others,Retrieve the layers from the map.
4518,console.console,,log,console.console.log,,,36,Prints information to the console.
4519,script.script,,forEach,script.script.forEach,,,Others,Iterates over elements in an array.
4520,path,,hasAttribute,path.hasAttribute,,,Others,Checks if an attribute exists on an element.
4521,event,,relativeURL,event.relativeURL,,,1,Determines or retrieves a relative URL path.
4522,ctx.canvas,,createCanvas,ctx.canvas.createCanvas,,,19,Creates a drawing area on the canvas.
4523,handler,,dragStart,handler.dragStart,,,23,Initiates the beginning of a drag operation.
4524,handler.document,,querySelectorAll,handler.document.querySelectorAll,,,33,Selects multiple elements matching the specified CSS selector.
4525,handler,,dragLeave,handler.dragLeave,,,Others,Handles the event when a dragged item leaves.
4526,handler,,dragEnter,handler.dragEnter,,,28,Handles the event when a drag enters an element.
4527,handler,,dragEnd,handler.dragEnd,,,33,Handles actions when dragging ends.
4528,handler,,drop,handler.drop,,,Others,Removes or handles dropped items or elements.
4529,context.marker,,setIcon,context.marker.setIcon,,,Others,Set the icon for the marker.
4530,context.marker,,setOffset,context.marker.setOffset,,,Others,Adjusts the position of the marker.
4531,context.marker,,setContent,context.marker.setContent,,,33,Sets the content of the marker.
4532,timeout,,timeout,timeout.timeout,,,35,Sets a time limit for executing operations.
4533,Error,,push,Error.push,,,Others,Adds an element to the end of an array.
4534,ctx.res,,status,ctx.res.status,,,Others,Sets the HTTP status code of the response.
4535,start,,clone,start.clone,,,40,Creates a copy of an object.
4536,Date,,addItem,Date.addItem,,,40,Adding an item to a date object.
4537,start,,minute,start.minute,,,Others,Retrieve or manipulate the minute component of time.
4538,start,,hour,start.hour,,,1,Represents the hour component of a time.
4539,watcher,,addListener,watcher.addListener,,,39,Adds a listener to an event.
4540,http,,writeHead,http.writeHead,,,20,Set HTTP response status and headers.
4541,mime,,endsWith,mime.endsWith,,,Others,Checks if a string ends with a specific suffix.
4542,mime,,substring,mime.substring,,,Others,Extracts part of a string.
4543,fs,,writeHead,fs.writeHead,,,Others,Sets HTTP response headers and status code.
4544,fs,,setHeader,fs.setHeader,,,20,Set HTTP response header.
4545,http.message,,includes,http.message.includes,,,Others,Checks if a substring is present.
4546,crypto,,endsWith,crypto.endsWith,,,Others,Checks if a string ends with a specified substring.
4547,crypto,,lastIndexOf,crypto.lastIndexOf,,,Others,Find the last occurrence of a specified value.
4548,crypto,,substring,crypto.substring,,,Others,Extracts part of a string.
4549,request.yar,,get,request.yar.get,,,33,Retrieve stored session data.
4550,request.yar,,set,request.yar.set,,,33,Sets a value in a storage mechanism.
4551,crypto,,includes,crypto.includes,,,Others,Checks if a value exists within an array or string.
4552,crypto,,slice,crypto.slice,,,Others,Extracts a portion of an array or string.
4553,message,,getUuid,message.getUuid,,,28,Generates or retrieves a unique identifier (UUID).
4554,message,,getWorkflowType,message.getWorkflowType,,,Others,Retrieve the workflow type of a message.
4555,message,,getEsdl_asU8,message.getEsdl_asU8,,,33,Returns ESDL data as a Uint8Array.
4556,message,,getResultType,message.getResultType,,,Others,Determine and return the type of a result.
4557,message,,getLogs,message.getLogs,,,6,Retrieve or display log messages.
4558,message,,getProgress,message.getProgress,,,Others,Retrieve the current progress of a task.
4559,message,,getMessage,message.getMessage,,,33,Retrieve or generate a message string.
4560,message,,getJobId,message.getJobId,,,23,Returns the job identifier.
4561,message,,getCeleryTaskId,message.getCeleryTaskId,,,39,Retrieve the ID of a Celery task.
4562,module.routes,,map,module.routes.map,,,40,Transforms array elements based on provided function
4563,message,,getCeleryTaskType,message.getCeleryTaskType,,,Others,Determine type of a Celery task from the message.
4564,module.routePrefix,,charAt,module.routePrefix.charAt,,,Others,Character at a specific position in a string.
4565,module.routePrefix,,slice,module.routePrefix.slice,,,Others,Extracts part of a string or array.
4566,module.routePrefix,,toLowerCase,module.routePrefix.toLowerCase,,,Others,Converts string to lowercase.
4567,path,,end,path.end,,,Others,Unknown
4568,fs,,t,fs.t,,,Others,Unknown
4569,event.submitter,,getAttribute,event.submitter.getAttribute,,,33,Retrieve the value of a specified attribute.
4570,context,,generateResumeUrl,context.generateResumeUrl,,,Others,Generate a URL for a resume document.
4571,SourceMap,,SourceMap,SourceMap.SourceMap,,,40,Creates mappings between original and transformed source code.
4572,SourceMap,,addVLQMap,SourceMap.addVLQMap,,,35,Add a VLQ-encoded source map.
4573,SourceMap,,extends,SourceMap.extends,,,15,Inherits properties from another object or class.
4574,console.log,,call,console.log.call,,,40,Invokes a function with a specified `this` context.
4575,Math,,randomInt,Math.randomInt,,,Others,Generates a random integer within a specified range.
4576,response,,notFound,response.notFound,,,Others,Handles 404 error or resource not found response.
4577,Object,,isPlain,Object.isPlain,,,Others,Determines if an object is a plain object.
4578,writableStream,,on,writableStream.on,,,17,Event listener for writable stream.
4579,context,,debug,context.debug,,,Others,Debugging tool for logging or inspecting code behavior.
4580,response.value,,map,response.value.map,,,Others,Transforms array elements.
4581,context,,callAssertionHandler,context.callAssertionHandler,,,Others,Handle and execute assertion-related tasks or checks.
4582,context,,call,context.call,,,40,Invokes function with specified `this` context and arguments.
4583,Set,,n,Set.n,,,Others,Unknown
4584,port,,pipe,port.pipe,,,38,Data stream redirection or transformation.
4585,module.providers,,values,module.providers.values,,,Others,"Returns an array of object's enumerable property values."
4586,error.stack,,replace,error.stack.replace,,,Others,Replace substring(s) with another substring or pattern.
4587,event.data,,json,event.data.json,,,Others,Unknown
4588,fs.promises,,realpath,fs.promises.realpath,,,3,Resolves the absolute path of a given file.
4589,context,,triggerControlOutput,context.triggerControlOutput,,,Others,Triggers a control-related output action or event.
4590,promise,,setSuccess,promise.setSuccess,,,33,Sets the promise to a successful state.
4591,promise,,setError,promise.setError,,,33,Sets an error state for the promise.
4592,ctx.path,,split,ctx.path.split,,,Others,Splits a string into an array.
4593,timers,,start,timers.start,,,Others,Initiates a timer or countdown process.
4594,timers,,stop,timers.stop,,,35,Stops a running timer or process.
4595,timers,,timers,timers.timers,,,39,Manages and executes timing operations.
4596,timers,,values,timers.values,,,Others,Retrieve all values from the timers object.
4597,test.attachments,,map,test.attachments.map,,,40,Transforms array elements based on given function.
4598,event.cookies,,get,event.cookies.get,,,33,Retrieve value from cookies.
4599,event.locals,,setJwt,event.locals.setJwt,,,28,Set a JWT token in the local storage.
4600,context.env,,renderString,context.env.renderString,,,40,Renders a string template with provided context.
4601,Set,,getSourceCode,Set.getSourceCode,,,Others,Retrieves or returns the source code.
4602,ctx.pcr,,getUnitIcon,ctx.pcr.getUnitIcon,,,23,Retrieve the icon for a specified unit.
4603,ctx.pcr,,isUnavailableChara,ctx.pcr.isUnavailableChara,,,Others,Determines if a character is unavailable.
4604,ctx.arena,,prefix,ctx.arena.prefix,,,Others,Add or identify the beginning segment.
4605,ctx.pcr,,parseTeam,ctx.pcr.parseTeam,,,38,Parse team data from input.
4606,ctx.arena,,region,ctx.arena.region,,,Others,Unknown
4607,ctx.arena,,request,ctx.arena.request,,,Others,Request data or perform an action.
4608,response,,endsWith,response.endsWith,,,Others,Checks if a string ends with specified characters.
4609,path.parentPath,,toString,path.parentPath.toString,,,31,Convert object to string representation.
4610,URL.searchParams,,has,URL.searchParams.has,,,Others,Checks if a parameter exists in the URL.
4611,after,,apply,after.apply,,,35,Applies function with given arguments.
4612,Promise,,portIsOccupied,Promise.portIsOccupied,,,Others,Checks if a port is currently in use.
4613,context,,getDeclaredVariables,context.getDeclaredVariables,,,40,Returns declared variables within the given context.
4614,fs.default,,existsSync,fs.default.existsSync,,,Others,Checks if a file or directory exists synchronously.
4615,fs.default,,createWriteStream,fs.default.createWriteStream,,,17,Creates a writable stream for file output.
4616,fs.default,,appendFileSync,fs.default.appendFileSync,,,14,Appends data to a file synchronously.
4617,fs.default,,mkdirSync,fs.default.mkdirSync,,,10,Create a directory synchronously.
4618,path.default,,join,path.default.join,,,1,Combines multiple path segments into one string.
4619,server,,addHook,server.addHook,,,22,Adds a custom behavior to server events.
4620,server,,addContentTypeParser,server.addContentTypeParser,,,21,Parses specific content types for incoming requests.
4621,server,,setErrorHandler,server.setErrorHandler,,,26,Handles server errors.
4622,server,,setReplySerializer,server.setReplySerializer,,,28,Sets the function to serialize server replies.
4623,event,,getParameter,event.getParameter,,,33,Retrieve a specific parameter from an event.
4624,response.data,,hasOwnProperty,response.data.hasOwnProperty,,,Others,Checks if object contains specific property.
4625,request,,cookie,request.cookie,,,23,Stores or retrieves HTTP cookies.
4626,date,,trim,date.trim,,,Others,Removes whitespace from both ends of a string.
4627,event,,getTypeName,event.getTypeName,,,40,Returns the event type name.
4628,event,,updateColumnInfo,event.updateColumnInfo,,,33,Update information of a specified column.
4629,ctx.body,,toString,ctx.body.toString,,,29,Converts an object to a string representation.
4630,ctx.pushName,,toString,ctx.pushName.toString,,,29,Converts object to string representation.
4631,URL.host,,startsWith,URL.host.startsWith,,,Others,Checks if a string starts with specified characters.
4632,URL.host,,substring,URL.host.substring,,,Others,Extracts a portion of a string.
4633,event.currentTarget,,getBoundingClientRect,event.currentTarget.getBoundingClientRect,,,Others,"Returns element's size and position relative to viewport."
4634,context,,getType,context.getType,,,Others,Returns the data type of the given context.
4635,Math,,lerp,Math.lerp,,,Others,Linear interpolation between two values.
4636,message.status,,toString,message.status.toString,,,28,Converts object to string representation.
4637,message.method,,toUpperCase,message.method.toUpperCase,,,40,Converts text to uppercase letters.
4638,message.headers,,set,message.headers.set,,,33,Set a value in the headers object.
4639,document.body,,insertAdjacentElement,document.body.insertAdjacentElement,,,10,Inserts an element at a specified position.
4640,response,,header,response.header,,,Others,Sets or retrieves HTTP response headers.
4641,ctx.widgetDiv,,appendChild,ctx.widgetDiv.appendChild,,,24,Adds a child node to the parent.
4642,ctx.iframeBtnDiv,,appendChild,ctx.iframeBtnDiv.appendChild,,,Others,Appends a child node to a parent node.
4643,ctx.iframeStoriesDiv,,appendChild,ctx.iframeStoriesDiv.appendChild,,,17,Add a child element to a parent element.
4644,ctx.input,,dispatchEvent,ctx.input.dispatchEvent,,,Others,Triggers an event on a specified target.
4645,ctx.iframe,,addEventListener,ctx.iframe.addEventListener,,,23,Attaches event handler to an element.
4646,ctx.container,,appendChild,ctx.container.appendChild,,,28,Adds a child element to a parent.
4647,util,,extractBreadCrumb,util.extractBreadCrumb,,,Others,Extracts breadcrumb navigation elements from a data structure.
4648,util,,sortByLeaves,util.sortByLeaves,,,Others,Sorts elements based on their leaf nodes.
4649,module,,config,module.config,,,Others,Configuration settings for a module.
4650,Array.prototype,,isPrototypeOf,Array.prototype.isPrototypeOf,,,Others,"Determines if an object exists in another's prototype chain."
4651,socket.listeners,,set,socket.listeners.set,,,Others,Unknown
4652,Object.prototype,,isPrototypeOf,Object.prototype.isPrototypeOf,,,Others,"Determines if object exists in another's prototype chain."
4653,socket.connection,,send,socket.connection.send,,,23,Send data through a socket connection.
4654,Map.listeners,,get,Map.listeners.get,,,33,Retrieve a value from a Map object.
4655,util.types,,isDate,util.types.isDate,,,Others,Checks if a value is a Date object.
4656,ctx.broadcaster,,broadcastFocusChange,ctx.broadcaster.broadcastFocusChange,,,23,Broadcasts changes in focus status.
4657,event.origin,,includes,event.origin.includes,,,Others,Checks if a string contains a specified substring.
4658,error.instancePath,,slice,error.instancePath.slice,,,Others,Extracts a portion of a string.
4659,Ctx.st,,add,Ctx.st.add,,,40,Add elements or values to a collection.
4660,Ctx,,add_stt,Ctx.add_stt,,,Others,Add speech-to-text functionality.
4661,Ctx.o2stt,,get,Ctx.o2stt.get,,,Others,Retrieves a value based on a key.
4662,Date,,makeMiddleware,Date.makeMiddleware,,,28,Middleware creation for handling date operations.
4663,context,,monitoring,context.monitoring,,,4,System performance and health tracking.
4664,Date.urls,,filter,Date.urls.filter,,,Others,Filters elements in an array based on a condition.
4665,histogram,,recordValue,histogram.recordValue,,,33,Record a value in the histogram.
4666,ctx.schema,,extend,ctx.schema.extend,,,Others,Extend the schema with additional definitions or properties.
4667,ctx,,getTemplateList,ctx.getTemplateList,,,6,Retrieve a list of templates.
4668,ctx,,_log,ctx._log,,,28,Logging information for debugging or tracking.
4669,context,,getProjectConfig,context.getProjectConfig,,,Others,"Retrieves the current project's configuration settings."
4670,context.spinner,,start,context.spinner.start,,,28,Starts a loading or progress spinner animation.
4671,context.spinner,,succeed,context.spinner.succeed,,,Others,Indicates successful completion of a task.
4672,context.spinner,,fail,context.spinner.fail,,,33,Indicates an operation has failed or encountered an error.
4673,test,,threw,test.threw,,,39,Determines if a test case threw an error.
4674,http,,HttpHeaders,http.HttpHeaders,,,20,HttpHeaders: Manages HTTP request and response headers.
4675,document,,getLogger,document.getLogger,,,38,Retrieve or create a logger instance.
4676,document,,getRoot,document.getRoot,,,40,Retrieve the root element or object.
4677,document,,createNode,document.createNode,,,25,Creates a new node in the document.
4678,symbol,,render,symbol.render,,,39,Display or generate visual representation.
4679,Function,,isBrowser,Function.isBrowser,,,26,Determines if the environment is a web browser.
4680,URL.href,,slice,URL.href.slice,,,Others,Extracts a portion of a string.
4681,URL.href,,startsWith,URL.href.startsWith,,,Others,Checks if string begins with specified characters.
4682,URL.search,,indexOf,URL.search.indexOf,,,Others,Returns the position of the first occurrence.
4683,context.run,,stop,context.run.stop,,,35,Stop the context execution or process.
4684,server.api,,openGame,server.api.openGame,,,22,Open a game session on the server.
4685,symbol,,match,symbol.match,,,35,Matches a string against a regular expression.
4686,start,,toLowerCase,start.toLowerCase,,,Others,Converts string to lowercase letters.
4687,ctx,,debounce,ctx.debounce,,,33,Limits the rate of function execution.
4688,context,,$create_pass_block,context.$create_pass_block,,,40,Creates a section for password input or authentication.
4689,json,,find,json.find,,,6,Searches for a specific value or pattern.
4690,request,,route,request.route,,,20,Directs web request to a specific handler or endpoint.
4691,request,,jwtVerify,request.jwtVerify,,,35,"Verify JSON Web Token's authenticity and integrity."
4692,request,,authenticate,request.authenticate,,,Others,Authenticates user credentials or access permissions.
4693,message,,getId,message.getId,,,33,Retrieves the unique identifier of the message.
4694,message,,getIdsList,message.getIdsList,,,33,Retrieve a list of IDs.
4695,message,,getFirstName,message.getFirstName,,,Others,Gets the first name from a message.
4696,message,,getLastName,message.getLastName,,,Others,Retrieve the last name from a message object.
4697,message,,getEmail,message.getEmail,,,23,Retrieves email address from the message object.
4698,message,,getUser,message.getUser,,,5,Retrieve information about a user.
4699,message,,getUsersList,message.getUsersList,,,6,Retrieve a list of users.
4700,message,,getAccessToken,message.getAccessToken,,,23,"Retrieve or generate a user's access token."
4701,message,,getTid,message.getTid,,,23,Retrieve or fetch a transaction or thread ID
4702,message,,getSub,message.getSub,,,Others,Retrieve substring or sub-element from the message.
4703,port,,getInfo,port.getInfo,,,4,Retrieve port-specific information or details.
4704,buffer,,set,buffer.set,,,28,Sets values in the buffer.
4705,ctx,,hasChatType,ctx.hasChatType,,,Others,Checks if the context has a specific chat type.
4706,ctx,,hasCommand,ctx.hasCommand,,,Others,Determines if a specific command is present.
4707,rl,,_refreshLine,rl._refreshLine,,,33,Refreshes or updates the current line display.
4708,response.body,,filter,response.body.filter,,,38,Filters elements based on a specified condition.
4709,context,,getClass,context.getClass,,,Others,Unknown
4710,module,,toUpperCase,module.toUpperCase,,,40,Converts string characters to uppercase.
4711,request.upload,,addEventListener,request.upload.addEventListener,,,33,Adds a handler for an event.
4712,init,,progress,init.progress,,,Others,Tracks or updates the completion status of a task.
4713,URLSearchParams.prototype,,isPrototypeOf,URLSearchParams.prototype.isPrototypeOf,,,Others,"Checks if an object exists in another's prototype chain."
4714,Blob.prototype,,isPrototypeOf,Blob.prototype.isPrototypeOf,,,Others,"Determines if an object exists in another's prototype chain."
4715,DataView.prototype,,isPrototypeOf,DataView.prototype.isPrototypeOf,,,Others,"Checks if an object exists in another's prototype chain."
4716,ArrayBuffer.prototype,,isPrototypeOf,ArrayBuffer.prototype.isPrototypeOf,,,Others,"Checks if object exists in another object's prototype chain."
4717,stream,,toUpperCase,stream.toUpperCase,,,40,Converts string characters to uppercase.
4718,Function,,asyncFunction,Function.asyncFunction,,,37,Handles asynchronous operations in JavaScript.
4719,module,,load,module.load,,,Others,Loads a module or resource into the application.
4720,readStream,,setEncoding,readStream.setEncoding,,,33,"Sets the character encoding for the stream's data."
4721,buffer,,readDoubleBE,buffer.readDoubleBE,,,33,Reads a double-precision float in big-endian format.
4722,buffer,,readFloatBE,buffer.readFloatBE,,,11,Reads a big-endian 32-bit floating-point number.
4723,buffer,,readInt16BE,buffer.readInt16BE,,,33,Reads 16-bit big-endian signed integer from buffer.
4724,buffer,,readInt8,buffer.readInt8,,,11,Reads an 8-bit signed integer from buffer.
4725,resolver,,dispose,resolver.dispose,,,39,Release resources or clean up.
4726,Resolver,,create,Resolver.create,,,26,Creates a new Resolver instance or object.
4727,Resolver,,setName,Resolver.setName,,,Others,Sets the name of an entity or object.
4728,Resolver,,setLifetime,Resolver.setLifetime,,,40,Set duration or expiration time for an entity.
4729,Resolver,,disposer,Resolver.disposer,,,37,Resource cleanup and disposal method.
4730,Resolver,,createDeclaration,Resolver.createDeclaration,,,40,Creates a new variable or function declaration.
4731,event.streams,,forEach,event.streams.forEach,,,10,Iterates over each element in an array.
4732,stream.req,,on,stream.req.on,,,38,Event listener registration method.
4733,stream.req,,removeListener,stream.req.removeListener,,,38,Removes an event listener from an event emitter.
4734,buf,,pipe,buf.pipe,,,33,Transfers data between streams or buffers.
4735,path.parentPath,,isVariableDeclarator,path.parentPath.isVariableDeclarator,,,Others,Checks if the parent path is a variable declarator.
4736,util,,puts,util.puts,,,Others,Prints a string to the console.
4737,inspector,,addAttribute,inspector.addAttribute,,,Others,Adds a specified attribute to an element.
4738,Promise.stdout,,destroy,Promise.stdout.destroy,,,33,Terminate or release resources.
4739,Promise.stderr,,destroy,Promise.stderr.destroy,,,Others,Terminate or close the standard error stream.
4740,Promise,,kill,Promise.kill,,,39,Terminate or cancel the promise execution.
4741,stream.paths,,push,stream.paths.push,,,10,Adds an element to the end of an array.
4742,path,,matchAll,path.matchAll,,,1,Finds all matches against a regular expression.
4743,document,,importNode,document.importNode,,,35,Imports a node from another document.
4744,handler,,destroy,handler.destroy,,,8,Destroys or removes an object or resource.
4745,message,,getToken_asU8,message.getToken_asU8,,,33,Retrieve token as unsigned 8-bit integer array.
4746,message,,getChatid,message.getChatid,,,Others,"Retrieve the chat's unique identifier."
4747,message,,getText,message.getText,,,Others,Returns the text content of a message.
4748,message,,getAuthtoken,message.getAuthtoken,,,5,Retrieve authentication token for user authorization.
4749,message,,getChatmessage,message.getChatmessage,,,Others,Retrieve the chat message from the message object.
4750,message,,getSuccess,message.getSuccess,,,39,Returns a successful status or result.
4751,message,,getErrormsg,message.getErrormsg,,,35,Returns error message from `message`.
4752,message,,getUsername,message.getUsername,,,5,Returns the username associated with the message.
4753,message,,getPublicUser,message.getPublicUser,,,5,"Retrieve user's public information."
4754,message,,getPassword,message.getPassword,,,5,"Retrieve or generate user's password."
4755,module.hot,,status,module.hot.status,,,Others,Module hot-reload status retrieval.
4756,module.hot,,apply,module.hot.apply,,,Others,Unknown
4757,module.hot,,check,module.hot.check,,,35,Checks for updates in a hot module replacement.
4758,document.createElement,,apply,document.createElement.apply,,,40,Invoke function with arguments as an array.
4759,queryString,,navigateWithNewParam,queryString.navigateWithNewParam,,,Others,Updates URL with a new query parameter.
4760,queryString,,fullStringWithNewParam,queryString.fullStringWithNewParam,,,Others,Creates a query string with new parameter.
4761,document.createTextNode,,apply,document.createTextNode.apply,,,10,Invokes function with specified context and arguments.
4762,request,,req,request.req,,,Others,Unknown
4763,Date.date,,toISOString,Date.date.toISOString,,,Others,Returns date in ISO 8601 string format.
4764,dirent.name,,startsWith,dirent.name.startsWith,,,Others,Checks if a string starts with specified characters.
4765,dirent.name,,endsWith,dirent.name.endsWith,,,Others,Checks if a string ends with a specified suffix.
4766,module,,_nodeModulePaths,module._nodeModulePaths,,,Others,Module resolution paths for Node.js.
4767,it.ownerSteamids,,sort,it.ownerSteamids.sort,,,16,Sorts elements in an array.
4768,promise,,emit,promise.emit,,,40,Emit event or signal for listeners.
4769,promise,,listeners,promise.listeners,,,Others,Unknown
4770,readable,,subscribe,readable.subscribe,,,23,Subscribe to receive updates or data changes.
4771,events,,onChange,events.onChange,,,Others,Handles changes or updates to an event.
4772,stats,,reduce,stats.reduce,,,40,Aggregates array values into a single result.
4773,stats,,concat,stats.concat,,,Others,Combine arrays or strings into one.
4774,events,,subscribe,events.subscribe,,,23,Subscribes to events or notifications.
4775,events,,set,events.set,,,Others,Sets an event or value.
4776,Object,,observe,Object.observe,,,Others,Observe changes to objects.
4777,response,,flush,response.flush,,,Others,Clears buffered data.
4778,resolver,,getDownloadUrl,resolver.getDownloadUrl,,,Others,Retrieve the URL for downloading a resource.
4779,resolver,,resolveUrl,resolver.resolveUrl,,,Others,Resolves and returns a complete URL.
4780,resolver,,isLocal,resolver.isLocal,,,23,Determines if the resolver is local.
4781,context,,success,context.success,,,Others,Success status or result indicator.
4782,context,,command,context.command,,,Others,Unknown
4783,context,,error,context.error,,,Others,Handles or logs error information.
4784,start,,join,start.join,,,29,Combines elements into a single string.
4785,Map.types,,get,Map.types.get,,,28,Retrieve a value from a map.
4786,path.scope,,generateUidIdentifierBasedOnNode,path.scope.generateUidIdentifierBasedOnNode,,,33,Generate a unique identifier based on a specific node.
4787,path.parentPath,,isExportDeclaration,path.parentPath.isExportDeclaration,,,Others,Determines if a node is an export declaration.
4788,path.scope,,push,path.scope.push,,,Others,Add an element to an array.
4789,net,,Server,net.Server,,,22,Handles network communication and client requests.
4790,server.instance,,close,server.instance.close,,,28,Terminate or shut down the server instance.
4791,event.renderedBuffer,,getChannelData,event.renderedBuffer.getChannelData,,,Others,Retrieves audio data for a specific channel.
4792,context,,getExtension,context.getExtension,,,Others,Determine file extension from context.
4793,eval,,toString,eval.toString,,,39,Returns a string representation of the function.
4794,channel,,create,channel.create,,,23,Create a new communication channel.
4795,channel.onDOMContentLoaded,,fire,channel.onDOMContentLoaded.fire,,,22,Triggers event listeners when DOM content is fully loaded.
4796,channel.onCordovaReady,,fire,channel.onCordovaReady.fire,,,39,Triggers event or executes callbacks when ready.
4797,channel,,createSticky,channel.createSticky,,,23,Creates a persistent message or note in a channel.
4798,channel.onPluginsReady,,fire,channel.onPluginsReady.fire,,,33,Trigger an event or callback execution.
4799,fs.createReadStream,,apply,fs.createReadStream.apply,,,40,Invoke a function with specified `this` context and arguments.
4800,object,,attachEvent,object.attachEvent,,,23,Attach event handler to an object.
4801,run,,call,run.call,,,40,The `call` method invokes a function immediately.
4802,crypto.pbkdf2Sync,,toString,crypto.pbkdf2Sync.toString,,,30,Converts value to string representation.
4803,handler,,proxy,handler.proxy,,,33,Proxy object for intercepting and customizing operations.
4804,socket,,listeners,socket.listeners,,,33,Retrieve event handlers for a specific event.
4805,agent,,removeSocket,agent.removeSocket,,,22,Remove a socket from the agent.
4806,socket,,unpipe,socket.unpipe,,,33,Disconnect a previously established pipe between streams.
4807,util,,isPlainObject,util.isPlainObject,,,Others,Checks if value is a plain object.
4808,util,,hash,util.hash,,,33,Generate a unique identifier or checksum.
4809,util,,isMobile,util.isMobile,,,26,Detects if the device is a mobile device.
4810,util,,throttle,util.throttle,,,32-36,Limits function execution rate.
4811,util,,hasClass,util.hasClass,,,Others,Checks if an element has a specific class.
4812,RegExp,,getCookie,RegExp.getCookie,,,23,Retrieve a cookie value by its name.
4813,util,,getContrast,util.getContrast,,,26,Determines color contrast between two colors.
4814,util,,normaliseHex,util.normaliseHex,,,29,Convert hex color codes to a standard format.
4815,util,,getLuminance,util.getLuminance,,,33,Calculates brightness or lightness of a color.
4816,util,,traverseDOMPath,util.traverseDOMPath,,,6,Traverse and process nodes along a specified DOM path.
4817,util,,deepExtend,util.deepExtend,,,Others,"Merge objects deeply, preserving nested structures and properties."
4818,util,,addClass,util.addClass,,,25,Add CSS class to an HTML element.
4819,util,,getCookie,util.getCookie,,,Others,"Retrieve a cookie's value by its name."
4820,util,,setCookie,util.setCookie,,,23,Sets a cookie in the browser.
4821,serializer,,hasOwnProperty,serializer.hasOwnProperty,,,Others,Checks if an object has a specific property.
4822,url.host,,indexOf,url.host.indexOf,,,Others,Finds the position of a substring.
4823,Util,,serializeEncodeQueryFromArgs,Util.serializeEncodeQueryFromArgs,,,33,Serialize and encode query parameters from arguments.
4824,Buffer,,createHttpMethod,Buffer.createHttpMethod,,,20,Creates an HTTP method handler function.
4825,Buffer,,mergeMimeTypes,Buffer.mergeMimeTypes,,,33,Combines multiple MIME types into one representation.
4826,Map,,add,Map.add,,,Others,Add a key-value pair to a map.
4827,stream.readable,,pipeThrough,stream.readable.pipeThrough,,,38,Transforms and passes stream data through specified operations.
4828,module.before,,call,module.before.call,,,Others,Invoke a function with a specified `this` context.
4829,session,,getChain,session.getChain,,,Others,Unknown
4830,session,,deleteChain,session.deleteChain,,,Others,Unknown
4831,Util,,toString,Util.toString,,,Others,Converts a value to a string.
4832,session,,addChain,session.addChain,,,Others,Unknown
4833,path,,str,path.str,,,1,Converts path to a string.
4834,context.ui,,prompt,context.ui.prompt,,,Others,User input dialog box for JavaScript.
4835,context,,createRequest,context.createRequest,,,Others,Unknown
4836,json,,push,json.push,,,Others,Add element to end of array.
4837,buf,,readCString,buf.readCString,,,11,Reads a null-terminated string from a buffer.
4838,buf,,readFloat,buf.readFloat,,,Others,Converts bytes to a floating-point number.
4839,buf,,readUint64,buf.readUint64,,,11,Reads 64-bit unsigned integer from buffer.
4840,buf,,readInt32,buf.readInt32,,,11,Reads a 32-bit signed integer from a buffer.
4841,context,,next,context.next,,,Others,Iterator function to move to the next item in sequence.
4842,crypto,,final,crypto.final,,,33,Encrypts or decrypts data using a cryptographic algorithm.
4843,map,,hasImage,map.hasImage,,,Others,Check if map object has an image property.
4844,map,,addImage,map.addImage,,,Others,Add an image to the map.
4845,Array.queue,,push,Array.queue.push,,,Others,Add element to the end of the array.
4846,Array,,resolve,Array.resolve,,,Others,"Promise resolution, returns a resolved Promise."
4847,Array.queue,,shift,Array.queue.shift,,,Others,Remove and return the first element of an array.
4848,path.parentPath,,remove,path.parentPath.remove,,,Others,delete the parent node of a given path within an AST
4849,end,,toUTCString,end.toUTCString,,,Others,Converts date to a UTC string representation.
4850,message.messageType,,substring,message.messageType.substring,,,Others,Extracts part of a string.
4851,it,,substring,it.substring,,,Others,Extracts part of a string.
4852,Map.propComments,,set,Map.propComments.set,,,28,Set value in a Map object.
4853,Map.propTypes,,set,Map.propTypes.set,,,28,Add/update a key-value pair in a Map.
4854,Map.propNames,,add,Map.propNames.add,,,Others,Unknown
4855,event.cookies,,set,event.cookies.set,,,Others,Sets a cookie in the browser.
4856,session,,quick,session.quick,,,Others,Sorting algorithm that rearranges elements quickly.
4857,session.api,,sendGroupNotice,session.api.sendGroupNotice,,,22,Send a notice to a group.
4858,buf,,readUInt32,buf.readUInt32,,,11,Reads an unsigned 32-bit integer from a buffer.
4859,buf,,readUInt16,buf.readUInt16,,,11,Reads an unsigned 16-bit integer from a buffer.
4860,Array.splice,,apply,Array.splice.apply,,,36,Passes arguments as an array.
4861,TextEncoder,,keyEncoder,TextEncoder.keyEncoder,,,Others,Unknown
4862,Date,,trigger,Date.trigger,,,Others,Unknown
4863,Date,,getCookie,Date.getCookie,,,Others,Unknown
4864,Date,,activate,Date.activate,,,Others,Unknown
4865,path.handler,,call,path.handler.call,,,Others,Function execution or method invocation.
4866,path.resolve,,apply,path.resolve.apply,,,Others,Calls a function with a given this value and arguments
4867,response.data,,forEach,response.data.forEach,,,Others,"Iterates over elements in array, executes a function for each."
4868,json,,toString,json.toString,,,Others,Converts object to a string.
4869,path,,isTryStatement,path.isTryStatement,,,Others,Check if the node is a TryStatement.
4870,document,,removeChild,document.removeChild,,,Others,Removes a child node from a parent node.
4871,document,,collection,document.collection,,,Others,Unknown
4872,port.onDisconnect,,addListener,port.onDisconnect.addListener,,,Others,Unknown
4873,port.onDisconnect,,removeListener,port.onDisconnect.removeListener,,,Others,Removes a listener function from an event emitter.
4874,port.onMessage,,addListener,port.onMessage.addListener,,,Others,Unknown
4875,port.onMessage,,removeListener,port.onMessage.removeListener,,,Others,Remove listener from event in JavaScript.
4876,worker.stdout,,pipe,worker.stdout.pipe,,,Others,Unknown
4877,worker.stderr,,pipe,worker.stderr.pipe,,,Others,Unknown
4878,path,,getValue,path.getValue,,,Others,Unknown
4879,map,,getLength,map.getLength,,,Others,Returns the length of an object or array.
4880,map,,getKey,map.getKey,,,Others,Unknown
4881,map,,getValue,map.getValue,,,Others,Return the value of a key in a map.
4882,session.client,,create,session.client.create,,,Others,Unknown
4883,session,,generateSignature,session.generateSignature,,,31,Generate a signature for a session.
4884,test,,titlePath,test.titlePath,,,Others,Get title path from an object in JavaScript.
4885,url,,repace,url.repace,,,Others,Replace occurrences in a string with a new value.
4886,test,,error,test.error,,,Others,Unknown
4887,context,,querySelectorAll,context.querySelectorAll,,,Others,Selects all elements in the document that match a specified CSS selector.
4888,test.annotations,,map,test.annotations.map,,,Others,Transforms each element in an array.
4889,queryString,,match,queryString.match,,,6,String pattern matching.
4890,URL.hostname,,endsWith,URL.hostname.endsWith,,,Others,Check if a string ends with a specific substring.
4891,Event,,createHeadStyle,Event.createHeadStyle,,,Others,Unknown
4892,util,,checkFormat,util.checkFormat,,,Others,Unknown
4893,util,,stripHTML,util.stripHTML,,,Others,Remove HTML tags from a string.
4894,stream,,writeUint16,stream.writeUint16,,,13,Write unsigned 16-bit integer to a stream.
4895,map,,getCanvas,map.getCanvas,,,Others,Returns the canvas element of the map.
4896,map,,project,map.project,,,Others,Transforms values in an array to new array.
4897,context,,tablePersistence,context.tablePersistence,,,Others,Unknown
4898,context.portal,,typed,context.portal.typed,,,Others,Unknown
4899,fs,,split,fs.split,,,Others,Split a string into an array based on a delimiter.
4900,EVENTS,,fire,EVENTS.fire,,,Others,Unknown
4901,url,,e,url.e,,,Others,Unknown
4902,Object,,deliverChangeRecords,Object.deliverChangeRecords,,,Others,Delivers change records for object changes.
4903,Array,,observe,Array.observe,,,Others,Observe changes in an array.
4904,Object,,unobserve,Object.unobserve,,,Others,Stops observing changes on an object.
4905,Array,,unobserve,Array.unobserve,,,Others,Stop observing changes to an array.
4906,Function,,f,Function.f,,,Others,Unknown
4907,cipher,,stream,cipher.stream,,,Others,Unknown
4908,request.cookieJar,,setCookies,request.cookieJar.setCookies,,,Others,Set cookies in the cookie jar.
4909,request,,setHeaders,request.setHeaders,,,20,Set headers for a request.
4910,request.cookieJar,,getCookies,request.cookieJar.getCookies,,,Others,Get cookies stored in a cookie jar.
4911,context.parserServices,,defineTemplateBodyVisitor,context.parserServices.defineTemplateBodyVisitor,,,Others,Traverses template body nodes.
4912,session,,getSession,session.getSession,,,Others,Get session data from a session object.
4913,session,,saveSession,session.saveSession,,,Others,Unknown
4914,request,,getPath,request.getPath,,,Others,Return the path of the incoming request.
4915,request,,getQuery,request.getQuery,,,Others,Extracts query parameters from a URL.
4916,Promise,,getFeignClientExecutorFactory,Promise.getFeignClientExecutorFactory,,,Others,Unknown
4917,console,,lof,console.lof,,,Others,Unknown
4918,Hash,,Hash,Hash.Hash,,,Others,Unknown
4919,domain,,lastIndexOf,domain.lastIndexOf,,,Others,Returns the last index at which a specified element occurs.
4920,watcher,,unwatch,watcher.unwatch,,,Others,Stop watching a property for changes.
4921,error.message,,split,error.message.split,,,Others,Splits a string into an array of substrings.
4922,path,,isCallExpression,path.isCallExpression,,,Others,Check if the path is a Call Expression.
4923,it,,getTime,it.getTime,,,Others,Returns the time value of a Date object.
4924,event,,toLowerCase,event.toLowerCase,,,Others,Converts a string to lowercase.
4925,ctx,,expose,ctx.expose,,,Others,Expose a function or property to the outside world.
4926,ctx.assets,,transform,ctx.assets.transform,,,Others,Unknown
4927,document,,createStyleSheet,document.createStyleSheet,,,Others,Style sheet creation in JavaScript.
4928,String.prototype,,__defineGetter__,String.prototype.__defineGetter__,,,Others,Defines a getter function for a specified property.
4929,ctx.path,,indexOf,ctx.path.indexOf,,,Others,Searches for an element in an array and returns its index
4930,ctx,,acceptsEncodings,ctx.acceptsEncodings,,,30,Parse and determine accepted encodings by the client.
4931,ctx,,remove,ctx.remove,,,8,Remove an item or element from a collection.
4932,json.inputs,,map,json.inputs.map,,,Others,Transforms each element in an array using a callback function.
4933,json.outputs,,map,json.outputs.map,,,Others,Transforms each element of an array.
4934,XMLHttpRequest,,onerror,XMLHttpRequest.onerror,,,Others,Unknown
4935,readStream,,toString,readStream.toString,,,28,Converts object to a string representation.
4936,context.trailer,,copy,context.trailer.copy,,,Others,Unknown
4937,stream.Stream,,call,stream.Stream.call,,,Others,Unknown
4938,assert,,end,assert.end,,,Others,Ends the assertion process and checks final results.
4939,assert,,same,assert.same,,,Others,Check if two values are the same.
4940,assert,,plan,assert.plan,,,Others,Unknown
4941,request,,method.toLowerCase(),request.method.toLowerCase(),,,Others,Converts method string to lowercase.
4942,date,,toISO,date.toISO,,,Others,Converts date to ISO string format.
4943,date,,getWeekDay,date.getWeekDay,,,Others,Date method to get the day of the week.
4944,Intl,,Segmenter,Intl.Segmenter,,,Others,Tokenize text into smaller segments based on specified rules.
4945,object,,constructor,object.constructor,,,Others,"Creation of an object's constructor function."
4946,object,,get,object.get,,,Others,Access property value from an object.
4947,context.get,,bind,context.get.bind,,,Others,Binds a function to a context.
4948,context.set,,bind,context.set.bind,,,Others,Binds a function to a specific context.
4949,module,,libIdent,module.libIdent,,,Others,Unknown
4950,stream._keypressDecoder,,write,stream._keypressDecoder.write,,,Others,Unknown
4951,channel,,split,channel.split,,,Others,Splits a string into an array.
4952,handler,,bind,handler.bind,,,Others,Binds a function to a specific context.
4953,Error,,finally,Error.finally,,,Others,"Executes code after try/catch block, regardless of the outcome."
4954,process.execArgv,,filter,process.execArgv.filter,,,Others,Array method to filter elements based on a condition.
4955,date,,subtract,date.subtract,,,Others,Unknown
4956,date,,tz,date.tz,,,Others,Unknown
4957,date,,calendar,date.calendar,,,Others,Unknown
4958,date,,diff,date.diff,,,Others,Calculate the difference between two dates.
4959,date,,fromNow,date.fromNow,,,Others,Returns a time duration from the current date.
4960,date,,from,date.from,,,30,Converts data from one format to another.
4961,map,,addMapping,map.addMapping,,,Others,Mapping items to a collection.
4962,URL.searchParams,,sort,URL.searchParams.sort,,,Others,Sorts the elements of an array in place.
4963,watcher,,listenerCount,watcher.listenerCount,,,Others,Returns the number of listeners for a specific event.
4964,worker,,resume,worker.resume,,,Others,Unknown
4965,worker,,pause,worker.pause,,,Others,Unknown
4966,document.URL,,indexOf,document.URL.indexOf,,,Others,Check the position of a specified value within a string.
4967,hash,,trim,hash.trim,,,Others,String method to remove whitespace from both ends.
4968,stream,,ignore,stream.ignore,,,38,Skip over values in a stream.
4969,stream,,readString,stream.readString,,,11,Reads and returns a string from a stream.
4970,TextDecoder,,shift,TextDecoder.shift,,,Others,Decode and shift text characters.
4971,document,,set,document.set,,,Others,Set a value to a property in a document.
4972,message,,sendTo,message.sendTo,,,Others,Unknown
4973,object.geometry,,dispose,object.geometry.dispose,,,Others,Unknown
4974,url,,charAt,url.charAt,,,Others,Returns the character at a specified index in a string.
4975,response,,get,response.get,,,Others,Retrieve data from a specified key in an object.
4976,path.hash,,substring,path.hash.substring,,,Others,Return a part of a string.
4977,ctx.warnings,,push,ctx.warnings.push,,,Others,Adds element to end of array.
4978,Set,,toLowerCase,Set.toLowerCase,,,Others,Converts a string to lowercase.
4979,subprocess,,on,subprocess.on,,,Others,Event listener registration.
4980,Path,,getServicesPath,Path.getServicesPath,,,1,Returns the path for services in the application.
4981,Path,,getArikaimPath,Path.getArikaimPath,,,Others,Unknown
4982,Path,,getRootPath,Path.getRootPath,,,Others,Unknown
4983,fs,,readStream,fs.readStream,,,11,Reads data from a stream.
4984,fs,,resolve,fs.resolve,,,1,Returns the full path of a file.
4985,fs.promises,,chmod,fs.promises.chmod,,,9,Change file permissions.
4986,Fs,,Fs,Fs.Fs,,,1,File system operations in JavaScript.
4987,fs,,mkdirs,fs.mkdirs,,,10,Creates multiple directories recursively.
4988,JSON,,stringifyAligned,JSON.stringifyAligned,,,Others,Unknown
4989,resolver,,fireWhenReady,resolver.fireWhenReady,,,Others,Unknown
4990,object,,toJSON,object.toJSON,,,30,Converts object to JSON string.
4991,Set,,every,Set.every,,,Others,Check if all elements pass a test.
4992,handler,,getCommandList,handler.getCommandList,,,Others,Unknown
4993,fetch,,fetchUrl,fetch.fetchUrl,,,Others,Unknown
4994,domain,,substr,domain.substr,,,Others,Returns a portion of a string.
4995,ctx.session,,get,ctx.session.get,,,Others,Retrieve a value from a session object.
4996,ctx.response,,redirect,ctx.response.redirect,,,Others,Redirecting the user to a different URL.
4997,XMLHttpRequest.response,,split,XMLHttpRequest.response.split,,,Others,Splits a string into an array of substrings.
4998,Crypto,,Crypto,Crypto.Crypto,,,31,Create a crypto object
4999,message,,serialize,message.serialize,,,28,Converts object to string for transmission or storage.
5000,ctx,,assert,ctx.assert,,,Others,Assertion testing for verifying conditions in code.
5001,Buffer,,writeUIntBE,Buffer.writeUIntBE,,,28,Write unsigned integer in big-endian byte order in Buffer.
5002,context,,lookup,context.lookup,,,Others,Retrieve value based on key from a specified context.
5003,URL.pathname,,replaceAll,URL.pathname.replaceAll,,,Others,String replacement for all occurrences in a string.
5004,Date.logs,,push,Date.logs.push,,,Others,Add element to end of array.
5005,document.adoptedStyleSheets,,push,document.adoptedStyleSheets.push,,,Others,Add one or more elements to the end of an array.
5006,Set,,stringify,Set.stringify,,,30,Converts a set to a JSON string.
5007,Set,,tryAdd,Set.tryAdd,,,Others,Add element to set if not already present.
5008,Set,,addAction,Set.addAction,,,Others,Add action to a Set.
5009,ctx,,body,ctx.body,,,20,Return response body in server-side application.
5011,URL.protocol,,toLowerCase,URL.protocol.toLowerCase,,,Others,Converts string to lowercase.
5012,test.name,,startsWith,test.name.startsWith,,,Others,String method to check if a string starts with specified characters.
5013,server,,replace,server.replace,,,Others,String replacement method.
5014,vm,,$emit,vm.$emit,,,Others,Trigger custom event in Vue.js component.
5015,vm.cache,,keys,vm.cache.keys,,,Others,Returns an array of keys from a cache object.
5016,vm.blacklist,,some,vm.blacklist.some,,,Others,Checks if at least one element meets the condition.
5017,vm.blacklist,,test,vm.blacklist.test,,,Others,Unknown
5018,vm,,blacklist,vm.blacklist,,,Others,Filtering out specified items from a list.
5019,console.warn,,apply,console.warn.apply,,,Others,Call function with specific context and arguments.
5020,console.zoran,,warn,console.zoran.warn,,,Others,Unknown
5021,console.zoran,,log,console.zoran.log,,,Others,Unknown
5022,error,,sendResponse,error.sendResponse,,,Others,Unknown
5023,URL.hostname,,indexOf,URL.hostname.indexOf,,,Others,Returns the index of a specified value within a string.
5024,ctx.canvas,,toDataURL,ctx.canvas.toDataURL,,,Others,Converts canvas content to a data URL.
5025,buf,,toArrayLike,buf.toArrayLike,,,30,Converts buffer data to array-like object.
5026,document.documentElement,,append,document.documentElement.append,,,Others,Add element to the end of the document.
5027,Date.array,,push,Date.array.push,,,Others,Add element to end of array.
5028,Date.map,,set,Date.map.set,,,28,Set a key-value pair in a Map.
5029,Date.set,,add,Date.set.add,,,Others,"Set add method, adds a new element to the set."
5030,handler,,is_active,handler.is_active,,,Others,Check if handler is active.
5031,handler,,is_blockable,handler.is_blockable,,,Others,Unknown
5032,socket,,to,socket.to,,,22,Broadcasts to all clients except the sender.
5033,events,,error,events.error,,,Others,Unknown
5034,events,,success,events.success,,,Others,Unknown
5035,date,,slice,date.slice,,,Others,Extracts a section of a string.
5036,Array,,outerr,Array.outerr,,,Others,Unknown
5037,Array.out,,push,Array.out.push,,,Others,Add items to the end of an array.
5038,Array.out,,join,Array.out.join,,,Others,Joining array elements into a string with a separator.
5039,http,,toUpperCase,http.toUpperCase,,,Others,Converts a string to uppercase.
5040,Date,,"'%' + key","Date.'%' + key",,,Others,"Concatenates '%' with the value of the variable 'key'."
5041,Promise,,push,Promise.push,,,Others,Add elements to the end of an array.
5042,url.country,,toLowerCase,url.country.toLowerCase,,,Others,Converts a string to lowercase.
5043,url.country_code,,toLowerCase,url.country_code.toLowerCase,,,Others,Converts a string to lowercase.
5044,error.stdout,,includes,error.stdout.includes,,,Others,Check if a string includes another string.
5045,init,,hasOwnProperty,init.hasOwnProperty,,,Others,Check if an object has a specified property.
5046,context.sourceCode,,getLines,context.sourceCode.getLines,,,Others,Return array of lines from source code.
5047,socket.request,,apply,socket.request.apply,,,37,Execute function with given arguments.
5048,socket._raw,,emit,socket._raw.emit,,,Others,Event emitter method for triggering custom events.
5049,socket._responseCbs,,indexOf,socket._responseCbs.indexOf,,,Others,Returns the index of the first occurrence of a value.
5050,socket._responseCbs,,splice,socket._responseCbs.splice,,,Others,Removes/inserts elements in an array.
5051,socket._requestCtxs,,indexOf,socket._requestCtxs.indexOf,,,Others,Returns the index of the first occurrence of a value.
5052,socket._requestCtxs,,splice,socket._requestCtxs.splice,,,Others,Modify array by removing/adding elements at specified index.
5053,context,,fundedWalletProvider,context.fundedWalletProvider,,,Others,Unknown
5054,event.rawPath,,replace,event.rawPath.replace,,,Others,String replacement method.
5055,event.rawPath,,includes,event.rawPath.includes,,,Others,Checks if an array includes a certain value.
5056,module,,getInfoAsync,module.getInfoAsync,,,37,Asynchronous function to retrieve information.
5057,Set,,reset,Set.reset,,,8,Clears all elements from the set.
5058,Set,,prepare,Set.prepare,,,Others,Unknown
5059,Map,,prepare,Map.prepare,,,Others,Unknown
5060,Map,,reset,Map.reset,,,28,Clears or resets the map to its initial state.
5061,Map,,registerWith,Map.registerWith,,,Others,Register a callback function with a specified key.
5062,Set,,register,Set.register,,,10,Registers a new item.
5063,ctx.skeleton,,add,ctx.skeleton.add,,,Others,Unknown
5064,ctx.logger,,log,ctx.logger.log,,,Others,Unknown
5065,script,,toString,script.toString,,,Others,Converts a value to a string.
5066,assert,,false,assert.false,,,Others,Unknown
5067,error.name,,includes,error.name.includes,,,Others,Check if a value is included in a string or array.
5068,assert,,is,assert.is,,,Others,Type assertion for testing with Chai.
5070,Request.prototype,,_getter,Request.prototype._getter,,,Others,Unknown
5071,request,,getQueryParameters,request.getQueryParameters,,,Others,Extracts query parameters from a request URL.
5072,request,,getBodyParameters,request.getBodyParameters,,,Others,Extracts body parameters from a request in JavaScript.
5073,request,,getTimeout,request.getTimeout,,,Others,Unknown
5074,request,,getURI,request.getURI,,,Others,Unknown
5075,event.data,,replace,event.data.replace,,,Others,String replacement method.
5076,json.content,,find,json.content.find,,,Others,Searches for a specific element in an array.
5077,XMLHttpRequest,,import,XMLHttpRequest.import,,,Others,Unknown
5078,Set.php_translated_properties,,has,Set.php_translated_properties.has,,,Others,Check if property exists in object.
5079,Set.typescript_type_properties,,has,Set.typescript_type_properties.has,,,Others,"Check if property exists in object, return true/false."
5080,vm,,setUpdatePerformanceListener,vm.setUpdatePerformanceListener,,,26,Listen for performance updates on a virtual machine.
5081,Set,,concat,Set.concat,,,Others,Join arrays or strings together.
5082,Buffer,,readInt32LE,Buffer.readInt32LE,,,11,Reads 32-bit integer from buffer in little-endian format.
5083,Error,,applyAndWait,Error.applyAndWait,,,Others,Unknown
5084,ctx.data,,sort,ctx.data.sort,,,Others,Sorts the elements of an array in place.
5085,ctx.data,,filter,ctx.data.filter,,,Others,Array method for filtering elements based on a condition.
5086,ctx.data,,forEach,ctx.data.forEach,,,Others,Iterates over elements of an array and executes a function.
5087,ctx,,selector,ctx.selector,,,Others,DOM element selector function.
5088,console,,reactStack,console.reactStack,,,Others,Unknown
5089,console,,reactStackEnd,console.reactStackEnd,,,Others,Unknown
5090,event,,isPersistent,event.isPersistent,,,Others,Check if event data persists in the system.
5091,event.constructor,,release,event.constructor.release,,,Others,Unknown
5092,Promise,,arrayBuffer,Promise.arrayBuffer,,,28,Converts data to an ArrayBuffer.
5093,vm._renderProxy,,setData,vm._renderProxy.setData,,,Others,Unknown
5094,object.fullName,,substring,object.fullName.substring,,,Others,Extracts a portion of a string.
5095,crypto.randomBytes,,toString,crypto.randomBytes.toString,,,29,Returns the string representation of the random bytes generated by crypto.randomBytes.
5096,fs.readFileSync,,toString,fs.readFileSync.toString,,,29,Returns the source code of the `readFileSync` function as a string.
5097,fs.readdirSync,,forEach,fs.readdirSync.forEach,,,Others,"Iterate over each item in the directory synchronously, likely performing an action on each."
5098,child_process.spawn,,stdout.pipe,child_process.spawn.stdout.pipe,,,38,Piping the output of the child process to another destination.
5099,child_process.spawn,,stderr.pipe,child_process.spawn.stderr.pipe,,,38,Pipes the standard error output of a child process.
5100,child_process.spawn,,unref,child_process.spawn.unref,,,Others,Prevents the child process from keeping the event loop active.
5101,child_process.spawn,,stderr.on,child_process.spawn.stderr.on,,,Others,Registers an event listener for handling data from the standard error stream of a child process.
5102,child_process.spawn,,on,child_process.spawn.on,,,Others,Registers event listeners for the spawned child process.
5103,child_process.spawn,,stdin.end,child_process.spawn.stdin.end,,,Others,"Ends the input stream, signaling the end of data transmission."
5104,fs.readFileSync,,split,fs.readFileSync.split,,,Others,Splits the content of the file read by `fs.readFileSync` method.
5105,child_process.spawn,,stdout.on,child_process.spawn.stdout.on,,,Others,Triggers an event handler when there is data available on the stdout stream.
5106,child_process.execSync,,toString,child_process.execSync.toString,,,29,Returns a string representation of the `execSync` function in JavaScript.
5107,path.join,,endsWith,path.join.endsWith,,,3,Checks if the path ends with a specific string.
5108,fs.readdirSync,,toString,fs.readdirSync.toString,,,29,converts the array returned by readdirSync to a string.
5109,crypto.publicEncrypt,,toString,crypto.publicEncrypt.toString,,,Others,Returns a string representation of the publicEncrypt method in the crypto module.
5112,fs.readFileSync,,indexOf,fs.readFileSync.indexOf,,,Others,Returns the index of the first occurrence of a specified value within the read file.
5113,fs.readFileSync,,substr,fs.readFileSync.substr,,,Others,Unknown
5114,dns.trim,,split,dns.trim.split,,,Others,Splits a string into an array based on a delimiter.
5115,child_process,,"""spawn""","child_process.""spawn""",,,35,Spawns a new process in Node.js environment.
5116,"child_process.""spawn""",,unref,"child_process.""spawn"".unref",,,Others,"Makes the child process independent of parent process, allowing parent to exit without child."
5117,Date.substring,,toLowerCase,Date.substring.toLowerCase,,,Others,Converts the substring of a Date object to lowercase.
5118,https.get,,on,https.get.on,,,Others,Registers a callback function to handle events emitted by the https module.
5119,fs.lstatSync,,isSymbolicLink,fs.lstatSync.isSymbolicLink,,,Others,Checks if the file is a symbolic link.
5120,fs.statSync,,isDirectory,fs.statSync.isDirectory,,,3,"Returns true if the file path is a directory, false if not."
5121,path.parse,,dir.split,path.parse.dir.split,,,1,Splits the directory path into an array of substrings.